This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-24T23:19:29.021Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/AuthorCard.astro
components/BaseHead.astro
components/BlogCard.astro
components/BlogHeader.astro
components/BlogInfo.astro
components/BottomNavigationBar/BottomNavigationBar.css
components/BottomNavigationBar/BottomNavigationBar.tsx
components/BottomNavigationBar/index.ts
components/BottomNavigationBar/useScrollHandler.ts
components/BottomNavigationBar/useTooltipHandler.ts
components/ContentWrapper.astro
components/FancyLink.astro
components/Footer/Footer.astro
components/Footer/index.ts
components/Footer/LastUpdatedTime.astro
components/GithubCard.astro
components/icons/ArrowOutward.tsx
components/icons/ArrowRight.tsx
components/icons/Astro.tsx
components/icons/Bookmarks.tsx
components/icons/Briefcase.tsx
components/icons/ChatTeardrop.tsx
components/icons/Codepen.tsx
components/icons/Construction.tsx
components/icons/Docker.tsx
components/icons/DocuSign.astro
components/icons/DocuSign.tsx
components/icons/Drizzle.tsx
components/icons/Figma.tsx
components/icons/Flask.astro
components/icons/Github.tsx
components/icons/GithubOutline.tsx
components/icons/Globe.tsx
components/icons/HandPalm.tsx
components/icons/HandWaving.tsx
components/icons/Hono.tsx
components/icons/Info.tsx
components/icons/Jest.tsx
components/icons/LinkedIn.tsx
components/icons/Location.tsx
components/icons/Mail.tsx
components/icons/Minus.tsx
components/icons/Monkeytype.tsx
components/icons/NestJs.tsx
components/icons/NextJs.tsx
components/icons/Notion.tsx
components/icons/NuxtJs.tsx
components/icons/Pencil.tsx
components/icons/Play.tsx
components/icons/Plus.tsx
components/icons/Prisma.tsx
components/icons/Puppeteer.tsx
components/icons/Python.astro
components/icons/ReactJs.tsx
components/icons/ReactQuery.tsx
components/icons/Scroll.tsx
components/icons/Search.tsx
components/icons/Spotify.tsx
components/icons/SQLAlchemy.astro
components/icons/Stack.tsx
components/icons/Suitcase.tsx
components/icons/Swr.tsx
components/icons/Tailwind.tsx
components/icons/Target.tsx
components/icons/Telegram.tsx
components/icons/TelegramFilled.tsx
components/icons/Timer.tsx
components/icons/Translate.tsx
components/icons/TypeScript.tsx
components/icons/VueJs.tsx
components/icons/X.tsx
components/Image/Image.astro
components/Image/index.ts
components/Image/MarkdownImage.astro
components/Image/types.ts
components/Link/index.ts
components/Link/Link.astro
components/Link/LinkArticle.astro
components/LinkCard.astro
components/NotificationCard/index.ts
components/NotificationCard/NotificationCard.astro
components/PhotoCard/index.ts
components/PhotoCard/PhotoCard.astro
components/ProjectCard/index.ts
components/ProjectCard/ProjectCard.astro
components/ProjectHeader.astro
components/Raylight/index.ts
components/Raylight/RayLight.css
components/Raylight/RayLight.tsx
components/Raylight/RayLightContainer.astro
components/SectionHeader.astro
components/SEO.astro
components/socialMediaData.ts
components/TableOfContent/index.ts
components/TableOfContent/TableOfContent.tsx
components/TopOverlay.astro
components/TweetCard/index.ts
components/TweetCard/Tweet.astro
components/TweetCard/TweetCard.astro
components/TweetCard/TweetHeader.astro
components/TweetCard/TweetLink.tsx
components/TweetCard/TweetMedia.astro
components/TweetCard/TweetText.tsx
components/TweetCard/TweetVideo.tsx
components/ui/button.tsx
components/ui/dock.tsx
components/ui/marquee.tsx
components/ui/scroll-progress-bar.tsx
components/ui/separator.tsx
components/ui/tooltip/index.ts
components/ui/tooltip/tooltip-arrow-primitive.tsx
components/ui/tooltip/tooltip-arrow.tsx
components/ui/tooltip/tooltip.tsx
components/Video/index.ts
components/Video/Video.tsx
content.config.ts
content/_icons.ts
content/blog/customize-shadcn-tooltip-arrows.mdx
content/blog/zod-computed-default-value.mdx
content/blog/zoom-to-mouse-functionality-in-obs.mdx
content/projects/bookmarked-android.mdx
content/projects/bookmarked.mdx
layouts/BaseLayout.astro
layouts/BlogLayout/BlogLayout.astro
layouts/BlogLayout/index.ts
layouts/components/Links.astro
layouts/ProjectLayout/index.ts
layouts/ProjectLayout/ProjectLayout.astro
lib/baseUrl.ts
lib/client.ts
lib/customTransition.ts
lib/graphql.ts
lib/metaData.ts
lib/structuredData.ts
lib/utils.ts
pages/_components/bento/BentoBadge/BentoBadge.tsx
pages/_components/bento/BentoBadge/index.ts
pages/_components/bento/BentoCard/BentoCard.tsx
pages/_components/bento/BentoCard/index.ts
pages/_components/bento/BentoItemCTA/BentoItemCTA.astro
pages/_components/bento/BentoItemCTA/index.ts
pages/_components/bento/BentoItemFeaturedWork/BentoItemFeaturedWork.astro
pages/_components/bento/BentoItemFeaturedWork/index.ts
pages/_components/bento/BentoItemGithubActivity/BentoItemGithubActivity.astro
pages/_components/bento/BentoItemGithubActivity/BentoItemGithubActivityChart.tsx
pages/_components/bento/BentoItemGithubActivity/index.ts
pages/_components/bento/BentoItemMapLocation/BentoItemMapLocation.tsx
pages/_components/bento/BentoItemMapLocation/index.ts
pages/_components/bento/BentoItemNowPlaying/BentoItemNowPlaying.astro
pages/_components/bento/BentoItemNowPlaying/BentoItemNowPlaying.tsx
pages/_components/bento/BentoItemNowPlaying/index.ts
pages/_components/bento/BentoItemTechStack/BentoItemTechStack.tsx
pages/_components/bento/BentoItemTechStack/index.ts
pages/_components/bento/BentoItemTechStack/TechStacks.tsx
pages/_components/bento/BentoItemTechStack/techStacksData.ts
pages/_components/bento/BentoItemTypingSpeed/BentoItemTypingSpeed.astro
pages/_components/bento/BentoItemTypingSpeed/BentoItemTypingSpeedContent.tsx
pages/_components/bento/BentoItemTypingSpeed/index.ts
pages/_components/BentoSection.astro
pages/_components/BlogSection.astro
pages/_components/Decorator.astro
pages/_components/HeroSection.astro
pages/_components/Keyboard.astro
pages/_components/ProjectSection.astro
pages/_components/UnderConstruction.astro
pages/about.astro
pages/api/_services/github/contributions.ts
pages/api/_services/github/index.ts
pages/api/_services/github/lastUpdatedFile.ts
pages/api/_services/github/repoInfo.ts
pages/api/_services/linkMetadata.ts
pages/api/_services/monkeytype.ts
pages/api/_services/spotify.ts
pages/api/_services/tweetContent.ts
pages/api/[...path].ts
pages/api/map/[z]/[x]/[y].png.ts
pages/api/og/[slug].ts
pages/blog/[id].astro
pages/blog/index.astro
pages/bookmarks.astro
pages/index.astro
pages/projects/_components/Decorator.astro
pages/projects/[id].astro
pages/projects/index.astro
pages/robots.txt.ts
pages/rss.xml.js
styles/global.css
types/index.ts

================================================================
Repository Files
================================================================

================
File: components/AuthorCard.astro
================
---
import Image from './Image'
import Link from './Link'

interface Props {
  name?: string
  avatar?: string
  timeToRead?: number
}

const {
  timeToRead = 5,
  avatar = 'https://pbs.twimg.com/profile_images/1513545633377968130/Gg5-8HI__400x400.jpg',
  name = 'Andres'
} = Astro.props
---

<Link
  href='https://x.com/iandrespaulino'
  target='_blank'
  class='space-y-3 text-slate-200'
>
  <p class='font-display text-lg'>Written by</p>
  <div class='flex items-center gap-3'>
    <Image
      src={avatar}
      alt="Author's avatar"
      class='size-12'
      wrapperProps={{
        class: 'rounded-full outline outline-zinc-800'
      }}
      inferSize
    />
    <span class='flex-1 text-slate-400'>
      <p class='font-medium text-zinc-200'>{name}</p>
      <p class='text-sm text-slate-400/80'>
        {Math.ceil(timeToRead)} min read
      </p>
    </span>
  </div>
</Link>

================
File: components/BaseHead.astro
================
---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css'

import { ClientRouter } from 'astro:transitions'
import { AstroFont } from 'astro-font'
---

<!-- Global Metadata -->
<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<meta name='generator' content={Astro.generator} />
<link rel='sitemap' href='/sitemap-index.xml' />

<!-- Font -->
<AstroFont
  config={[
    {
      name: 'Switzer',
      src: [
        {
          style: 'normal',
          weight: '300 700',
          path: '/fonts/Switzer-Variable.woff2'
        }
      ],
      preload: true,
      display: 'swap',
      selector: 'body',
      fallback: 'sans-serif'
    },
    {
      name: 'Fustat SemiBold',
      src: [
        {
          style: 'normal',
          weight: '400 700',
          path: '/fonts/Fustat-VariableFont_wght.ttf'
        }
      ],
      preload: true,
      display: 'swap',
      fallback: 'sans-serif'
    },
    {
      src: [],
      name: 'DM Mono',
      googleFontsURL:
        'https://fonts.googleapis.com/css2?family=DM+Mono:ital,wght@0,300;0,400;1,300;1,400&display=swap',
      preload: true,
      display: 'swap',
      selector: 'code',
      fallback: 'monospace'
    }
  ]}
/>

<script
  is:inline
  defer
  type='text/partytown'
  src='https://cloud.umami.is/script.js'
  data-website-id='b7ee2ae5-c6b3-4da2-b6d5-c1607bba7b22'
  data-domains='andrespaulino.dev,www.andrespaulino.dev'></script>

<ClientRouter fallback='swap' />

================
File: components/BlogCard.astro
================
---
import type { CollectionEntry } from 'astro:content'
import calculateReadingTime from 'reading-time'

import BlogInfo from './BlogInfo.astro'
import { ArrowRight } from './icons/ArrowRight'
import Image from './Image'
import Link from './Link'

interface Props extends CollectionEntry<'blog'> {}

const {
  id: slug,
  data: { heroImage, title, pubDate, description, tags },
  body
} = Astro.props

const { minutes } = calculateReadingTime(body!)
---

<Link
  href={`blog/${slug}`}
  class='group flex gap-8 border-t border-t-zinc-900 py-10 max-md:flex-col'
>
  <Image
    src={heroImage}
    alt={title}
    align='center'
    class='aspect-[2] transition-all duration-800 group-hover:scale-105 md:aspect-[1.5]'
    wrapperProps={{ class: 'rounded-lg overflow-clip md:max-w-[260px]' }}
    inferSize
  />
  <div class='flex w-full flex-col justify-between lg:py-2'>
    <div class='font-light'>
      <BlogInfo pubDate={pubDate} readingTime={minutes} />
      <p
        class='font-display mt-3 line-clamp-2 text-lg font-semibold leading-[1.4]'
      >
        {title}
      </p>
      <p class='mt-2 line-clamp-2 text-zinc-400 max-md:text-sm'>
        {description}
      </p>
    </div>

    <div
      class='mt-4 flex justify-between gap-6 max-xs:flex-col-reverse xs:mt-6 xs:items-center'
    >
      <span
        class='link-hover-animation group-hover:link-hovered-animation w-fit text-sm text-emerald-400'
        >Read more
        <ArrowRight
          className='ml-1 inline-block transition-all duration-300 group-hover:ml-2'
        />
      </span>
      <ul class='flex flex-wrap gap-2'>
        {
          tags.map((item: string) => (
            <li class='rounded bg-zinc-900 px-2 py-1 font-mono text-xs tracking-tight text-zinc-500'>
              {item}
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</Link>

<style define:vars={{ offsetEnd: '24px' }}></style>

================
File: components/BlogHeader.astro
================
---
import { blogMetaData } from '@/lib/metaData'

import { Pencil } from './icons/Pencil'
import SectionHeader, {
  type Props as SectionHeaderProps
} from './SectionHeader.astro'

interface Props extends Pick<SectionHeaderProps, 'forHomePage' | 'class'> {}
---

<SectionHeader
  section='Blog'
  icon={Pencil}
  {...blogMetaData}
  {...Astro.props}
/>

================
File: components/BlogInfo.astro
================
---
import dayjs from 'dayjs'

interface Props {
  pubDate: Date
  readingTime?: number
}

const { pubDate, readingTime } = Astro.props
---

<div class='space-x-1 text-sm text-zinc-400'>
  <span>{dayjs(pubDate).format('MMMM D, YYYY')}</span>
  {
    readingTime && (
      <>
        <span>•</span>
        <span>{Math.ceil(readingTime)} min read</span>
      </>
    )
  }
</div>

================
File: components/BottomNavigationBar/BottomNavigationBar.css
================
:root {
  --speed: 0.25;
  --blur: 4;
  --ease-in: linear(0 0%,
      0.0039 6.25%,
      0.0156 12.5%,
      0.0352 18.75%,
      0.0625 25%,
      0.0977 31.25%,
      0.1407 37.5%,
      0.1914 43.74%,
      0.2499 49.99%,
      0.3164 56.25%,
      0.3906 62.5%,
      0.5625 75%,
      0.7656 87.5%,
      1 100%);
  --ease: ease;
  --nav: 'nav';
}

.nav {
  anchor-name: --my-nav;
  left: 50%;
  translate: 0% 0;
  margin-left: calc(var(--width) * -0.5px);

  --width: 258;
  --bottom-nav-bar-offset: 32px;
  view-transition-name: --nav;
}

::view-transition-group(--nav) {
  z-index: 10;
}

@media (max-width: 480px) {
  .nav {
    --bottom-nav-bar-offset: 16px;
  }

  .tip {
    display: none;
  }
}

.tip {
  position-anchor: --my-nav;
  position: fixed;
  bottom: anchor(top);
  left: anchor(left);
  height: 2rem;
  width: 100px;

  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(12px);
  font-size: 0.85rem;
  letter-spacing: 0.025em;
  padding-bottom: 32px;

  border-radius: 100px;
  pointer-events: none;
  overflow: hidden;
  border: 1px solid theme(colors.shark.950);
  z-index: 999999999;
}

.tip__track {
  display: grid;
  height: 2rem;
}

.tip {
  .tip__track {
    grid-auto-flow: column;
    grid-auto-columns: 100%;
  }
}

.tip__track div {
  height: var(2rem);
  padding-inline: 0.5rem;
  display: grid;
  place-items: center;
}

.tip {
  position-try-fallbacks: flip-block, flip-inline;
}

.tip {
  translate: calc(-125% + (var(--tip-x) * 1px));
  bottom: 100px;
}

@supports (anchor-name: --my-nav) and (position-anchor: --my-nav) {
  .tip {
    left: anchor(left);
    bottom: calc(anchor(top) + 1rem);
    translate: calc(-50% + (var(--tip-x) * 1px));
    /* translate: calc(-50% + (var(--tip-x) * 1px)) calc(var(--tip-y) * 1px + -50%); */
  }

}

/* :has() hovering stuff */
:root:has(nav li:nth-of-type(1):is(:hover)) {
  --active: 1;

  .tip__track div:nth-of-type(1) {
    --shown: 1;
  }
}

:root:has(nav li:nth-of-type(2):is(:hover)) {
  --active: 2;

  .tip__track div:nth-of-type(2) {
    --shown: 1;
  }
}

:root:has(nav li:nth-of-type(3):is(:hover)) {
  --active: 3;

  .tip__track div:nth-of-type(3) {
    --shown: 1;
  }
}

:root:has(nav li:nth-of-type(4):is(:hover)) {
  --active: 4;

  .tip__track div:nth-of-type(4) {
    --shown: 1;
  }
}

:root:has(nav li:nth-of-type(5):is(:hover)) {
  --active: 5;

  .tip__track div:nth-of-type(5) {
    --shown: 1;
  }
}

:root:has(nav li:nth-of-type(6):is(:hover)) {
  --active: 6;

  .tip__track div:nth-of-type(6) {
    --shown: 1;
  }
}

.tip {
  scale: var(--show, 0);
  filter: blur(calc(var(--blur, 0) * 1px));
  transition:
    scale calc(var(--speed) * 1s) var(--ease),
    filter calc(var(--speed) * 1s) ease;
}

.tip__track {
  translate: calc((var(--active) - 1) * (-100%)) 0;
}

.tip__track {
  transition: translate calc(var(--speed) * 1s) calc(var(--speed) * 1s) var(--ease);
}

.tip__track div {
  filter: blur(calc((var(--blur, 0) * 1px) * (1 - var(--shown, 0))));
  opacity: var(--shown, 0);
  transition:
    filter calc(var(--speed) * 1s) var(--ease-in),
    opacity calc(var(--speed) * 1s) var(--ease);
}

:root:has(.nav ul:is(:hover)) {
  .tip {
    --show: 1;
    filter: blur(0);
  }

  .tip__track {
    transition-delay: 0s;
  }
}

================
File: components/BottomNavigationBar/BottomNavigationBar.tsx
================
import './BottomNavigationBar.css'

import { useEffect, useRef, useState } from 'react'

import { cn } from '@/lib/utils'

import { Bookmarks } from '../icons/Bookmarks'
import { Briefcase } from '../icons/Briefcase'
import { ChatTeardropDots } from '../icons/ChatTeardrop'
import { HandPalm } from '../icons/HandPalm'
import { HandWaving } from '../icons/HandWaving'
import { Dock, DockIcon } from '../ui/dock'
import useScrollHandler from './useScrollHandler'
import { useTooltipHandler } from './useTooltipHandler'

export const bottomNavigationItems = [
  {
    name: 'Hi 👋',
    icon: HandWaving,
    href: '/'
  },
  {
    name: 'Projects',
    icon: Briefcase,
    href: '/projects'
  },
  {
    name: 'Blog',
    icon: ChatTeardropDots,
    href: '/blog'
  },
  {
    name: 'About',
    icon: HandPalm,
    href: '/about'
  },
  {
    name: 'Bookmarks',
    icon: Bookmarks,
    href: '/bookmarks'
  }
]

const BottomNavigationBar = () => {
  const [currentPath, setCurrentPath] = useState('')
  const firstSegment = '/' + (currentPath.split('/').filter(Boolean)[0] ?? '')

  const navRef = useRef<HTMLDivElement>(null)

  const { handleScroll, setInitialPosition } = useScrollHandler(navRef)
  const { setupTooltip } = useTooltipHandler(navRef)

  const handlePathChange = () => {
    // hide the tooltip when the page is loaded
    const tip = document.querySelector<HTMLDivElement>('.tip')
    tip?.style.setProperty('--show', '0')
  }

  useEffect(() => {
    setCurrentPath(window.location.pathname)

    document.addEventListener('astro:page-load', handlePathChange)
    document.addEventListener('local-navigation', (e) => {
      setCurrentPath((e as CustomEvent).detail.path)
    })
    window.addEventListener('scroll', handleScroll)

    setInitialPosition()
    setupTooltip()

    return () => {
      document.removeEventListener('astro:page-load', handlePathChange)
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  return (
    <>
      <nav
        ref={navRef}
        onPointerMove={() => {
          // remove the css variable which force tooltip to be hidden
          const tip = document.querySelector<HTMLDivElement>('.tip')
          tip?.style.removeProperty('--show')
        }}
        className={cn('nav', 'fixed z-10')}
        style={{ bottom: 'var(--bottom-nav-bar-offset)' }}
      >
        <Dock direction='middle'>
          {bottomNavigationItems.map(({ name, icon: Icon, href }) => (
            <DockIcon
              key={name}
              href={href}
              onClick={() => setCurrentPath(href)}
              aria-label={name}
            >
              <Icon className='size-6' />
              {firstSegment === href && (
                <div className='absolute bottom-2 size-1 rounded-full bg-emerald-300'></div>
              )}
            </DockIcon>
          ))}
        </Dock>
      </nav>
      <div className='tip' aria-hidden='true'>
        <div className='tip__track'>
          {bottomNavigationItems.map(({ name }) => (
            <div key={name}>{name}</div>
          ))}
        </div>
      </div>
    </>
  )
}

export default BottomNavigationBar

================
File: components/BottomNavigationBar/index.ts
================
export { default } from './BottomNavigationBar'

================
File: components/BottomNavigationBar/useScrollHandler.ts
================
import { useRef } from 'react'

const OFFSET = 32
const NAV_BAR_HEIGHT = 58

const useScrollHandler = (navRef: React.RefObject<HTMLDivElement | null>) => {
  const navBottom = useRef(OFFSET)
  const offset = useRef(OFFSET)
  const previousScrollY = useRef(0)

  const handleScroll = () => {
    if (!navRef.current) return

    const currentScrollY = window.scrollY
    const deltaScroll = currentScrollY - previousScrollY.current

    // handle condition when the initial scroll position != 0
    if (deltaScroll > NAV_BAR_HEIGHT && previousScrollY.current === 0) {
      return (previousScrollY.current = currentScrollY)
    }

    // scroll down
    if (deltaScroll > 0) {
      navBottom.current = Math.max(
        navBottom.current - deltaScroll,
        -(navRef.current.clientHeight || NAV_BAR_HEIGHT)
      )
    } else {
      navBottom.current = Math.min(
        navBottom.current - deltaScroll,
        offset.current
      )
    }

    navRef.current.style.bottom = `${navBottom.current}px`

    previousScrollY.current = currentScrollY
  }

  const setInitialPosition = () => {
    if (!navRef.current) return

    const computedStyle = getComputedStyle(navRef.current)
    const bottomNavBarOffset =
      Number(
        computedStyle
          .getPropertyValue('--bottom-nav-bar-offset')
          .replace('px', '')
      ) || OFFSET
    navBottom.current = bottomNavBarOffset
    offset.current = bottomNavBarOffset
  }

  return { handleScroll, navRef, setInitialPosition }
}

export default useScrollHandler

================
File: components/BottomNavigationBar/useTooltipHandler.ts
================
import React, { useRef } from 'react'

export const useTooltipHandler = (
  navRef: React.RefObject<HTMLDivElement | null>
) => {
  const tipX = useRef(0)
  const tipY = useRef(0)
  const bounds = useRef<DOMRect>(null)

  const setTipXY = () => {
    document.documentElement.style.setProperty(
      '--tip-x',
      tipX.current.toString()
    )
    document.documentElement.style.setProperty(
      '--tip-y',
      tipY.current.toString()
    )
  }

  const track = ({ x, y }: { x: number; y: number }) => {
    if (!bounds.current) return

    tipX.current = x - bounds.current.left
    tipY.current = y - bounds.current.top

    setTipXY()
  }

  const setupTooltip = () => {
    const nav = navRef?.current
    if (!nav) return

    const navSize = nav.getBoundingClientRect().width
    nav.style.opacity = '1'
    nav.style.setProperty('--width', navSize.toString())

    const teardown = () => {
      nav.removeEventListener('pointermove', track)
      nav.removeEventListener('pointerleave', teardown)
    }

    const initPointerTrack = () => {
      bounds.current = nav.getBoundingClientRect()
      nav.addEventListener('pointermove', track)
      nav.addEventListener('pointerleave', teardown)
    }

    nav.addEventListener('pointerenter', initPointerTrack)
  }

  return { setupTooltip }
}

================
File: components/ContentWrapper.astro
================
---
import type { AstroComponentFactory } from 'astro/runtime/server/index.js'

import MarkdownImage from './Image/MarkdownImage.astro'
import { LinkArticle } from './Link'

interface Props {
  content: AstroComponentFactory
}

const { content: Content } = Astro.props
---

<Content components={{ a: LinkArticle, img: MarkdownImage }} />

================
File: components/FancyLink.astro
================
---
import Link from './Link'

interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}

const { class: className, ...rest } = Astro.props
---

<Link class={className} {...rest}>
  <div class:list={'animated-button'}>
    <svg
      aria-hidden='true'
      viewBox='0 0 24 24'
      class='arr-2 size-4'
      xmlns='http://www.w3.org/2000/svg'
    >
      <path
        d='M16.1716 10.9999L10.8076 5.63589L12.2218 4.22168L20 11.9999L12.2218 19.778L10.8076 18.3638L16.1716 12.9999H4V10.9999H16.1716Z'
      ></path>
    </svg>
    <span class='text'><slot /></span>
    <span class='circle'></span>
    <svg
      aria-hidden='true'
      viewBox='0 0 24 24'
      class='arr-1 size-4'
      xmlns='http://www.w3.org/2000/svg'
    >
      <path
        d='M16.1716 10.9999L10.8076 5.63589L12.2218 4.22168L20 11.9999L12.2218 19.778L10.8076 18.3638L16.1716 12.9999H4V10.9999H16.1716Z'
      ></path>
    </svg>
  </div>
</Link>

<style>
  a {
    --color: ghostwhite;
  }

  .animated-button {
    position: relative;
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 12px 32px;
    border: 4px solid;
    border-color: transparent;
    font-size: 0.875rem;
    background-color: inherit;
    border-radius: 100px;
    font-weight: 500;
    color: var(--color);
    box-shadow: 0 0 0 1px var(--color);
    cursor: pointer;
    overflow: hidden;
    transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .animated-button svg {
    position: absolute;
    width: 24px;
    fill: var(--color);
    z-index: 9;
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .animated-button .arr-1 {
    right: 16px;
  }

  .animated-button .arr-2 {
    left: -25%;
  }

  .animated-button .circle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    background-color: var(--color);
    border-radius: 50%;
    opacity: 0;
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .animated-button .text {
    position: relative;
    z-index: 1;
    transform: translateX(-12px);
    transition: all 0.8s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .animated-button:hover {
    box-shadow: 0 0 0 8px transparent;
    color: #212121;
    border-radius: 12px;
  }

  .animated-button:hover .arr-1 {
    right: -25%;
  }

  .animated-button:hover .arr-2 {
    left: 16px;
  }

  .animated-button:hover .text {
    transform: translateX(12px);
  }

  .animated-button:hover svg {
    fill: #212121;
  }

  .animated-button:active {
    scale: 0.95;
    box-shadow: 0 0 0 4px var(--color);
  }

  .animated-button:hover .circle {
    width: 220px;
    height: 220px;
    opacity: 1;
  }
</style>

================
File: components/Footer/Footer.astro
================
---
import { ArrowOutward } from '@icons/ArrowOutward'
import { X } from '@icons/X'

import Link from '@/components/Link'
import { mainMetaData } from '@/lib/metaData'

import { SOCIAL_MEDIA_DATA } from '../socialMediaData'
import LastUpdatedTime from './LastUpdatedTime.astro'

type FooterContent = {
  title: string
  links: {
    text: string
    href: string
    withIcon?: boolean
    inNewTab?: boolean
  }[]
}

const socialMediaData = [
  ...SOCIAL_MEDIA_DATA,
  { icon: X, href: 'https://twitter.com/iandresmiguel', name: 'twitter' }
]

const FOOTER_CONTENTS: FooterContent[] = [
  {
    title: 'Me',
    links: [
      { text: 'Projects', href: '/projects' },
      { text: 'Blog', href: '/blog' },
      { text: 'Bookmarks', href: '/bookmarks' }
    ]
  },
  {
    title: 'This site',
    links: [
      {
        text: 'Analytics',
        href: 'https://us.umami.is/share/Fmo9fhCyJtinAbWP/andrespaulino.dev',
        inNewTab: true
      },
      { text: 'RSS', href: '/rss.xml', inNewTab: true },
      {
        text: 'Source code',
        href: 'https://github.com/andrespaulino/andrespaulino.dev',
        inNewTab: true
      }
    ]
  },
  {
    title: 'Elsewhere',
    links: [
      {
        text: 'Bluesky',
        href: 'https://bsky.app/profile/andrespaulino.dev',
        inNewTab: true,
        withIcon: true
      },
      {
        text: 'Monkeytype',
        href: 'https://monkeytype.com/profile/andrespaulino',
        inNewTab: true,
        withIcon: true
      }
    ]
  }
]
---

<footer class='relative mt-auto w-full'>
  <div
    class:list={[
      '-z-10 h-48 w-3/5 opacity-25 blur-[160px]',
      'absolute left-1/2 top-0 -translate-x-1/2 xs:top-24'
    ]}
  >
  </div>

  <!-- separator -->
  <div
    class:list={[
      'h-[1px] w-full',
      'bg-gradient-to-r from-zinc-800/25 via-zinc-800/75 to-zinc-800/25'
    ]}
  >
  </div>

  <!-- footer content -->
  <div class='flex justify-center bg-zinc-950 pb-16 pt-20 max-[960px]:pb-8'>
    <div
      class:list={[
        'flex items-stretch justify-between text-sm tracking-wide',
        'w-full px-12 max-sm:px-4 min-[1200px]:w-[1200px]',
        'gap-16 max-[960px]:flex-col-reverse'
      ]}
    >
      <div class='space-y-24'>
        <div class='space-y-3'>
          <p class='text-lg leading-none text-zinc-200'>
            <span class='mx-[2px]'>•</span> Andres Paulino
          </p>
          <p
            class='text-[13px] text-zinc-500'
            set:html={mainMetaData.htmlDescription}
          />
        </div>
        <div class='space-y-6'>
          <ul class='flex gap-3 text-zinc-200'>
            {
              socialMediaData.map(({ icon: Icon, href, name }) => (
                <li>
                  <Link
                    href={href}
                    target='_blank'
                    aria-label={name}
                    class='group'
                  >
                    <Icon className='size-5 rounded group-focus-within:outline outline-offset-4 outline-emerald-300' />
                  </Link>
                </li>
              ))
            }
          </ul>
          <p class='text-xs text-zinc-500'>
            &copy; {new Date().getFullYear()} Andres Paulino. All rights reserved.
          </p>
        </div>
      </div>

      <div
        class:list={[
          'flex flex-col justify-between max-xs:gap-16',
          'max-[960px]:flex-col-reverse max-[960px]:gap-12',
          'text-zinc-200'
        ]}
      >
        <div
          class='grid grid-cols-3 gap-y-16 max-[960px]:max-w-[480px] max-xs:grid-cols-2 sm:gap-24'
        >
          {
            FOOTER_CONTENTS.map(({ title, links }) => (
              <div class='space-y-4'>
                <p class='text-zinc-200'>{title}</p>
                <ul class='flex flex-col gap-3 text-zinc-400'>
                  {links.map(({ text, href, withIcon, inNewTab }) => (
                    <li>
                      <Link
                        href={href}
                        target={inNewTab ? '_blank' : '_self'}
                        class='flex items-center gap-1 font-normal hover:text-zinc-200'
                      >
                        <span>{text}</span>
                        {withIcon && <ArrowOutward className='size-3' />}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            ))
          }
        </div>
        <LastUpdatedTime class='text-zinc-500' />
      </div>
    </div>
  </div>
</footer>

================
File: components/Footer/index.ts
================
export { default } from './Footer.astro'

================
File: components/Footer/LastUpdatedTime.astro
================
---
import client from '@/lib/client'
import { formatDateByTimeZone } from '@/lib/utils'

interface Props {
  class?: string
}

const response = await client.api.github['repo-info'][':owner'][
  ':repository'
].$get({
  param: {
    owner: 'andrespaulino',
    repository: 'andrespaulino.dev'
  }
})
const data = response.status === 200 ? await response.json() : null

if (!data) return

const date = new Date(data.pushedAt)

const formattedDate = formatDateByTimeZone(date)

const { class: className } = Astro.props
---

{
  data ? (
    <p class:list={['text-xs min-[961px]:self-end', className]}>
      Last updated by Andres Paulino <br class='xs:hidden' /> on {formattedDate} UTC+7
    </p>
  ) : (
    // TODO: handle error
    <p>Something went wrong 😔</p>
  )
}

================
File: components/GithubCard.astro
================
---
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'

import client from '@/lib/client'

import { Github } from './icons/Github'
import Link from './Link'

interface Props {
  owner: string
  repository: string
  class?: string
}

dayjs.extend(relativeTime)

const { owner, repository, class: className } = Astro.props

const response = await client.api.github['repo-info'][':owner'][
  ':repository'
].$get({ param: { owner, repository } })
const data = response.status === 200 ? await response.json() : null

if (!data) return

const updatedTime = dayjs(data.pushedAt).fromNow()
---

<!-- TODO: extract styles to a base card component -->
<Link
  target='_blank'
  href={data.url}
  class:list={[
    'not-prose flex gap-3 overflow-clip rounded-xl px-4 py-3.5',
    'bg-zinc-900 outline outline-zinc-800 hover:outline-2',
    'group relative transition-all',
    'max-md:flex-col-reverse',
    className
  ]}
>
  <span
    style='transition-duration: 800ms;'
    class:list={[
      'max-md:hidden',
      'absolute right-0 z-30 -mt-12 h-52 w-28 rotate-[24deg] bg-white opacity-[0.02]',
      'translate-x-32 transition-all ease-out',
      'group-hover:-translate-x-[520px]'
    ]}></span>
  <div class='flex-1 space-y-2 text-xs'>
    <p class='text-sm text-zinc-200'>
      {owner}/<strong class='font-medium'>{repository}</strong>
    </p>
    <p class='line-clamp-2 text-zinc-400'>
      {data.description}
    </p>
    <p class='pt-2.5 text-zinc-400/75'>Updated {updatedTime}</p>
  </div>
  <Github className='size-6 text-white md:size-8' />
</Link>

================
File: components/icons/ArrowOutward.tsx
================
import type { SVGProps } from 'react'

export function ArrowOutward(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='m16 8.4l-8.9 8.9q-.275.275-.7.275t-.7-.275t-.275-.7t.275-.7L14.6 7H7q-.425 0-.712-.288T6 6t.288-.712T7 5h10q.425 0 .713.288T18 6v10q0 .425-.288.713T17 17t-.712-.288T16 16z'
      ></path>
    </svg>
  )
}

================
File: components/icons/ArrowRight.tsx
================
import type { SVGProps } from 'react'

export function ArrowRight(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M16.175 13H5q-.425 0-.712-.288T4 12t.288-.712T5 11h11.175l-4.9-4.9q-.3-.3-.288-.7t.313-.7q.3-.275.7-.288t.7.288l6.6 6.6q.15.15.213.325t.062.375t-.062.375t-.213.325l-6.6 6.6q-.275.275-.687.275T11.3 19.3q-.3-.3-.3-.712t.3-.713z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Astro.tsx
================
import type { SVGProps } from 'react'

export function Astro(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M8.358 20.162c-1.186-1.07-1.532-3.316-1.038-4.944c.856 1.026 2.043 1.352 3.272 1.535c1.897.283 3.76.177 5.522-.678c.202-.098.388-.229.608-.36c.166.473.209.95.151 1.437c-.14 1.185-.738 2.1-1.688 2.794c-.38.277-.782.525-1.175.787c-1.205.804-1.531 1.747-1.078 3.119l.044.148a3.16 3.16 0 0 1-1.407-1.188a3.3 3.3 0 0 1-.544-1.815c-.004-.32-.004-.642-.048-.958c-.106-.769-.472-1.113-1.161-1.133c-.707-.02-1.267.411-1.415 1.09c-.012.053-.028.104-.045.165zm-5.961-4.445s3.24-1.575 6.49-1.575l2.451-7.565c.092-.366.36-.614.662-.614s.57.248.662.614l2.45 7.565c3.85 0 6.491 1.575 6.491 1.575L16.088.727C15.93.285 15.663 0 15.303 0H8.697c-.36 0-.615.285-.784.727z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Bookmarks.tsx
================
import type { SVGProps } from 'react'

export function Bookmarks(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M192 24H96a16 16 0 0 0-16 16v16H64a16 16 0 0 0-16 16v152a8 8 0 0 0 12.65 6.51L112 193.83l51.36 36.68A8 8 0 0 0 176 224v-39.31l19.35 13.82A8 8 0 0 0 208 192V40a16 16 0 0 0-16-16m-32 184.46l-43.36-31a8 8 0 0 0-9.3 0L64 208.45V72h96Zm32-32L176 165V72a16 16 0 0 0-16-16H96V40h96Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Briefcase.tsx
================
import type { SVGProps } from 'react'

export function Briefcase(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M216 56h-40v-8a24 24 0 0 0-24-24h-48a24 24 0 0 0-24 24v8H40a16 16 0 0 0-16 16v128a16 16 0 0 0 16 16h176a16 16 0 0 0 16-16V72a16 16 0 0 0-16-16M96 48a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v8H96Zm120 24v41.61A184 184 0 0 1 128 136a184.1 184.1 0 0 1-88-22.38V72Zm0 128H40v-68.36A200.2 200.2 0 0 0 128 152a200.25 200.25 0 0 0 88-20.37zm-112-88a8 8 0 0 1 8-8h32a8 8 0 0 1 0 16h-32a8 8 0 0 1-8-8'
      ></path>
    </svg>
  )
}

================
File: components/icons/ChatTeardrop.tsx
================
import type { SVGProps } from 'react'

export function ChatTeardropDots(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M132 24A100.11 100.11 0 0 0 32 124v84a16 16 0 0 0 16 16h84a100 100 0 0 0 0-200m0 184H48v-84a84 84 0 1 1 84 84m12-80a12 12 0 1 1-12-12a12 12 0 0 1 12 12m-44 0a12 12 0 1 1-12-12a12 12 0 0 1 12 12m88 0a12 12 0 1 1-12-12a12 12 0 0 1 12 12'
      ></path>
    </svg>
  )
}

================
File: components/icons/Codepen.tsx
================
import type { SVGProps } from 'react'

export function Codepen(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='m234.85 90.72l-104-56a6 6 0 0 0-5.68 0l-104 56A6 6 0 0 0 18 96v64a6 6 0 0 0 3.15 5.28l104 56a6 6 0 0 0 5.68 0l104-56A6 6 0 0 0 238 160V96a6 6 0 0 0-3.15-5.28M226 150l-40.77-22L226 106Zm-53.43-28.77L134 100.42V50l85.34 46Zm-44.57 24L96.08 128L128 110.81L159.92 128ZM122 50v50.38l-38.57 20.8L36.66 96Zm-92 56l40.77 22L30 150Zm53.43 28.76L122 155.58V206l-85.34-46ZM134 206v-50.42l38.57-20.77L219.34 160Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Construction.tsx
================
import type { SVGProps } from 'react'

export function Construction(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      fill='url(#grad1)'
      {...props}
    >
      <defs>
        <linearGradient id='grad1' x1='0%' y1='100%' x2='0%' y2='0%'>
          <stop offset='0%' style={{ stopColor: '#94a3b8', stopOpacity: 1 }} />
          <stop
            offset='100%'
            style={{ stopColor: '#f1f5f9', stopOpacity: 1 }}
          />
        </linearGradient>
      </defs>
      <path d='m17.85 19.95l-4.425-4.425l2.1-2.1l4.425 4.425q.425.425.425 1.05t-.425 1.05t-1.05.425t-1.05-.425m-13.8 0q-.425-.425-.425-1.05t.425-1.05L9.9 12l-1.7-1.7q-.275.275-.7.275t-.7-.275l-.575-.575v2.25q0 .35-.3.475t-.55-.125L2.65 9.6q-.25-.25-.125-.55T3 8.75h2.25L4.7 8.2q-.3-.3-.3-.7t.3-.7l2.85-2.85q.5-.5 1.075-.725T9.8 3q.5 0 .938.15t.862.45q.2.125.213.35t-.163.4l-1.9 1.9l.55.55q.275.275.275.7t-.275.7L12 9.9l2.25-2.25q-.1-.275-.162-.575t-.063-.6q0-1.475 1.013-2.488t2.487-1.012q.2 0 .375.013t.35.062q.225.075.288.313t-.113.412L16.8 5.4q-.15.15-.15.35t.15.35l1.1 1.1q.15.15.35.15t.35-.15l1.625-1.625q.175-.175.413-.125t.312.3q.05.175.063.35t.012.375q0 1.475-1.012 2.487t-2.488 1.013q-.3 0-.6-.05t-.575-.175l-10.2 10.2q-.425.425-1.05.425t-1.05-.425'></path>
    </svg>
  )
}

================
File: components/icons/Docker.tsx
================
import type { SVGProps } from 'react'

export function Docker(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M13.983 11.078h2.119a.186.186 0 0 0 .186-.185V9.006a.186.186 0 0 0-.186-.186h-2.119a.185.185 0 0 0-.185.185v1.888c0 .102.083.185.185.185m-2.954-5.43h2.118a.186.186 0 0 0 .186-.186V3.574a.186.186 0 0 0-.186-.185h-2.118a.185.185 0 0 0-.185.185v1.888c0 .102.082.185.185.185m0 2.716h2.118a.187.187 0 0 0 .186-.186V6.29a.186.186 0 0 0-.186-.185h-2.118a.185.185 0 0 0-.185.185v1.887c0 .102.082.185.185.186m-2.93 0h2.12a.186.186 0 0 0 .184-.186V6.29a.185.185 0 0 0-.185-.185H8.1a.185.185 0 0 0-.185.185v1.887c0 .102.083.185.185.186m-2.964 0h2.119a.186.186 0 0 0 .185-.186V6.29a.185.185 0 0 0-.185-.185H5.136a.186.186 0 0 0-.186.185v1.887c0 .102.084.185.186.186m5.893 2.715h2.118a.186.186 0 0 0 .186-.185V9.006a.186.186 0 0 0-.186-.186h-2.118a.185.185 0 0 0-.185.185v1.888c0 .102.082.185.185.185m-2.93 0h2.12a.185.185 0 0 0 .184-.185V9.006a.185.185 0 0 0-.184-.186h-2.12a.185.185 0 0 0-.184.185v1.888c0 .102.083.185.185.185m-2.964 0h2.119a.185.185 0 0 0 .185-.185V9.006a.185.185 0 0 0-.184-.186h-2.12a.186.186 0 0 0-.186.186v1.887c0 .102.084.185.186.185m-2.92 0h2.12a.185.185 0 0 0 .184-.185V9.006a.185.185 0 0 0-.184-.186h-2.12a.185.185 0 0 0-.184.185v1.888c0 .102.082.185.185.185M23.763 9.89c-.065-.051-.672-.51-1.954-.51q-.508.001-1.01.087c-.248-1.7-1.653-2.53-1.716-2.566l-.344-.199l-.226.327c-.284.438-.49.922-.612 1.43c-.23.97-.09 1.882.403 2.661c-.595.332-1.55.413-1.744.42H.751a.75.75 0 0 0-.75.748a11.4 11.4 0 0 0 .692 4.062c.545 1.428 1.355 2.48 2.41 3.124c1.18.723 3.1 1.137 5.275 1.137a15.7 15.7 0 0 0 2.93-.266a12.3 12.3 0 0 0 3.823-1.389a10.5 10.5 0 0 0 2.61-2.136c1.252-1.418 1.998-2.997 2.553-4.4h.221c1.372 0 2.215-.549 2.68-1.009c.309-.293.55-.65.707-1.046l.098-.288Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/DocuSign.astro
================
---
interface Props {
  class?: string | undefined;
}
---

<svg
  aria-hidden="true"
  xmlns="http://www.w3.org/2000/svg"
  width="1em"
  height="1em"
  viewBox="0 0 24 24"
  class={Astro.props.class}
>
  <path
    fill="currentColor"
    d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-2-13v10h4v-2h-2V7h-2zm6.65 2.15l-2.79 2.79-1.29-1.29-1.41 1.41 2.7 2.7 4.2-4.2-1.41-1.41z"
  />
</svg>

================
File: components/icons/DocuSign.tsx
================
import type { SVGProps } from 'react'

interface Props {
  class?: string;
}

const { class: className } = Astro.props;

export function DocuSign(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      class={className}
    >
      <path
        fill='currentColor'
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-2-13v10h4v-2h-2V7h-2zm6.65 2.15l-2.79 2.79-1.29-1.29-1.41 1.41 2.7 2.7 4.2-4.2-1.41-1.41z"
      />
    </svg>
  )
}

================
File: components/icons/Drizzle.tsx
================
import type { SVGProps } from 'react'

export function Drizzle(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M5.353 11.823a1.036 1.036 0 0 0-.395-1.422a1.063 1.063 0 0 0-1.437.399L.138 16.702a1.035 1.035 0 0 0 .395 1.422a1.063 1.063 0 0 0 1.437-.398zm11.216 0a1.036 1.036 0 0 0-.394-1.422a1.064 1.064 0 0 0-1.438.399l-3.382 5.902a1.036 1.036 0 0 0 .394 1.422c.506.283 1.15.104 1.438-.398zm7.293-4.525a1.036 1.036 0 0 0-.395-1.422a1.06 1.06 0 0 0-1.437.399l-3.383 5.902a1.036 1.036 0 0 0 .395 1.422a1.063 1.063 0 0 0 1.437-.399zm-11.219 0a1.035 1.035 0 0 0-.394-1.422a1.064 1.064 0 0 0-1.438.398l-3.382 5.903a1.036 1.036 0 0 0 .394 1.422c.506.282 1.15.104 1.438-.399z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Figma.tsx
================
import type { SVGProps } from 'react'

export function Figma(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M188.45 96A38 38 0 0 0 168 26H96a38 38 0 0 0-20.45 70A38 38 0 0 0 77 160.89A42 42 0 1 0 142 196v-40.32A38 38 0 1 0 188.45 96M194 64a26 26 0 0 1-26 26h-26V38h26a26 26 0 0 1 26 26M70 64a26 26 0 0 1 26-26h34v52H96a26 26 0 0 1-26-26m26 90a26 26 0 0 1 0-52h34v52zm34 42a30 30 0 1 1-30-30h30Zm38-42a26 26 0 1 1 26-26a26 26 0 0 1-26 26'
      ></path>
    </svg>
  )
}

================
File: components/icons/Flask.astro
================
import type { SVGProps } from 'react'

interface Props {
  class?: string | undefined;
}

const { class: className } = Astro.props;

export function Flask(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      class={className}
    >
      <path
        fill='currentColor'
        d="M15.5 6.5l3.5 7v0.8c0 2.6-2.2 4.7-4.9 4.7h-4.2c-2.6 0-4.9-2.1-4.9-4.7v-0.8l3.5-7h7zM13 2v2h-2v-2h2zM12 5c-0.2 0-0.4 0.1-0.5 0.2l-3.5 7.1v2c0 1.7 1.3 3 3 3h4c1.7 0 3-1.3 3-3v-2l-3.5-7.1c-0.1-0.1-0.3-0.2-0.5-0.2zM11.2 8h1.7l1.3 2h-4.3l1.3-2z"
      />
    </svg>
  )
}

================
File: components/icons/Github.tsx
================
import type { SVGProps } from 'react'

export function Github(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'
      ></path>
    </svg>
  )
}

================
File: components/icons/GithubOutline.tsx
================
import type { SVGProps } from 'react'

export function GithubOutline(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <g
        fill='none'
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='1.5'
        color='currentColor'
      >
        <path d='M10 20.568c-3.429 1.157-6.286 0-8-3.568'></path>
        <path d='M10 22v-3.242c0-.598.184-1.118.48-1.588c.204-.322.064-.78-.303-.88C7.134 15.452 5 14.107 5 9.645c0-1.16.38-2.25 1.048-3.2c.166-.236.25-.354.27-.46c.02-.108-.015-.247-.085-.527c-.283-1.136-.264-2.343.16-3.43c0 0 .877-.287 2.874.96c.456.285.684.428.885.46s.469-.035 1.005-.169A9.5 9.5 0 0 1 13.5 3a9.6 9.6 0 0 1 2.343.28c.536.134.805.2 1.006.169c.2-.032.428-.175.884-.46c1.997-1.247 2.874-.96 2.874-.96c.424 1.087.443 2.294.16 3.43c-.07.28-.104.42-.084.526s.103.225.269.461c.668.95 1.048 2.04 1.048 3.2c0 4.462-2.134 5.807-5.177 6.643c-.367.101-.507.559-.303.88c.296.47.48.99.48 1.589V22'></path>
      </g>
    </svg>
  )
}

================
File: components/icons/Globe.tsx
================
import type { SVGProps } from 'react'

export function Globe(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M128 24a104 104 0 1 0 104 104A104.12 104.12 0 0 0 128 24m88 104a87.6 87.6 0 0 1-3.33 24h-38.51a157.4 157.4 0 0 0 0-48h38.51a87.6 87.6 0 0 1 3.33 24m-114 40h52a115.1 115.1 0 0 1-26 45a115.3 115.3 0 0 1-26-45m-3.9-16a140.8 140.8 0 0 1 0-48h59.88a140.8 140.8 0 0 1 0 48ZM40 128a87.6 87.6 0 0 1 3.33-24h38.51a157.4 157.4 0 0 0 0 48H43.33A87.6 87.6 0 0 1 40 128m114-40h-52a115.1 115.1 0 0 1 26-45a115.3 115.3 0 0 1 26 45m52.33 0h-35.62a135.3 135.3 0 0 0-22.3-45.6A88.29 88.29 0 0 1 206.37 88Zm-98.74-45.6A135.3 135.3 0 0 0 85.29 88H49.63a88.29 88.29 0 0 1 57.96-45.6M49.63 168h35.66a135.3 135.3 0 0 0 22.3 45.6A88.29 88.29 0 0 1 49.63 168m98.78 45.6a135.3 135.3 0 0 0 22.3-45.6h35.66a88.29 88.29 0 0 1-57.96 45.6'
      ></path>
    </svg>
  )
}

================
File: components/icons/HandPalm.tsx
================
import type { SVGProps } from 'react'

export function HandPalm(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M188 88a27.75 27.75 0 0 0-12 2.71V60a28 28 0 0 0-41.36-24.6A28 28 0 0 0 80 44v6.71A27.75 27.75 0 0 0 68 48a28 28 0 0 0-28 28v76a88 88 0 0 0 176 0v-36a28 28 0 0 0-28-28m12 64a72 72 0 0 1-144 0V76a12 12 0 0 1 24 0v44a8 8 0 0 0 16 0V44a12 12 0 0 1 24 0v68a8 8 0 0 0 16 0V60a12 12 0 0 1 24 0v68.67A48.08 48.08 0 0 0 120 176a8 8 0 0 0 16 0a32 32 0 0 1 32-32a8 8 0 0 0 8-8v-20a12 12 0 0 1 24 0Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/HandWaving.tsx
================
import type { SVGProps } from 'react'

export function HandWaving(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='m220.17 100l-17.31-30a28 28 0 0 0-38.24-10.25a27.7 27.7 0 0 0-9 8.34L138.2 38a28 28 0 0 0-48.48 0a28 28 0 0 0-41.57 36l1.59 2.76A27.7 27.7 0 0 0 38 80.41a28 28 0 0 0-10.24 38.25l40 69.32a87.47 87.47 0 0 0 53.43 41a88.6 88.6 0 0 0 22.92 3a88 88 0 0 0 76.06-132Zm-6.66 62.64A72 72 0 0 1 81.62 180l-40-69.32a12 12 0 0 1 20.78-12L81.63 132a8 8 0 1 0 13.85-8L62 66a12 12 0 1 1 20.78-12L114 108a8 8 0 1 0 13.85-8l-24.28-42a12 12 0 1 1 20.78-12l33.42 57.9a48 48 0 0 0-5.54 60.6a8 8 0 0 0 13.24-9a32 32 0 0 1 7.31-43.5a8 8 0 0 0 2.13-10.4L168.23 90A12 12 0 1 1 189 78l17.31 30a71.56 71.56 0 0 1 7.2 54.62ZM184.25 31.71A8 8 0 0 1 194 26a59.62 59.62 0 0 1 36.53 28l.33.57a8 8 0 1 1-13.85 8l-.33-.57a43.67 43.67 0 0 0-26.8-20.5a8 8 0 0 1-5.63-9.79M80.89 237a8 8 0 0 1-11.23 1.33A119.6 119.6 0 0 1 40.06 204a8 8 0 0 1 13.86-8a103.7 103.7 0 0 0 25.64 29.72A8 8 0 0 1 80.89 237'
      ></path>
    </svg>
  )
}

================
File: components/icons/Hono.tsx
================
import type { SVGProps } from 'react'

export function Hono(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M12.445.002a45.5 45.5 0 0 0-5.252 8.146a9 9 0 0 1-.555-.53a28 28 0 0 0-1.205-1.542a8.8 8.8 0 0 0-1.251 2.12a20.7 20.7 0 0 0-1.448 5.88a8.9 8.9 0 0 0 .338 3.468q1.968 5.22 7.445 6.337q4.583.657 8.097-2.312q4.015-3.885 2.047-9.132a33.3 33.3 0 0 0-2.988-5.59A91 91 0 0 0 12.615.053a.22.22 0 0 0-.17-.051m-.336 3.906a51 51 0 0 1 4.794 6.552q.672 1.15 1.108 2.41q.91 3.579-1.951 5.904q-2.768 1.947-6.072 1.156q-3.564-1.105-4.121-4.794a5.1 5.1 0 0 1 .242-2.266q.536-1.361 1.3-2.601l1.446-2.121a397 397 0 0 0 3.254-4.24'
      ></path>
    </svg>
  )
}

================
File: components/icons/Info.tsx
================
import type { SVGProps } from 'react'

export function Info(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <g fill='currentColor'>
        <path
          d='M224 128a96 96 0 1 1-96-96a96 96 0 0 1 96 96'
          opacity='.2'
        ></path>
        <path d='M144 176a8 8 0 0 1-8 8a16 16 0 0 1-16-16v-40a8 8 0 0 1 0-16a16 16 0 0 1 16 16v40a8 8 0 0 1 8 8m88-48A104 104 0 1 1 128 24a104.11 104.11 0 0 1 104 104m-16 0a88 88 0 1 0-88 88a88.1 88.1 0 0 0 88-88m-92-32a12 12 0 1 0-12-12a12 12 0 0 0 12 12'></path>
      </g>
    </svg>
  )
}

================
File: components/icons/Jest.tsx
================
import type { SVGProps } from 'react'

export function Jest(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M22.251 11.82a3.12 3.12 0 0 0-2.328-3.01L22.911 0H8.104L11.1 8.838a3.12 3.12 0 0 0-2.244 2.988a3.12 3.12 0 0 0 1.313 2.536a8.3 8.3 0 0 1-1.084 1.244a8.1 8.1 0 0 1-2.55 1.647c-.834-.563-1.195-1.556-.869-2.446a3.11 3.11 0 0 0-.91-6.08a3.117 3.117 0 0 0-3.113 3.113c0 .848.347 1.626.903 2.182q-.072.144-.146.299c-.465.959-.993 2.043-1.195 3.259c-.403 2.432.257 4.384 1.849 5.489A5.1 5.1 0 0 0 5.999 24c1.827 0 3.682-.917 5.475-1.807c1.279-.632 2.599-1.292 3.898-1.612c.48-.118.98-.187 1.508-.264c1.07-.153 2.175-.312 3.168-.89a4.48 4.48 0 0 0 2.182-3.091c.174-.994 0-1.994-.444-2.87c.298-.48.465-1.042.465-1.647zm-1.355 0c0 .965-.785 1.75-1.75 1.75a1.753 1.753 0 0 1-1.085-3.126l.007-.007q.085-.063.18-.125s.008 0 .008-.007c.028-.014.055-.035.083-.05c.007 0 .014-.006.021-.006q.044-.021.097-.042q.054-.02.098-.041c.007 0 .013-.007.02-.007c.028-.007.056-.021.084-.028c.007 0 .02-.007.028-.007c.034-.007.062-.014.097-.02h.007l.104-.022c.007 0 .02 0 .028-.007c.028 0 .055-.007.083-.007h.035c.035 0 .07-.007.111-.007h.09c.028 0 .05 0 .077.007h.014q.083.009.167.028a1.766 1.766 0 0 1 1.396 1.723zM10.043 1.39h10.93l-2.509 7.4c-.104.02-.208.055-.312.09l-2.64-5.385l-2.648 5.35c-.104-.034-.216-.055-.327-.076zm4.968 9.825a3.1 3.1 0 0 0-.938-1.668l1.438-2.904l1.452 2.967c-.43.43-.743.98-.868 1.605zm-3.481-1.098c.034-.007.062-.014.097-.02h.02c.029-.008.056-.008.084-.015h.028c.028 0 .049-.007.076-.007h.271c.028 0 .049.007.07.007c.014 0 .02 0 .035.007c.027.007.048.007.076.014q.009-.002.028.007l.097.02h.007q.042.01.083.029c.007 0 .014.007.028.007c.021.007.049.014.07.027c.007 0 .014.007.02.007c.028.014.056.021.084.035h.007a.4.4 0 0 1 .09.049h.007c.028.014.056.034.084.048c.007 0 .007.007.013.007c.028.014.05.035.077.049l.007.007c.083.062.16.132.236.201l.007.007a1.75 1.75 0 0 1 .48 1.209a1.752 1.752 0 0 1-3.502 0a1.74 1.74 0 0 1 1.32-1.695m-6.838-.049c.966 0 1.751.786 1.751 1.751s-.785 1.751-1.75 1.751s-1.752-.785-1.752-1.75s.786-1.752 1.751-1.752m16.163 6.025a3.07 3.07 0 0 1-1.508 2.133c-.758.438-1.689.577-2.669.716a17 17 0 0 0-1.64.291c-1.445.355-2.834 1.05-4.182 1.717c-1.724.854-3.35 1.66-4.857 1.66a3.65 3.65 0 0 1-2.154-.688c-1.529-1.056-1.453-3.036-1.272-4.12c.167-1.015.632-1.966 1.077-2.877c.028-.055.049-.104.077-.16q.228.084.479.126c-.264 1.473.486 2.994 1.946 3.745l.264.139l.284-.104c1.216-.431 2.342-1.133 3.336-2.071a9.3 9.3 0 0 0 1.445-1.716c.16.027.32.034.48.034a3.12 3.12 0 0 0 3.008-2.327h1.167a3.11 3.11 0 0 0 3.01 2.327c.576 0 1.11-.16 1.57-.43c.18.52.236 1.063.139 1.605'
      ></path>
    </svg>
  )
}

================
File: components/icons/LinkedIn.tsx
================
import type { SVGProps } from 'react'

export function LinkedIn(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='none'
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='1.5'
        d='M4.5 9.5H4c-.943 0-1.414 0-1.707.293S2 10.557 2 11.5V20c0 .943 0 1.414.293 1.707S3.057 22 4 22h.5c.943 0 1.414 0 1.707-.293S6.5 20.943 6.5 20v-8.5c0-.943 0-1.414-.293-1.707S5.443 9.5 4.5 9.5m2-5.25a2.25 2.25 0 1 1-4.5 0a2.25 2.25 0 0 1 4.5 0m5.826 5.25H11.5c-.943 0-1.414 0-1.707.293S9.5 10.557 9.5 11.5V20c0 .943 0 1.414.293 1.707S10.557 22 11.5 22h.5c.943 0 1.414 0 1.707-.293S14 20.943 14 20v-3.5c0-1.657.528-3 2.088-3c.78 0 1.412.672 1.412 1.5v4.5c0 .943 0 1.414.293 1.707s.764.293 1.707.293h.499c.942 0 1.414 0 1.707-.293c.292-.293.293-.764.293-1.706L22 14c0-2.486-2.364-4.5-4.703-4.5c-1.332 0-2.52.652-3.297 1.673c0-.63 0-.945-.137-1.179a1 1 0 0 0-.358-.358c-.234-.137-.549-.137-1.179-.137'
        color='currentColor'
      ></path>
    </svg>
  )
}

================
File: components/icons/Location.tsx
================
import type { SVGProps } from 'react'

export function Location(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M128 16a88.1 88.1 0 0 0-88 88c0 75.3 80 132.17 83.41 134.55a8 8 0 0 0 9.18 0C136 236.17 216 179.3 216 104a88.1 88.1 0 0 0-88-88m0 56a32 32 0 1 1-32 32a32 32 0 0 1 32-32'
      ></path>
    </svg>
  )
}

================
File: components/icons/Mail.tsx
================
import type { SVGProps } from 'react'

export function Mail(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <g
        fill='none'
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='1.5'
        color='currentColor'
      >
        <path d='m2 6l6.913 3.917c2.549 1.444 3.625 1.444 6.174 0L22 6'></path>
        <path d='M2.016 13.476c.065 3.065.098 4.598 1.229 5.733c1.131 1.136 2.705 1.175 5.854 1.254c1.94.05 3.862.05 5.802 0c3.149-.079 4.723-.118 5.854-1.254c1.131-1.135 1.164-2.668 1.23-5.733c.02-.986.02-1.966 0-2.952c-.066-3.065-.099-4.598-1.23-5.733c-1.131-1.136-2.705-1.175-5.854-1.254a115 115 0 0 0-5.802 0c-3.149.079-4.723.118-5.854 1.254c-1.131 1.135-1.164 2.668-1.23 5.733a69 69 0 0 0 0 2.952'></path>
      </g>
    </svg>
  )
}

================
File: components/icons/Minus.tsx
================
import type { SVGProps } from 'react'

export function Minus(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='12'
        fill='currentColor'
        d='M228 128a12 12 0 0 1-12 12H40a12 12 0 0 1 0-24h176a12 12 0 0 1 12 12'
      ></path>
    </svg>
  )
}

================
File: components/icons/Monkeytype.tsx
================
import type { SVGProps } from 'react'

export function Monkeytype(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M20 14.4a.8.8 0 1 1 0 1.6a.8.8 0 0 1 0-1.6m-11.2 0h4.8a.8.8 0 1 1 0 1.6H8.8a.8.8 0 1 1 0-1.6M7.2 9.6a.8.8 0 0 1 .8.8V12a.8.8 0 1 1-1.6 0v-1.6a.8.8 0 0 1 .8-.8m-3.999.759A2.4 2.4 0 0 1 7.2 8.612a2.4 2.4 0 0 1 4 1.788V12a.8.8 0 1 1-1.6 0v-1.6a.8.8 0 1 0-1.6 0V12a.8.8 0 1 1-1.6 0v-1.6a.8.8 0 1 0-1.6 0V12a.8.8 0 1 1-1.6 0v-1.6zM17.6 12.8v2.4a.8.8 0 1 1-1.6 0v-2.4h-2.306c-.493 0-.894-.358-.894-.8s.401-.8.894-.8h6.212c.493 0 .894.358.894.8s-.401.8-.894.8zM16.8 8H20a.8.8 0 1 1 0 1.6h-3.2a.8.8 0 1 1 0-1.6M4 14.4h1.6a.8.8 0 1 1 0 1.6H4a.8.8 0 1 1 0-1.6M13.2 8h.4a.8.8 0 1 1 0 1.6h-.4a.8.8 0 1 1 0-1.6M1.6 14.4H0V8.8c0-2.208 1.792-4 4-4h16c2.208 0 4 1.792 4 4v6.4c0 2.208-1.792 4-4 4H4c-2.208 0-4-1.792-4-4v-1.6h1.6v1.6A2.4 2.4 0 0 0 4 17.6h16a2.4 2.4 0 0 0 2.4-2.4V8.8A2.4 2.4 0 0 0 20 6.4H4a2.4 2.4 0 0 0-2.4 2.4z'
      ></path>
    </svg>
  )
}

================
File: components/icons/NestJs.tsx
================
import type { SVGProps } from 'react'

export function Nestjs(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M14.131.047c-.173 0-.334.037-.483.087c.316.21.49.49.576.806c.007.043.019.074.025.117a1 1 0 0 1 .013.112c.024.545-.143.614-.26.936c-.18.415-.13.861.086 1.22a.7.7 0 0 0 .074.137c-.235-1.568 1.073-1.803 1.314-2.293c.019-.428-.334-.713-.613-.911a1.37 1.37 0 0 0-.732-.21zM16.102.4c-.024.143-.006.106-.012.18c-.006.05-.006.112-.012.161c-.013.05-.025.1-.044.149q-.019.075-.05.149l-.067.142c-.02.025-.031.05-.05.075l-.037.055a2 2 0 0 1-.093.124c-.037.038-.068.081-.112.112v.006c-.037.031-.074.068-.118.1c-.13.099-.278.173-.415.266c-.043.03-.087.056-.124.093a1 1 0 0 0-.118.099c-.043.037-.074.074-.111.118c-.031.037-.068.08-.093.124a2 2 0 0 0-.087.13c-.025.05-.043.093-.068.142c-.019.05-.037.093-.05.143a2 2 0 0 0-.043.155c-.006.025-.006.056-.012.08c-.007.025-.007.05-.013.075c0 .05-.006.105-.006.155q-.002.055.006.111q0 .074.019.155q.01.075.03.15c.02.049.032.098.05.148c.013.03.031.062.044.087l-1.426-.552c-.241-.068-.477-.13-.719-.186l-.39-.093q-.56-.111-1.128-.167c-.013 0-.019-.006-.031-.006A11 11 0 0 0 8.9 2.855c-.378.025-.756.074-1.134.136a13 13 0 0 0-.837.174l-.279.074c-.092.037-.18.08-.266.118l-.205.093c-.012.006-.024.006-.03.012c-.063.031-.118.056-.174.087a3 3 0 0 0-.236.118c-.043.018-.086.043-.124.062l-.055.03q-.085.048-.162.094a2 2 0 0 0-.148.093c-.044.03-.087.055-.124.086c-.006.007-.013.007-.019.013c-.037.025-.08.056-.118.087l-.012.012l-.093.074c-.012.007-.025.019-.037.025c-.031.025-.062.056-.093.08c-.006.013-.019.02-.025.025c-.037.038-.074.069-.111.106c-.007 0-.007.006-.013.012a2 2 0 0 0-.111.106c-.007.006-.007.012-.013.012a2 2 0 0 0-.093.1c-.012.012-.03.024-.043.036a1 1 0 0 1-.106.112c-.006.012-.018.019-.024.03c-.05.05-.093.1-.143.15l-.018.018c-.1.106-.205.211-.317.304q-.168.15-.347.273a3.8 3.8 0 0 1-.762.421c-.13.056-.267.106-.403.149c-.26.056-.527.161-.756.18c-.05 0-.105.012-.155.018l-.155.037l-.149.056q-.075.03-.148.068c-.044.031-.093.056-.137.087a1 1 0 0 0-.124.106c-.043.03-.087.074-.124.111c-.037.043-.074.08-.105.124c-.031.05-.068.093-.093.143a1 1 0 0 0-.087.142c-.025.056-.05.106-.068.161q-.028.077-.056.161c-.012.05-.025.1-.03.15c0 .005-.007.012-.007.018c-.012.056-.012.13-.019.167C.006 7.95 0 7.986 0 8.03a.66.66 0 0 0 .074.31v.006q.03.056.069.112q.035.056.08.111c.031.031.068.069.106.1a1 1 0 0 0 .117.099c.149.13.186.173.378.272c.031.019.062.031.1.05c.006 0 .012.006.018.006c0 .013 0 .019.006.031a1.3 1.3 0 0 0 .08.298c.02.037.032.074.05.111q.01.02.02.031c.024.05.049.093.073.137l.093.13c.031.037.069.08.106.118s.074.068.118.105c0 0 .006.006.012.006q.055.048.112.087a1 1 0 0 0 .136.08c.043.025.093.05.142.069a1 1 0 0 0 .124.043c.007.006.013.006.025.012c.025.007.056.013.08.019c-.018.335-.024.65.026.762c.055.124.328-.254.6-.688c-.036.428-.061.93 0 1.079c.069.155.44-.329.763-.862c4.395-1.016 8.405 2.02 8.826 6.31c-.08-.67-.905-1.041-1.283-.948c-.186.458-.502 1.047-1.01 1.413c.043-.41.025-.83-.062-1.24a4 4 0 0 1-.769 1.562c-.588.043-1.177-.242-1.487-.67c-.025-.018-.031-.055-.05-.08q-.029-.065-.05-.13a.5.5 0 0 1-.037-.13q-.008-.064-.006-.137v-.093a1 1 0 0 1 .031-.13q.017-.064.044-.13c.024-.043.043-.087.074-.13c.105-.298.105-.54-.087-.682a1 1 0 0 0-.118-.062c-.024-.006-.055-.018-.08-.025l-.05-.018a1 1 0 0 0-.13-.031a.5.5 0 0 0-.13-.019a1 1 0 0 0-.136-.012c-.031 0-.062.006-.093.006a.5.5 0 0 0-.137.019q-.064.008-.13.024a1 1 0 0 0-.13.044c-.043.018-.08.037-.124.056c-.037.018-.074.043-.118.062c-1.444.942-.582 3.148.403 3.787c-.372.068-.75.148-.855.229l-.013.012q.4.24.837.416c.397.13.818.247 1.004.297v.006a6 6 0 0 0 1.562.112c2.746-.192 4.996-2.281 5.405-5.033l.037.161c.019.112.043.23.056.347v.006q.016.085.025.162v.024q.01.085.012.162q.01.102.012.204v.1c0 .03.007.067.007.098c0 .038-.007.075-.007.112v.087c0 .043-.006.08-.006.124q.002.036-.006.08c0 .044-.006.087-.006.137q-.007.027-.006.055l-.02.143q.001.028-.005.056c-.007.062-.019.118-.025.18v.012l-.037.174v.018l-.037.167c0 .007-.007.02-.007.025a2 2 0 0 1-.043.168v.018q-.03.091-.05.174q-.008.01-.006.012l-.056.186c-.024.062-.043.118-.068.18s-.043.124-.068.18c-.025.062-.05.117-.074.18h-.007c-.024.055-.05.117-.08.173l-.019.043c-.006.006-.006.013-.012.019a5.9 5.9 0 0 1-1.742 2.082c-.05.031-.099.069-.149.106c-.012.012-.03.018-.043.03a3 3 0 0 1-.136.094l.018.037h.007l.26-.037h.006q.241-.039.483-.087c.044-.006.093-.019.137-.031l.087-.019c.043-.006.086-.018.13-.024c.037-.013.074-.02.111-.031c.62-.15 1.221-.354 1.798-.595a9.9 9.9 0 0 1-3.85 3.142c.714-.05 1.426-.167 2.114-.366a9.9 9.9 0 0 0 5.857-4.68a9.9 9.9 0 0 1-1.667 3.986a9.8 9.8 0 0 0 1.655-1.376a9.8 9.8 0 0 0 2.61-5.268c.21.98.272 1.99.18 2.987c4.474-6.241.371-12.712-1.346-14.416c-.006-.013-.012-.019-.012-.031c-.006.006-.006.006-.006.012c0-.006 0-.006-.007-.012q-.002.11-.012.223a8 8 0 0 1-.062.415c-.03.136-.068.273-.105.41c-.044.13-.093.266-.15.396a5 5 0 0 1-.185.378a5 5 0 0 1-.477.688c-.093.111-.192.21-.292.31a4 4 0 0 1-.18.155l-.142.124a4 4 0 0 1-.347.241a4 4 0 0 1-.366.211q-.195.091-.39.174a4.4 4.4 0 0 1-.818.223c-.143.025-.285.037-.422.05a5 5 0 0 1-.297.012a5 5 0 0 1-.422-.025a3 3 0 0 1-.421-.062a3 3 0 0 1-.415-.105h-.007c.137-.013.273-.025.41-.05a4.5 4.5 0 0 0 .818-.223c.136-.05.266-.112.39-.174c.13-.062.248-.13.372-.204q.178-.119.347-.248q.168-.13.316-.279c.105-.093.198-.198.291-.304q.14-.167.26-.334c.013-.019.026-.044.038-.062q.095-.15.18-.298a4.3 4.3 0 0 0 .334-.775c.044-.13.075-.266.106-.403c.025-.142.05-.278.062-.415c.012-.142.025-.285.025-.421c0-.1-.007-.199-.013-.298a7 7 0 0 0-.05-.415a5 5 0 0 0-.092-.415c-.044-.13-.087-.267-.137-.397s-.111-.26-.173-.384q-.102-.187-.211-.366a7 7 0 0 0-.248-.34q-.138-.16-.285-.317a4 4 0 0 0-.161-.155q-.422-.327-.862-.607a1 1 0 0 0-.124-.062a2.4 2.4 0 0 0-.589-.26Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/NextJs.tsx
================
import type { SVGProps } from 'react'

export function NextJs(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M18.665 21.978A11.94 11.94 0 0 1 12 24C5.377 24 0 18.623 0 12S5.377 0 12 0s12 5.377 12 12c0 3.583-1.574 6.801-4.067 9.001L9.219 7.2H7.2v9.596h1.615V9.251zm-3.332-8.533l1.6 2.061V7.2h-1.6z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Notion.tsx
================
import type { SVGProps } from 'react'

export function Notion(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M4.459 4.208c.746.606 1.026.56 2.428.466l13.215-.793c.28 0 .047-.28-.046-.326L17.86 1.968c-.42-.326-.981-.7-2.055-.607L3.01 2.295c-.466.046-.56.28-.374.466zm.793 3.08v13.904c0 .747.373 1.027 1.214.98l14.523-.84c.841-.046.935-.56.935-1.167V6.354c0-.606-.233-.933-.748-.887l-15.177.887c-.56.047-.747.327-.747.933zm14.337.745c.093.42 0 .84-.42.888l-.7.14v10.264c-.608.327-1.168.514-1.635.514c-.748 0-.935-.234-1.495-.933l-4.577-7.186v6.952L12.21 19s0 .84-1.168.84l-3.222.186c-.093-.186 0-.653.327-.746l.84-.233V9.854L7.822 9.76c-.094-.42.14-1.026.793-1.073l3.456-.233l4.764 7.279v-6.44l-1.215-.139c-.093-.514.28-.887.747-.933zM1.936 1.035l13.31-.98c1.634-.14 2.055-.047 3.082.7l4.249 2.986c.7.513.934.653.934 1.213v16.378c0 1.026-.373 1.634-1.68 1.726l-15.458.934c-.98.047-1.448-.093-1.962-.747l-3.129-4.06c-.56-.747-.793-1.306-.793-1.96V2.667c0-.839.374-1.54 1.447-1.632'
      ></path>
    </svg>
  )
}

================
File: components/icons/NuxtJs.tsx
================
import type { SVGProps } from 'react'

export function Nuxtjs(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M13.464 19.83h8.922c.283 0 .562-.073.807-.21a1.6 1.6 0 0 0 .591-.574a1.53 1.53 0 0 0 .216-.783a1.53 1.53 0 0 0-.217-.782L17.792 7.414a1.6 1.6 0 0 0-.591-.573a1.65 1.65 0 0 0-.807-.21c-.283 0-.562.073-.807.21a1.6 1.6 0 0 0-.59.573L13.463 9.99L10.47 4.953a1.6 1.6 0 0 0-.591-.573a1.65 1.65 0 0 0-.807-.21c-.284 0-.562.073-.807.21a1.6 1.6 0 0 0-.591.573L.216 17.481a1.53 1.53 0 0 0-.217.782c0 .275.074.545.216.783a1.6 1.6 0 0 0 .59.574c.246.137.525.21.808.21h5.6c2.22 0 3.856-.946 4.982-2.79l2.733-4.593l1.464-2.457l4.395 7.382h-5.859Zm-6.341-2.46l-3.908-.002l5.858-9.842l2.923 4.921l-1.957 3.29c-.748 1.196-1.597 1.632-2.916 1.632'
      ></path>
    </svg>
  )
}

================
File: components/icons/Pencil.tsx
================
import type { SVGProps } from 'react'

export function Pencil(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='m227.32 73.37l-44.69-44.68a16 16 0 0 0-22.63 0L36.69 152A15.86 15.86 0 0 0 32 163.31V208a16 16 0 0 0 16 16h168a8 8 0 0 0 0-16H115.32l112-112a16 16 0 0 0 0-22.63M192 108.69L147.32 64l24-24L216 84.69Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Play.tsx
================
import type { SVGProps } from 'react'

export function Play(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M240 128a15.74 15.74 0 0 1-7.6 13.51L88.32 229.65a16 16 0 0 1-16.2.3A15.86 15.86 0 0 1 64 216.13V39.87a15.86 15.86 0 0 1 8.12-13.82a16 16 0 0 1 16.2.3l144.08 88.14A15.74 15.74 0 0 1 240 128'
      ></path>
    </svg>
  )
}

================
File: components/icons/Plus.tsx
================
import type { SVGProps } from 'react'

export function Plus(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='12'
        fill='currentColor'
        d='M228 128a12 12 0 0 1-12 12h-76v76a12 12 0 0 1-24 0v-76H40a12 12 0 0 1 0-24h76V40a12 12 0 0 1 24 0v76h76a12 12 0 0 1 12 12'
      ></path>
    </svg>
  )
}

================
File: components/icons/Prisma.tsx
================
import type { SVGProps } from 'react'

export function Prisma(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M21.807 18.285L13.553.757a1.32 1.32 0 0 0-1.129-.755a1.31 1.31 0 0 0-1.206.626l-8.952 14.5a1.36 1.36 0 0 0 .016 1.455l4.376 6.778a1.41 1.41 0 0 0 1.58.581l12.703-3.757c.389-.115.707-.39.873-.755s.164-.783-.007-1.145m-1.848.752L9.18 22.224a.452.452 0 0 1-.575-.52l3.85-18.438c.072-.345.549-.4.699-.08l7.129 15.138a.515.515 0 0 1-.325.713'
      ></path>
    </svg>
  )
}

================
File: components/icons/Puppeteer.tsx
================
import type { SVGProps } from 'react'

export function Puppeteer(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M17.89 17.86h.397v.174h.028a.466.466 0 0 1 .619-.155l-.11.373a.36.36 0 0 0-.184-.043a.29.29 0 0 0-.243.11a.47.47 0 0 0-.082.29v.635h-.424zm-.26 1.048a.8.8 0 0 1-.27.28a.74.74 0 0 1-.398.101a.8.8 0 0 1-.3-.054a.8.8 0 0 1-.237-.155a.7.7 0 0 1-.214-.529q0-.15.056-.282a.7.7 0 0 1 .156-.235a.73.73 0 0 1 .529-.22a.75.75 0 0 1 .302.056a.64.64 0 0 1 .353.384a.85.85 0 0 1 .037.402h-1.02q.03.135.127.198a.4.4 0 0 0 .214.062a.35.35 0 0 0 .32-.18zm-.376-.54a.2.2 0 0 0-.03-.074a.2.2 0 0 0-.058-.07a.3.3 0 0 0-.093-.054a.325.325 0 0 0-.43.198zm-1.242.54a.8.8 0 0 1-.27.28a.74.74 0 0 1-.397.101a.8.8 0 0 1-.3-.054a.8.8 0 0 1-.237-.155a.7.7 0 0 1-.215-.529q0-.15.057-.282a.7.7 0 0 1 .155-.235a.73.73 0 0 1 .529-.22q.172 0 .302.056a.64.64 0 0 1 .353.384a.85.85 0 0 1 .037.402h-1.02q.03.135.127.198a.4.4 0 0 0 .215.062a.35.35 0 0 0 .32-.18zm-.376-.54a.2.2 0 0 0-.028-.074a.2.2 0 0 0-.06-.07a.3.3 0 0 0-.093-.054a.325.325 0 0 0-.43.198zm-1.918-.144l-.243-.004l.004-.388l.25.012l-.007-.41l.412.004l-.016.39l.367.02l-.012.355l-.365.008l.013.47c-.012.092.022.145.027.194c.08.1.137.068.137.068c.02-.008.162-.027.177-.038l.04.388c-.138.082-.377.036-.377.036c-.253-.037-.383-.217-.384-.293c-.025-.068-.018-.21-.029-.29zm-.412.717c-.037.126-.172.218-.283.285a.77.77 0 0 1-.406.11a1 1 0 0 1-.32-.077c-.09-.038-.165-.113-.233-.18c-.068-.065-.093-.142-.131-.23a.8.8 0 0 1-.045-.31c-.015-.194.126-.378.212-.505c.28-.238.49-.22.49-.22c.387-.075.696.288.718.437c.03.086.022.18.022.28c-.005.054 0 .05-.031.125h-1.037c.02.09.063.192.104.24c.048.06.128.06.207.06s.163.002.214-.032c.053-.034.172-.072.203-.125zm-.37-.558a.4.4 0 0 0-.04-.097c-.014-.026-.05-.046-.076-.066c-.024-.023-.071-.037-.109-.05a.3.3 0 0 0-.121-.023a.27.27 0 0 0-.168.053c-.057.037-.097.12-.123.19zm-2.34-.372h.028a.4.4 0 0 1 .147-.138a.5.5 0 0 1 .254-.06a.62.62 0 0 1 .467.207a.7.7 0 0 1 .147.232q.053.135.053.3a.8.8 0 0 1-.053.3a.7.7 0 0 1-.147.234a.65.65 0 0 1-.467.203a.5.5 0 0 1-.254-.056a.4.4 0 0 1-.147-.142h-.028l.028.198v.565H10.2V17.86h.396zm.336.198a.34.34 0 0 0-.31.201a.4.4 0 0 0-.026.141q0 .08.025.145a.4.4 0 0 0 .074.107q.048.041.107.068a.38.38 0 0 0 .257 0a.4.4 0 0 0 .108-.068a.3.3 0 0 0 .073-.107a.4.4 0 0 0 .028-.145a.34.34 0 0 0-.336-.342m-2.026-.198h.03a.4.4 0 0 1 .146-.138a.5.5 0 0 1 .254-.06a.62.62 0 0 1 .466.207a.7.7 0 0 1 .147.232q.054.135.054.3a.8.8 0 0 1-.054.3a.7.7 0 0 1-.147.234a.65.65 0 0 1-.466.203a.5.5 0 0 1-.254-.056a.4.4 0 0 1-.147-.142h-.029l.03.198v.565H8.51V17.86h.395zm.337.198a.34.34 0 0 0-.31.201a.4.4 0 0 0-.027.141q.001.08.026.145a.4.4 0 0 0 .073.107q.048.041.108.068a.38.38 0 0 0 .257 0a.4.4 0 0 0 .107-.068a.3.3 0 0 0 .074-.107a.4.4 0 0 0 .028-.145a.34.34 0 0 0-.21-.316a.3.3 0 0 0-.126-.026m-1.433.86h-.028a.47.47 0 0 1-.424.22q-.261 0-.387-.167a.7.7 0 0 1-.128-.438v-.825h.424v.777q0 .114.054.187q.053.07.167.07a.25.25 0 0 0 .217-.11a.5.5 0 0 0 .077-.288v-.636h.424v1.385H7.81zm-2.594.175V17.22h.724a.8.8 0 0 1 .285.048a.7.7 0 0 1 .23.136a.6.6 0 0 1 .15.206a.7.7 0 0 1 .053.27a.7.7 0 0 1-.054.267a.62.62 0 0 1-.379.342a.8.8 0 0 1-.285.048h-.283v.707zm.738-1.125q.137 0 .206-.068a.23.23 0 0 0 .068-.172a.23.23 0 0 0-.068-.173q-.068-.068-.206-.068h-.297v.48zM18.04 2.758l-.594.05l.236 2.932l.626.363zm-12.016.01L5.728 6.01l.624-.3l.266-2.89zm-.49 5.183l-.044.557l-1.247 3.137c-.216.224-.308.514-.307.825L3.93 22.84c0 .669.49 1.16 1.158 1.16H18.82c.67 0 1.25-.444 1.25-1.11V12.485c0-.306-.1-.56-.286-.774L18.44 7.748l-.006-.068l-.575.257l.267 3.33H5.846l.237-2.615l.226-.588L6.143 8l.002-.03zm13.112 2.34l.323.987c-.088-.014-.158-.006-.245-.01zm-13.316.232l-.084.744c-.058-.005-.12.005-.172.007zm-.18 1.134l13.67.008c.47 0 .853.344.853.815v.796H4.313v-.796c0-.47.364-.823.837-.823m.135.553a.27.27 0 0 0-.272.27c0 .36.542.36.542 0a.27.27 0 0 0-.27-.27m.92 0c-.36 0-.36.54 0 .54s.362-.54.002-.54zm.896 0c-.39-.034-.39.572 0 .538c.33-.028.33-.51 0-.538m-2.788 1.424h15.36v9.153c0 .595-.38.846-.853.845l-13.668-.004a.83.83 0 0 1-.84-.841zm1.883 4.42c.07-.117.07-.11.068-.186c-.008-.073-.004-.076-.053-.135c-.054-.054-.123-.138-.2-.134h-.387l-.02.55h.407c.122-.002.16-.084.185-.094zm-.185-.83a.58.58 0 0 1 .442.171q.165.176.164.465a.65.65 0 0 1-.16.462c-.117.12-.263.21-.43.203l-.4.008l-.004.774l-.412-.013l-.005-2.088zm1.793 1.26l-.012-.624l.366-.004l.004 1.435l-.36.004v-.122a.58.58 0 0 1-.432.15a.56.56 0 0 1-.413-.156c-.103-.11-.13-.31-.123-.46l-.004-.847h.372l-.008.77a.33.33 0 0 0 .075.23a.25.25 0 0 0 .198.09q.337 0 .336-.468zm1.805.077a.36.36 0 0 0-.11-.272c-.07-.073-.115-.118-.218-.115c-.1 0-.186.018-.266.094a.4.4 0 0 0-.116.293q0 .18.117.29c.07.073.168.114.27.114c.102.003.166-.053.238-.126c.087-.094.06-.21.085-.278m-.262-.76c.176 0 .333.11.466.245a.7.7 0 0 1 .197.515a.7.7 0 0 1-.197.512c-.093.16-.31.255-.486.254c-.16.005-.36-.066-.428-.197l.004.76l-.4.006l-.02-2.04l.416-.02v.157c.126-.103.285-.2.448-.193zm2.002.764c-.014-.16-.044-.203-.117-.283c-.072-.074-.117-.087-.22-.085c-.1 0-.178-.005-.257.07a.4.4 0 0 0-.116.294q0 .18.116.29c.07.073.168.114.27.114c.102.003.154-.065.226-.137c.073-.08.086-.175.098-.263m-.318-.75c.177 0 .389.096.522.23a.7.7 0 0 1 .198.516a.7.7 0 0 1-.198.512c-.105.15-.344.255-.522.254a.48.48 0 0 1-.392-.197v.75l-.405.01l-.023-2.034h.428v.137c.126-.103.23-.183.392-.177zm1.268.576l.637-.008c-.017-.074-.063-.12-.124-.166a.36.36 0 0 0-.406.003c-.085.068-.054.056-.107.17zm.313-.575c.179-.003.425.078.552.203c.133.13.157.308.166.512l-.031.125h-1.03c.02.095.044.186.104.244c.059.056.153.07.234.07a.5.5 0 0 0 .383-.17l.316.141c-.046.14-.187.223-.304.296a.76.76 0 0 1-.408.094c-.184.003-.378-.116-.507-.247a.72.72 0 0 1-.2-.523c0-.21.094-.382.23-.518c.13-.132.31-.232.495-.227m1.673 1.127c.08-.003.11.002.178-.038l.04.388c-.107.063-.135.038-.26.042a.63.63 0 0 1-.416-.155c-.094-.09-.097-.26-.097-.443l-.012-.513l-.243-.004l.004-.388l.25.012l-.007-.41l.412.004l-.016.39l.367.02l-.012.355l-.365.008l.003.507c.002.155.042.225.175.225zm.75-.54h.654a.32.32 0 0 0-.12-.186a.36.36 0 0 0-.407.003a.3.3 0 0 0-.127.184zm.338-.587c.185 0 .368.092.5.22c.133.13.173.295.183.5v.12h-1.03a.4.4 0 0 0 .12.228a.3.3 0 0 0 .218.086c.155 0 .297-.06.367-.18l.3.15c-.05.13-.12.19-.238.262a.96.96 0 0 1-.452.125a.7.7 0 0 1-.502-.224a.77.77 0 0 1-.208-.542c0-.21.106-.382.24-.518c.132-.132.316-.232.5-.227zm1.27.587h.654a.32.32 0 0 0-.12-.186a.36.36 0 0 0-.407.003a.3.3 0 0 0-.127.184zm.337-.587a.74.74 0 0 1 .5.22c.134.13.174.295.184.5v.12h-1.03a.4.4 0 0 0 .12.228a.3.3 0 0 0 .217.086c.154 0 .297-.06.368-.18l.3.15c-.05.13-.12.19-.238.262a.96.96 0 0 1-.454.125a.7.7 0 0 1-.5-.224a.77.77 0 0 1-.208-.542c0-.21.106-.382.24-.518c.13-.132.315-.232.5-.227zm1.938.04l-.067.364l-.18-.023c-.322 0-.36.207-.36.595v.49l-.393.005l.008-1.43h.365l-.004.22c.145-.17.215-.286.63-.22zM17.535 7.91l.02-.366l1.317-.687l.007.396zM5.04 6.84l1.35.68l-.008.393l-1.314-.65zm7.21-1.748l4.839 2.448v.392l-4.851-2.46zM6.874 7.51l4.894-2.42l-.007.374l-4.893 2.444zm3.467-3.974L5.418 1.099L6.64.494l5.352 2.744L17.335.466l1.257.65l-4.926 2.478c-.196.098-.13.388.067.486l4.838 2.42l-1.22.622l-5.353-2.697L6.62 7.129l-1.273-.634l4.998-2.483a.266.266 0 0 0-.004-.477zM5.059 1.888l.007-.377l4.607 2.276l-.348.2zm9.648 2.077l-.41-.184l4.596-2.303l-.028.412zm.422.306l4.124-2.07a.12.12 0 0 0 .07-.11v-.98c0-.046-.008-.136-.05-.157l-1.94-.94a.12.12 0 0 0-.113 0l-5.167 2.623a.12.12 0 0 1-.11 0L6.679.015a.12.12 0 0 0-.11 0L4.616.938c-.04.02-.02.11-.02.157v.995c0 .047.026.09.07.11l4.14 2.047L4.69 6.239c-.04.02-.108.062-.11.108l.017 1.034a.12.12 0 0 0 .068.113l1.933.986c.034.018.122.03.157.014l5.186-2.602a.12.12 0 0 1 .11 0l5.12 2.603a.12.12 0 0 0 .11 0l1.972-.954c.042-.02.103-.05.104-.096l-.007-1.033c0-.047-.047-.15-.09-.17z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Python.astro
================
import type { SVGProps } from 'react'

interface Props {
  class?: string | undefined;
}

const { class: className } = Astro.props;

export function Python(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      class={className}
    >
      <path
        fill='currentColor'
        d="M12 0C5.372 0 0 5.372 0 12s5.372 12 12 12 12-5.372 12-12S18.628 0 12 0zm-1.08 4.697c.434-.24.947-.361 1.54-.361.592 0 1.105.12 1.54.361.434.241.78.562 1.038.964.259.402.389.834.389 1.295 0 .461-.13.893-.389 1.295-.258.402-.604.723-1.038.964-.435.24-.948.361-1.54.361-.593 0-1.106-.12-1.54-.361-.435-.241-.781-.562-1.039-.964-.258-.402-.388-.834-.388-1.295 0-.461.13-.893.388-1.295.258-.402.604-.723 1.039-.964zm5.547 14.028c-.435.241-.948.361-1.54.361-.593 0-1.106-.12-1.54-.361-.435-.241-.781-.562-1.039-.964-.258-.402-.388-.834-.388-1.295 0-.461.13-.893.388-1.295.258-.402.604-.723 1.039-.964.434-.24.947-.361 1.54-.361.592 0 1.105.12 1.54.361.434.241.78.562 1.038.964.259.402.389.834.389 1.295 0 .461-.13.893-.389 1.295-.258.402-.604.723-1.038.964z"
      />
    </svg>
  )
}

================
File: components/icons/ReactJs.tsx
================
import type { SVGProps } from 'react'

export function ReactJs(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236a2.236 2.236 0 0 1-2.236-2.236a2.236 2.236 0 0 1 2.235-2.236a2.236 2.236 0 0 1 2.236 2.236m2.648-10.69c-1.346 0-3.107.96-4.888 2.622c-1.78-1.653-3.542-2.602-4.887-2.602c-.41 0-.783.093-1.106.278c-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03c-.704 3.113-.39 5.588.988 6.38c.32.187.69.275 1.102.275c1.345 0 3.107-.96 4.888-2.624c1.78 1.654 3.542 2.603 4.887 2.603c.41 0 .783-.09 1.106-.275c1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032c.704-3.11.39-5.587-.988-6.38a2.17 2.17 0 0 0-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127c.666.382.955 1.835.73 3.704c-.054.46-.142.945-.25 1.44a23.5 23.5 0 0 0-3.107-.534A24 24 0 0 0 12.769 4.7c1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28c-.686.72-1.37 1.537-2.02 2.442a23 23 0 0 0-3.113.538a15 15 0 0 1-.254-1.42c-.23-1.868.054-3.32.714-3.707c.19-.09.4-.127.563-.132zm4.882 3.05q.684.704 1.36 1.564c-.44-.02-.89-.034-1.345-.034q-.691-.001-1.36.034c.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093q.61.874 1.183 1.86q.557.961 1.018 1.946c-.308.655-.646 1.31-1.013 1.95c-.38.66-.773 1.288-1.18 1.87a25.6 25.6 0 0 1-4.412.005a27 27 0 0 1-1.183-1.86q-.557-.961-1.018-1.946a25 25 0 0 1 1.013-1.954c.38-.66.773-1.286 1.18-1.868A25 25 0 0 1 12 8.098zm-3.635.254c-.24.377-.48.763-.704 1.16q-.336.585-.635 1.174c-.265-.656-.49-1.31-.676-1.947c.64-.15 1.315-.283 2.015-.386zm7.26 0q1.044.153 2.006.387c-.18.632-.405 1.282-.66 1.933a26 26 0 0 0-1.345-2.32zm3.063.675q.727.226 1.375.498c1.732.74 2.852 1.708 2.852 2.476c-.005.768-1.125 1.74-2.857 2.475c-.42.18-.88.342-1.355.493a24 24 0 0 0-1.1-2.98c.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98a23 23 0 0 0-1.086 2.964c-.484-.15-.944-.318-1.37-.5c-1.732-.737-2.852-1.706-2.852-2.474s1.12-1.742 2.852-2.476c.42-.18.88-.342 1.356-.494m11.678 4.28c.265.657.49 1.312.676 1.948c-.64.157-1.316.29-2.016.39a26 26 0 0 0 1.341-2.338zm-9.945.02c.2.392.41.783.64 1.175q.345.586.705 1.143a22 22 0 0 1-2.006-.386c.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423c.23 1.868-.054 3.32-.714 3.708c-.147.09-.338.128-.563.128c-1.012 0-2.514-.807-4.11-2.28c.686-.72 1.37-1.536 2.02-2.44c1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532c.66.905 1.345 1.727 2.035 2.446c-1.595 1.483-3.092 2.295-4.11 2.295a1.2 1.2 0 0 1-.553-.132c-.666-.38-.955-1.834-.73-3.703c.054-.46.142-.944.25-1.438zm4.56.64q.661.032 1.345.034q.691.001 1.36-.034c-.44.572-.895 1.095-1.345 1.565q-.684-.706-1.36-1.565'
      ></path>
    </svg>
  )
}

================
File: components/icons/ReactQuery.tsx
================
import type { SVGProps } from 'react'

export function Reactquery(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M6.93 13.688a.343.343 0 0 1 .468.132l.063.106q.72 1.277 1.5 2.426a36 36 0 0 0 2.074 2.742a.346.346 0 0 1-.039.484l-.074.066c-2.543 2.223-4.191 2.665-4.953 1.333c-.746-1.305-.477-3.672.808-7.11a.34.34 0 0 1 .153-.18M17.75 16.3a.34.34 0 0 1 .395.27l.02.1q.942 4.93-1.325 4.93c-1.48 0-3.36-1.402-5.649-4.203a.33.33 0 0 1-.074-.222c0-.188.156-.34.344-.34h.121a33 33 0 0 0 2.809-.098q1.606-.128 3.359-.437m.871-6.977a.353.353 0 0 1 .445-.21l.102.034q4.895 1.665 3.719 3.664q-1.148 1.957-6.684 2.848a.36.36 0 0 1-.238-.047a.343.343 0 0 1-.125-.476l.062-.106a34 34 0 0 0 1.367-2.523q.717-1.484 1.352-3.184M7.797 8.34a.36.36 0 0 1 .238.047a.343.343 0 0 1 .125.476l-.062.106a34 34 0 0 0-1.367 2.523q-.717 1.483-1.352 3.184a.353.353 0 0 1-.445.21l-.102-.034q-4.895-1.666-3.719-3.664Q2.261 9.23 7.797 8.34m5.281-3.984c2.543-2.223 4.192-2.664 4.953-1.332q1.12 1.954-.808 7.109a.34.34 0 0 1-.153.18a.343.343 0 0 1-.468-.133l-.063-.106a35 35 0 0 0-1.5-2.426a36 36 0 0 0-2.074-2.742a.346.346 0 0 1 .039-.484ZM7.285 2.274q2.22 0 5.649 4.203a.35.35 0 0 1 .078.218a.35.35 0 0 1-.348.344l-.117-.004a35 35 0 0 0-2.809.102a36 36 0 0 0-3.363.437a.343.343 0 0 1-.394-.273l-.02-.098q-.944-4.929 1.324-4.93m2.871 5.812h3.688a.64.64 0 0 1 .55.316l1.848 3.22a.64.64 0 0 1 0 .628l-1.847 3.223a.64.64 0 0 1-.551.316h-3.688a.63.63 0 0 1-.547-.316L7.758 12.25a.64.64 0 0 1 0-.629L9.61 8.402a.63.63 0 0 1 .546-.316m3.23.793a.64.64 0 0 1 .552.316l1.39 2.426a.64.64 0 0 1 0 .629l-1.39 2.43a.64.64 0 0 1-.551.316h-2.774a.63.63 0 0 1-.546-.316l-1.395-2.43a.64.64 0 0 1 0-.629l1.395-2.426a.63.63 0 0 1 .546-.316Zm-.491.867h-1.79a.62.62 0 0 0-.546.316l-.899 1.56a.64.64 0 0 0 0 .628l.899 1.563a.63.63 0 0 0 .547.316h1.789a.63.63 0 0 0 .547-.316l.898-1.563a.64.64 0 0 0 0-.629l-.898-1.558a.62.62 0 0 0-.547-.317m-.477.828c.227 0 .438.121.547.317l.422.73a.63.63 0 0 1 0 .629l-.422.734a.63.63 0 0 1-.547.317h-.836a.63.63 0 0 1-.547-.317l-.422-.734a.63.63 0 0 1 0-.629l.422-.73a.63.63 0 0 1 .547-.317zm-.418.817a.55.55 0 0 0-.473.273a.55.55 0 0 0 0 .547a.54.54 0 0 0 .473.27a.54.54 0 0 0 .473-.27a.55.55 0 0 0 0-.547a.55.55 0 0 0-.473-.273m-4.422.546h.98M18.982 7.75c.39-1.894.476-3.344.222-4.398c-.148-.63-.422-1.137-.84-1.508c-.441-.39-1-.582-1.625-.582c-1.035 0-2.12.472-3.281 1.367a15 15 0 0 0-1.473 1.316a1 1 0 0 0-.136-.144c-1.446-1.285-2.66-2.082-3.7-2.39c-.617-.184-1.195-.2-1.722-.024c-.559.187-1.004.574-1.317 1.117c-.515.894-.652 2.074-.46 3.527q.119.885.402 1.934a1 1 0 0 0-.215.047C3.008 8.62 1.71 9.269.926 10.015c-.465.442-.77.938-.883 1.481c-.113.578 0 1.156.312 1.7c.516.894 1.465 1.597 2.817 2.155q.813.334 1.844.61a1 1 0 0 0-.07.226c-.391 1.891-.477 3.344-.223 4.395c.148.629.425 1.14.84 1.508c.44.39 1 .582 1.625.582c1.035 0 2.12-.473 3.28-1.364q.715-.556 1.489-1.336a1.2 1.2 0 0 0 .195.227c1.446 1.285 2.66 2.082 3.7 2.39c.617.184 1.195.2 1.722.024c.559-.187 1.004-.574 1.317-1.117c.515-.894.652-2.074.46-3.527a15 15 0 0 0-.425-2.012a1.2 1.2 0 0 0 .238-.047c1.828-.61 3.125-1.258 3.91-2.004c.465-.441.77-.937.883-1.48c.113-.578 0-1.157-.312-1.7c-.516-.894-1.465-1.597-2.817-2.156a15 15 0 0 0-1.906-.625a1 1 0 0 0 .059-.195'
      ></path>
    </svg>
  )
}

================
File: components/icons/Scroll.tsx
================
import type { SVGProps } from 'react'

export function Scroll(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='none'
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='1.5'
        d='M5.975 16.987V6.532c0-1.345.057-2.906 1.065-3.8C7.866 2 9.034 2 10.14 2h7.31c1.027 0 2.092.018 3.012.47q.112.055.213.115C22.042 3.388 22 5.302 22 6.885v10.532c0 1.041-.048 2.111-.48 3.059c-.414.907-.98 1.314-2.024 1.506M5.975 16.987h8.83c.413 0 .785.253.93.638c.126.337.23.627.323.9c.323.958.607 1.969 1.287 2.717c.409.45.838.678 1.41.74m-12.78-4.995H2.969c-.553 0-1.011.447-.966.997c.047.576.15 1.078.34 1.615c.336.95.92 1.911 1.88 2.225c.354.115.746.153 1.251.158h13.28m.742 0a4 4 0 0 1-.742 0m.742 0h-.742M10.469 7h7m-7 4h3.5'
        color='currentColor'
      ></path>
    </svg>
  )
}

================
File: components/icons/Search.tsx
================
import type { SVGProps } from 'react'

export function Search(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='none'
        stroke='currentColor'
        strokeLinecap='round'
        strokeLinejoin='round'
        strokeWidth='2'
        d='m14 14l2.5 2.5m-.067 2.025a1.48 1.48 0 1 1 2.092-2.092l3.042 3.042a1.48 1.48 0 1 1-2.092 2.092zM16 9A7 7 0 1 0 2 9a7 7 0 0 0 14 0'
        color='currentColor'
      ></path>
    </svg>
  )
}

================
File: components/icons/Spotify.tsx
================
import type { SVGProps } from 'react'

export function Spotify(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12s12-5.4 12-12S18.66 0 12 0m5.521 17.34c-.24.359-.66.48-1.021.24c-2.82-1.74-6.36-2.101-10.561-1.141c-.418.122-.779-.179-.899-.539c-.12-.421.18-.78.54-.9c4.56-1.021 8.52-.6 11.64 1.32c.42.18.479.659.301 1.02m1.44-3.3c-.301.42-.841.6-1.262.3c-3.239-1.98-8.159-2.58-11.939-1.38c-.479.12-1.02-.12-1.14-.6s.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2m.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721c-.18-.601.18-1.2.72-1.381c4.26-1.26 11.28-1.02 15.721 1.621c.539.3.719 1.02.419 1.56c-.299.421-1.02.599-1.559.3'
      ></path>
    </svg>
  )
}

================
File: components/icons/SQLAlchemy.astro
================
import type { SVGProps } from 'react'

interface Props {
  class?: string | undefined;
}

const { class: className } = Astro.props;

export function SQLAlchemy(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      class={className}
    >
      <path
        fill='currentColor'
        d="M20 13c0 2.21-3.582 4-8 4s-8-1.79-8-4v4c0 2.21 3.582 4 8 4s8-1.79 8-4v-4zM4 9c0 2.21 3.582 4 8 4s8-1.79 8-4V5c0-2.21-3.582-4-8-4S4 2.79 4 5v4zm0 0c0 2.21 3.582 4 8 4s8-1.79 8-4"
      />
    </svg>
  )
}

================
File: components/icons/Stack.tsx
================
import type { SVGProps } from 'react'

export function Stack(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <g fill='currentColor'>
        <path d='m220 169.09l-92 53.65l-92-53.65a8 8 0 0 0-8 13.82l96 56a8 8 0 0 0 8.06 0l96-56a8 8 0 1 0-8.06-13.82'></path>
        <path d='m220 121.09l-92 53.65l-92-53.65a8 8 0 0 0-8 13.82l96 56a8 8 0 0 0 8.06 0l96-56a8 8 0 1 0-8.06-13.82'></path>
        <path d='m28 86.91l96 56a8 8 0 0 0 8.06 0l96-56a8 8 0 0 0 0-13.82l-96-56a8 8 0 0 0-8.06 0l-96 56a8 8 0 0 0 0 13.82'></path>
      </g>
    </svg>
  )
}

================
File: components/icons/Suitcase.tsx
================
import type { SVGProps } from 'react'

export function Suitcase(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M216 56h-40v-8a24 24 0 0 0-24-24h-48a24 24 0 0 0-24 24v8H40a16 16 0 0 0-16 16v128a16 16 0 0 0 16 16h176a16 16 0 0 0 16-16V72a16 16 0 0 0-16-16M96 48a8 8 0 0 1 8-8h48a8 8 0 0 1 8 8v8H96Zm120 24v72H40V72Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Swr.tsx
================
import type { SVGProps } from 'react'

export function Swr(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M0 12.187a2.66 2.66 0 0 0 2.648 2.647a2.66 2.66 0 0 0 2.647-2.646v-.376a1.097 1.097 0 0 1 1.092-1.086c.326 0 .636.147.844.399h1.712a2.66 2.66 0 0 0-2.558-1.959a2.664 2.664 0 0 0-2.647 2.647v.374c0 .598-.493 1.09-1.091 1.09a1.096 1.096 0 0 1-1.09-1.09a.314.314 0 0 0-.312-.312H.311a.313.313 0 0 0-.311.312m10.131 2.647a2.664 2.664 0 0 1-2.555-1.96h1.71a1.088 1.088 0 0 0 1.935-.683v-.379a2.663 2.663 0 0 1 2.648-2.646a2.65 2.65 0 0 1 2.647 2.591l.008.43a1.097 1.097 0 0 0 1.092 1.086c.326 0 .636-.146.843-.399h1.712a2.66 2.66 0 0 1-2.556 1.96a2.66 2.66 0 0 1-2.648-2.646l-.008-.389v-.017a1.096 1.096 0 0 0-1.09-1.059a1.096 1.096 0 0 0-1.09 1.09v.374a2.663 2.663 0 0 1-2.648 2.647m10.376-3.708a1.09 1.09 0 0 1 1.936.683v.004c0 .171.14.312.311.312h.935a.313.313 0 0 0 .311-.312a2.663 2.663 0 0 0-2.648-2.647a2.66 2.66 0 0 0-2.557 1.96z'
      ></path>
    </svg>
  )
}

================
File: components/icons/Tailwind.tsx
================
import type { SVGProps } from 'react'

export function Tailwindcss(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M12.001 4.8q-4.8 0-6 4.8q1.8-2.4 4.2-1.8c.913.228 1.565.89 2.288 1.624C13.666 10.618 15.027 12 18.001 12q4.8 0 6-4.8q-1.8 2.4-4.2 1.8c-.913-.228-1.565-.89-2.288-1.624C16.337 6.182 14.976 4.8 12.001 4.8m-6 7.2q-4.8 0-6 4.8q1.8-2.4 4.2-1.8c.913.228 1.565.89 2.288 1.624c1.177 1.194 2.538 2.576 5.512 2.576q4.8 0 6-4.8q-1.8 2.4-4.2 1.8c-.913-.228-1.565-.89-2.288-1.624C10.337 13.382 8.976 12 6.001 12'
      ></path>
    </svg>
  )
}

================
File: components/icons/Target.tsx
================
import type { SVGProps } from 'react'

export function Target(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M221.87 83.16A104.1 104.1 0 1 1 195.67 49l22.67-22.68a8 8 0 0 1 11.32 11.32l-96 96a8 8 0 0 1-11.32-11.32l27.72-27.72a40 40 0 1 0 17.87 31.09a8 8 0 1 1 16-.9a56 56 0 1 1-22.38-41.65l22.75-22.75a87.88 87.88 0 1 0 23.13 29.67a8 8 0 0 1 14.44-6.9'
      ></path>
    </svg>
  )
}

================
File: components/icons/Telegram.tsx
================
import type { SVGProps } from 'react'

export function Telegram(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <g fill='currentColor'>
        <path
          d='M223.41 32.09L80 134.87L21 123.3a6.23 6.23 0 0 1-1-11.92l202.63-79.31a1 1 0 0 1 .78.02M80 200a8 8 0 0 0 13.76 5.56l30.61-31.76L80 134.87Z'
          opacity='.2'
        ></path>
        <path d='M228.88 26.19a9 9 0 0 0-9.16-1.57L17.06 103.93a14.22 14.22 0 0 0 2.43 27.21L72 141.45V200a15.92 15.92 0 0 0 10 14.83a15.91 15.91 0 0 0 17.51-3.73l25.32-26.26L165 220a15.88 15.88 0 0 0 10.51 4a16.3 16.3 0 0 0 5-.79a15.85 15.85 0 0 0 10.67-11.63L231.77 35a9 9 0 0 0-2.89-8.81M78.15 126.35l-49.61-9.73l139.2-54.48ZM88 200v-47.48l24.79 21.74Zm87.53 8l-82.68-72.5l119-85.29Z'></path>
      </g>
    </svg>
  )
}

================
File: components/icons/TelegramFilled.tsx
================
import type { SVGProps } from 'react'

export function TelegramFilled(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12a12 12 0 0 0 12-12A12 12 0 0 0 12 0zm4.962 7.224c.1-.002.321.023.465.14a.5.5 0 0 1 .171.325c.016.093.036.306.02.472c-.18 1.898-.962 6.502-1.36 8.627c-.168.9-.499 1.201-.82 1.23c-.696.065-1.225-.46-1.9-.902c-1.056-.693-1.653-1.124-2.678-1.8c-1.185-.78-.417-1.21.258-1.91c.177-.184 3.247-2.977 3.307-3.23c.007-.032.014-.15-.056-.212s-.174-.041-.249-.024q-.159.037-5.061 3.345q-.72.495-1.302.48c-.428-.008-1.252-.241-1.865-.44c-.752-.245-1.349-.374-1.297-.789q.04-.324.893-.663q5.247-2.286 6.998-3.014c3.332-1.386 4.025-1.627 4.476-1.635'
      ></path>
    </svg>
  )
}

================
File: components/icons/Timer.tsx
================
import type { SVGProps } from 'react'

export function Timer(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='M128 40a96 96 0 1 0 96 96a96.11 96.11 0 0 0-96-96m0 176a80 80 0 1 1 80-80a80.09 80.09 0 0 1-80 80m45.66-125.66a8 8 0 0 1 0 11.32l-40 40a8 8 0 0 1-11.32-11.32l40-40a8 8 0 0 1 11.32 0M96 16a8 8 0 0 1 8-8h48a8 8 0 0 1 0 16h-48a8 8 0 0 1-8-8'
      ></path>
    </svg>
  )
}

================
File: components/icons/Translate.tsx
================
import type { SVGProps } from 'react'

export function Translate(props: Readonly<SVGProps<SVGSVGElement>>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <path
        fill='currentColor'
        d='m247.15 212.42l-56-112a8 8 0 0 0-14.31 0l-21.71 43.43A88 88 0 0 1 108 126.93A103.65 103.65 0 0 0 135.69 64H160a8 8 0 0 0 0-16h-56V32a8 8 0 0 0-16 0v16H32a8 8 0 0 0 0 16h87.63A87.76 87.76 0 0 1 96 116.35a87.7 87.7 0 0 1-19-31a8 8 0 1 0-15.08 5.34A103.6 103.6 0 0 0 84 127a87.55 87.55 0 0 1-52 17a8 8 0 0 0 0 16a103.46 103.46 0 0 0 64-22.08a104.2 104.2 0 0 0 51.44 21.31l-26.6 53.19a8 8 0 0 0 14.31 7.16L148.94 192h70.11l13.79 27.58A8 8 0 0 0 240 224a8 8 0 0 0 7.15-11.58M156.94 176L184 121.89L211.05 176Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/TypeScript.tsx
================
import type { SVGProps } from 'react'

export function TypeScript(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75q.918 0 1.627.111a6.4 6.4 0 0 1 1.306.34v2.458a4 4 0 0 0-.643-.361a5 5 0 0 0-.717-.26a5.5 5.5 0 0 0-1.426-.2q-.45 0-.819.086a2.1 2.1 0 0 0-.623.242q-.254.156-.393.374a.9.9 0 0 0-.14.49q0 .294.156.529q.156.234.443.444c.287.21.423.276.696.41q.41.203.926.416q.705.296 1.266.628q.561.333.963.753q.402.418.614.957q.213.538.214 1.253q0 .986-.373 1.656a3 3 0 0 1-1.012 1.085a4.4 4.4 0 0 1-1.487.596q-.85.18-1.79.18a10 10 0 0 1-1.84-.164a5.5 5.5 0 0 1-1.512-.493v-2.63a5.03 5.03 0 0 0 3.237 1.2q.5 0 .872-.09q.373-.09.623-.25q.249-.162.373-.38a1.02 1.02 0 0 0-.074-1.089a2.1 2.1 0 0 0-.537-.5a5.6 5.6 0 0 0-.807-.444a28 28 0 0 0-1.007-.436q-1.377-.575-2.053-1.405t-.676-2.005q0-.92.369-1.582q.368-.662 1.004-1.089a4.5 4.5 0 0 1 1.47-.629a7.5 7.5 0 0 1 1.77-.201m-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z'
      ></path>
    </svg>
  )
}

================
File: components/icons/VueJs.tsx
================
import type { SVGProps } from 'react'

export function Vuejs(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      aria-hidden='true'
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 24 24'
      {...props}
    >
      <path
        fill='currentColor'
        d='M24 1.61h-9.94L12 5.16L9.94 1.61H0l12 20.78ZM12 14.08L5.16 2.23h4.43L12 6.41l2.41-4.18h4.43Z'
      ></path>
    </svg>
  )
}

================
File: components/icons/X.tsx
================
import type { SVGProps } from 'react'

export function X(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='1em'
      height='1em'
      viewBox='0 0 256 256'
      {...props}
    >
      <g fill='currentColor'>
        <path d='M208 216h-48L48 40h48Z' opacity='.2'></path>
        <path d='m214.75 211.71l-62.6-98.38l61.77-67.95a8 8 0 0 0-11.84-10.76l-58.84 64.72l-40.49-63.63A8 8 0 0 0 96 32H48a8 8 0 0 0-6.75 12.3l62.6 98.37l-61.77 68a8 8 0 1 0 11.84 10.76l58.84-64.72l40.49 63.63A8 8 0 0 0 160 224h48a8 8 0 0 0 6.75-12.29M164.39 208L62.57 48h29l101.86 160Z'></path>
      </g>
    </svg>
  )
}

================
File: components/Image/Image.astro
================
---
import type { UnresolvedImageTransform } from 'astro'
import { getImage, Image as AstroImage } from 'astro:assets'

import { alignClass, type CustomImageProps } from './types'

type Props = CustomImageProps

const {
  class: className,
  wrapperProps,
  ambientMode,
  align = 'top',
  ...rest
} = Astro.props

const blurryImage = await getImage({
  ...(rest as UnresolvedImageTransform),
  width: 20
})

const { class: wrapperClass, ...restWrapperProps } = wrapperProps ?? {}
---

<div
  class:list={[
    'blur-load h-fit w-fit bg-cover',
    alignClass[align].wrapper,
    { 'ambient-mode': ambientMode },
    wrapperClass
  ]}
  {...restWrapperProps}
>
  <AstroImage
    class:list={[
      'object-cover',
      alignClass[align].image,
      'h-[inherit] max-h-[inherit] rounded-[inherit]',
      className
    ]}
    {...rest}
  />
</div>

<style define:vars={{ 'bg-image': `url(${blurryImage.src})` }}>
  .blur-load {
    background-image: var(--bg-image);
    filter: blur(36px);
    transition: filter 300ms ease-in-out;
  }

  .blur-load.image-loaded {
    filter: blur(0);
  }

  .blur-load.image-loaded > img {
    opacity: 1;
  }

  .blur-load > img {
    opacity: 0;
    transition: all 300ms ease-in-out;
  }

  .ambient-mode {
    position: relative;
  }

  .ambient-mode::before {
    position: absolute;
    max-width: 100vw;
    overflow-x: hidden;
    width: 105%;
    height: 105%;

    background-image: var(--bg-image);
    background-size: cover;
    filter: blur(64px);
    opacity: 25%;
    z-index: -10;

    content: '';
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
</style>

<script>
  // it's safe to put the script here instead of BaseLayout
  // because scripts are bundled and only included once per page
  // source: https://docs.astro.build/en/guides/client-side-scripts/

  document.addEventListener('astro:page-load', () => {
    const blurDivs = document.querySelectorAll('.blur-load')
    blurDivs.forEach((div) => {
      const image = div.querySelector('img')

      function handleLoadedImage() {
        div.classList.add('image-loaded')
      }

      if (image?.complete) {
        return handleLoadedImage()
      }

      image?.addEventListener('load', handleLoadedImage)
    })
  })
</script>

================
File: components/Image/index.ts
================
export { default } from './Image.astro'

================
File: components/Image/MarkdownImage.astro
================
---
import Image from './Image.astro'
import type { CustomImageProps } from './types'

type Props = CustomImageProps

const { props } = Astro
---

<Image {...props} title={props.alt} inferSize />

================
File: components/Image/types.ts
================
import type { LocalImageProps, RemoteImageProps } from 'astro:assets'

export const alignClass = {
  top: {
    wrapper: 'bg-top',
    image: 'object-top'
  },
  center: {
    wrapper: 'bg-center',
    image: 'object-center'
  }
}

export type CustomImageProps = {
  wrapperProps?: astroHTML.JSX.HTMLAttributes
  ambientMode?: boolean
  align?: keyof typeof alignClass
} & (LocalImageProps | RemoteImageProps)

================
File: components/Link/index.ts
================
import LinkArticle from './LinkArticle.astro'

export { default } from './Link.astro'
export { LinkArticle }

================
File: components/Link/Link.astro
================
---
interface Props extends astroHTML.JSX.AnchorHTMLAttributes {
  styled?: boolean
  hoverStyled?: boolean
  hoverEffectOffsetStart?: string
  hoverEffectOffsetEnd?: string
}

const {
  styled,
  hoverStyled,
  hoverEffectOffsetStart,
  hoverEffectOffsetEnd,
  class: className,
  ...rest
} = Astro.props

const offsetStart = hoverEffectOffsetStart
const offsetEnd = hoverEffectOffsetEnd
---

<script>
  import { navigate } from 'astro:transitions/client'

  function generateCustomEvent(path: string) {
    return new CustomEvent('local-navigation', {
      bubbles: true,
      detail: { path }
    })
  }

  function eventHandler(event: Event) {
    if (!event.currentTarget) return

    const href = (event.currentTarget as HTMLAnchorElement).href

    if (!href.startsWith(location.origin)) return

    const customEvent = generateCustomEvent(href.replace(location.origin, ''))

    event.currentTarget.dispatchEvent(customEvent)
  }

  let { pathname: previousPath } = window.location
  let isNavigating = false

  document.addEventListener('astro:page-load', () => {
    const links = document.querySelectorAll('a.custom-link')
    links.forEach((link) => {
      link.addEventListener('click', eventHandler)
    })

    previousPath = window.location.pathname
    isNavigating = false
  })

  window.addEventListener('popstate', async () => {
    if (window.location.origin !== location.origin) return

    const currentPath = window.location.pathname
    const currentHash = window.location.hash

    // this is workaround for navigating back to the previous page with hash
    if (!isNavigating && currentPath !== previousPath && currentHash) {
      isNavigating = true
      await navigate(currentPath + currentHash, { history: 'replace' })
    }

    const customEvent = generateCustomEvent(window.location.pathname)

    document.dispatchEvent(customEvent)
  })
</script>

<style define:vars={{ offsetStart, offsetEnd }}></style>

<a
  class:list={[
    'custom-link',
    {
      'text-primary-gradient underline-offset-2 hover:underline': styled,
      'link-hover-animation hover:link-hovered-animation': hoverStyled
    },
    className
  ]}
  {...rest}><slot /></a
>

================
File: components/Link/LinkArticle.astro
================
---
import Link from './Link.astro'

interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}

const { class: className, ...rest } = Astro.props
---

<Link target='_blank' class={className} {...rest}><slot /></Link>

================
File: components/LinkCard.astro
================
---
import { inferRemoteSize } from 'astro:assets'

import Image from '@/components/Image'
import client from '@/lib/client'

import Link from './Link/Link.astro'

interface Props {
  url: string
  class?: string
}

const { url, class: className } = Astro.props

const metadata = await client.api['link-metadata']
  .$get({ query: { url } })
  .then((res) => res.json())

if (!metadata.success) return

// infer remote image size
let aspectRatio: number | undefined

if (metadata.image) {
  const { height, width } = await inferRemoteSize(metadata.image?.url)
  aspectRatio = width / height
}
---

<Link
  target='_blank'
  href={url}
  class:list={[
    'not-prose flex overflow-clip rounded-xl md:h-full md:max-h-[144px]',
    'bg-zinc-900 outline outline-zinc-700 hover:outline-2',
    'group relative transition-all',
    // 'max-md:flex-col-reverse',
    className
  ]}
>
  <span
    style='transition-duration: 800ms;'
    class:list={[
      'max-md:hidden',
      'absolute right-0 z-30 -mt-8 h-52 w-28 rotate-[24deg] bg-white opacity-[0.02]',
      'translate-x-32 transition-all ease-out',
      'group-hover:-translate-x-[520px]'
    ]}></span>
  <div class='flex h-full flex-col justify-center gap-2 p-4'>
    <p
      class='line-clamp-2 text-sm font-normal leading-snug tracking-wide !text-zinc-200'
    >
      {metadata.title}
    </p>
    <p class='line-clamp-2 text-xs leading-normal text-zinc-400'>
      {metadata.description}
    </p>
    <div class='flex gap-2 pt-1 text-xs'>
      {
        metadata.faviconUrl && (
          <Image
            wrapperProps={{ class: 'size-4 flex-shrink-0' }}
            src={metadata.faviconUrl}
            alt={metadata.title ?? url}
            height={16}
            width={16}
            inferSize
          />
        )
      }
      <p
        class='line-clamp-1 text-zinc-400/75 transition-all group-hover:text-zinc-400'
      >
        {url}
      </p>
    </div>
  </div>
  {
    metadata.image && (
      <Image
        wrapperProps={{ style: { aspectRatio }, class: 'h-full max-sm:hidden' }}
        src={metadata.image.url}
        alt={metadata.image.alt ?? url}
        inferSize
      />
    )
  }
</Link>

================
File: components/NotificationCard/index.ts
================
export { default } from './NotificationCard.astro'

================
File: components/NotificationCard/NotificationCard.astro
================
---
interface Props extends astroHTML.JSX.HTMLAttributes {
  sender: string
  time: string
  message: string
}

const { class: className, sender, time, message, ...rest } = Astro.props
---

<div
  class:list={[
    'flex w-[340px] items-center gap-3 rounded-2xl bg-slate-300 p-3 drop-shadow-xl',
    'tracking-wide text-slate-600',
    className
  ]}
  {...rest}
>
  <div
    class='flex aspect-square w-14 items-center justify-center rounded-xl bg-slate-950 text-slate-200'
  >
    <slot />
  </div>
  <div class='w-full space-y-1 overflow-hidden'>
    <div class='flex justify-between'>
      <p class='text-sm font-medium leading-none text-black'>
        {sender}
      </p>
      <p class='text-xs font-medium leading-none tracking-wide'>
        {time}
      </p>
    </div>
    <p
      class='line-clamp-1 text-[13px] font-medium leading-[1.2] tracking-normal'
    >
      {message}
    </p>
  </div>
</div>

================
File: components/PhotoCard/index.ts
================
export { default } from './PhotoCard.astro'

================
File: components/PhotoCard/PhotoCard.astro
================
---
import { Image } from 'astro:assets'

interface Props {
  class?: string
}

const { class: className } = Astro.props

// need to convert PhotoCard component as an Astro component
// because it will optimize the used of local image
const POSITION_CLASS = [
  {
    imageSrc:
      'https://images.unsplash.com/photo-1636038151101-59b2feab335a?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
    translate: '-translate-x-[64px] -translate-y-1.5',
    rotate: 'rotate-[-3deg] group-hover:rotate-[-15deg]'
  },
  {
    imageSrc:
      'https://images.unsplash.com/photo-1636743094110-5e153f93ad7e?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
    translate:
      'translate-x-[0px] translate-y-[-4px] group-hover:translate-y-[-32px]',
    rotate: 'rotate-[-8deg] '
  },
  {
    imageSrc:
      'https://images.unsplash.com/photo-1658383178431-42985646a636?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NDR8fG5vdGlvbnxlbnwwfHwwfHx8MA%3D%3D',
    translate: 'translate-x-[64px]',
    rotate: 'rotate-[2deg] group-hover:rotate-[10deg]'
  }
]
---

<div class:list={['flex h-[180px] items-center justify-center', className]}>
  {
    POSITION_CLASS.map(({ rotate, translate, imageSrc }, index) => (
      <div
        class:list={[
          'absolute aspect-square w-32 overflow-hidden rounded-2xl border-5 border-white shadow-lg',
          'transition-all duration-300',
          rotate,
          translate
        ]}
      >
        <Image
          src={imageSrc}
          alt='TODO'
          class='h-full w-full object-cover'
          transition:name={index === 1 ? 'ass' : 'asd'}
          inferSize
        />
      </div>
    ))
  }
</div>

================
File: components/ProjectCard/index.ts
================
export { default } from './ProjectCard.astro'

================
File: components/ProjectCard/ProjectCard.astro
================
---
import type { InferEntrySchema } from 'astro:content'

import Image from '@/components/Image'
import Link from '@/components/Link'

import { ArrowRight } from '../icons/ArrowRight'

interface Props
  extends Pick<
    InferEntrySchema<'projects'>,
    'title' | 'year' | 'description' | 'heroImage' | 'heroImageAlign'
  > {
  slug: string
}

const { year, title, description, slug, heroImage, heroImageAlign } =
  Astro.props
---

<Link href={`projects/${slug}`} class='group space-y-6'>
  <Image
    src={heroImage}
    alt={title}
    align={heroImageAlign}
    class='aspect-[1.75] transition-all duration-800 group-hover:scale-105'
    wrapperProps={{ class: 'rounded-lg overflow-clip' }}
  />
  <div class='flex flex-col gap-4'>
    <p>{year}</p>
    <!-- should we use heading here? -->
    <h4
      class='font-display text-xl font-semibold !leading-[1.25] max-sm:text-lg'
    >
      {title}
    </h4>
    <p class='text-sm text-zinc-400'>
      {description}
    </p>
    <span
      class='link-hover-animation group-hover:link-hovered-animation w-fit text-sm text-emerald-400'
      >Read more
      <ArrowRight
        className='ml-1 inline-block transition-all duration-300 group-hover:ml-2'
      />
    </span>
  </div>
</Link>

<style define:vars={{ offsetEnd: '24px' }}></style>

================
File: components/ProjectHeader.astro
================
---
import { projectMetaData } from '@/lib/metaData'

import { Suitcase } from './icons/Suitcase'
import SectionHeader, {
  type Props as SectionHeaderProps
} from './SectionHeader.astro'

interface Props extends Pick<SectionHeaderProps, 'forHomePage' | 'class'> {}
---

<SectionHeader
  section='Projects'
  icon={Suitcase}
  {...projectMetaData}
  {...Astro.props}
/>

================
File: components/Raylight/index.ts
================
import RayLight from './RayLight'
import RayLightContainer from './RayLightContainer.astro'

export default { Component: RayLight, Container: RayLightContainer }

================
File: components/Raylight/RayLight.css
================
.ray-light {
  background-color: hsla(216, 57%, 45%, 0.5);
  background: radial-gradient(
    ellipse closest-side at center,
    hsl(138, 57%, 69%) 0%,
    hsla(216, 57%, 45%, 0.5) 100%
  );
}

.ray-light-secondary {
  background-color: hsla(202, 56%, 31%, 0.25);
  background-image: radial-gradient(
    ellipse farthest-corner at center,
    hsl(164, 39%, 53%) 0%,
    hsla(202, 56%, 31%, 0.25) 55%
  );
}

================
File: components/Raylight/RayLight.tsx
================
import './RayLight.css'

import type { ComponentProps } from 'react'

import { cn } from '@/lib/utils'

const TYPE = {
  primary: 'ray-light',
  secondary: 'ray-light-secondary'
}

interface Props extends Pick<ComponentProps<'div'>, 'className'> {
  type?: keyof typeof TYPE
}

const RayLight = ({ className, type }: Props) => {
  return (
    <div
      className={cn(
        'absolute h-[130px] w-[1190px] rounded-full',
        'left-[84px] -rotate-[32deg]',
        'opacity-30 blur-[48px]',
        type ? TYPE[type] : TYPE['primary'],
        className
      )}
    ></div>
  )
}

export default RayLight

================
File: components/Raylight/RayLightContainer.astro
================
---
interface Props {
  class?: string
}

const { class: className } = Astro.props
---

<div
  class:list={[
    'absolute -z-10 h-screen w-screen max-w-full overflow-hidden min-[2048px]:max-w-[2048px]',
    className
  ]}
>
  <slot />
</div>

================
File: components/SectionHeader.astro
================
---
import type { JSX, SVGProps } from 'react'

import { getCustomTransition } from '@/lib/customTransition'

export interface Props {
  icon: (props: SVGProps<SVGSVGElement>) => JSX.Element
  class?: string
  forHomePage?: boolean
  section: string
  htmlTitle: string
  htmlDescription: string
}

const {
  class: className,
  forHomePage,
  icon: Icon,
  section,
  htmlTitle: title,
  htmlDescription: description
} = Astro.props

const Section = forHomePage ? 'h2' : 'h1'
const Title = forHomePage ? 'h3' : 'h2'
const Container = forHomePage ? 'div' : 'section'
---

<Container class:list={['space-y-6 sm:space-y-8', className]}>
  <div
    transition:animate={getCustomTransition()}
    class='flex w-fit items-center gap-2 rounded-full bg-emerald-950/55 px-4 py-2 text-emerald-300'
  >
    <Icon />
    <Section class='text-sm font-medium tracking-wide max-sm:text-xs'
      >{section}</Section
    >
  </div>
  <Title
    set:html={title}
    transition:animate={getCustomTransition(0.05)}
    class:list={[
      'font-heading font-semibold leading-none',
      forHomePage
        ? 'text-[clamp(2rem,7vw,3rem)]'
        : 'text-[clamp(2rem,7vw,3.25rem)]'
    ]}
  />
  <p
    class='text-zinc-400 max-md:text-sm'
    transition:animate={getCustomTransition(0.1)}
    set:html={description}
  />
</Container>

================
File: components/SEO.astro
================
---
import { type Props as SEOProps, SEO as AstroSEO } from 'astro-seo'

import { BASE_URL } from '@/lib/baseUrl'
import { mainMetaData } from '@/lib/metaData'

interface Props extends SEOProps {
  imageUrl?: string
  type?: 'article' | 'website' | 'profile'
  slot: 'seo'
}

const { props } = Astro

const metaData = {
  title: props.title ?? mainMetaData.title,
  description: props.description ?? mainMetaData.description,
  image: props.imageUrl ?? `${BASE_URL}/images/og_main.png`
}

const defaultProps: SEOProps = {
  title: metaData.title,
  titleDefault: metaData.title,
  description: metaData.description,
  openGraph: {
    basic: {
      image: metaData.image,
      title: metaData.title,
      type: props.type ?? 'website',
      ...props.openGraph?.basic
    },
    optional: {
      siteName: mainMetaData.title,
      description: metaData.description,
      ...props.openGraph?.optional
    }
  },
  twitter: {
    title: metaData.title,
    description: metaData.description,
    creator: '@iandresmiguel',
    card: 'summary_large_image',
    image: metaData.image,
    imageAlt: metaData.title
  }
}

const combinedProps = { ...defaultProps, ...props }
---

<AstroSEO {...combinedProps} />

================
File: components/socialMediaData.ts
================
import { GithubOutline } from '@icons/GithubOutline'
import { LinkedIn } from '@icons/LinkedIn'
import { Mail } from '@icons/Mail'
import { Scroll } from '@icons/Scroll'

export const SOCIAL_MEDIA_DATA = [
  {
    name: 'Github',
    icon: GithubOutline,
    href: 'https://github.com/andrespaulino'
  },
  {
    name: 'LinkedIn',
    icon: LinkedIn,
    href: 'https://linkedin.com/in/andrespaulino/'
  },
  {
    name: 'Resume',
    icon: Scroll,
    href: 'https://read.cv/andrespaulino'
  },
  {
    name: 'Email',
    icon: Mail,
    href: 'mailto:paulinoandresmiguel@gmail.com'
  }
]

================
File: components/TableOfContent/index.ts
================
export { default } from './TableOfContent'

================
File: components/TableOfContent/TableOfContent.tsx
================
import type { MarkdownHeading } from 'astro'

import { cn } from '@/lib/utils'

interface Props {
  headings: MarkdownHeading[]
  className?: string
}

type GroupedHeadings = (MarkdownHeading | MarkdownHeading[])[]

const groupHeadings = (headings: MarkdownHeading[]): GroupedHeadings => {
  return headings.reduce<GroupedHeadings>((result, current, index) => {
    if (current.depth <= 2) result.push(current)
    // depth > 2
    else if (headings[index - 1]?.depth !== current.depth) {
      result.push([current])
    } else {
      ;(result[result.length - 1] as MarkdownHeading[]).push(current)
    }

    return result
  }, [])
}

const Heading = ({ slug, text }: MarkdownHeading) => {
  return (
    <li>
      <a className='hover:text-zinc-400' href={`#${slug}`}>
        {text}
      </a>
    </li>
  )
}

const DEPTH_STYLE = {
  3: 'pl-4',
  4: 'pl-8'
}

const NestedHeading = ({ headings }: { headings: MarkdownHeading[] }) => {
  return (
    <ul
      className={cn(
        'mt-2 space-y-2',
        DEPTH_STYLE[headings[0].depth as keyof typeof DEPTH_STYLE]
      )}
    >
      {headings.map((heading) => (
        <Heading key={heading.slug} {...heading} />
      ))}
    </ul>
  )
}

const TableOfContent = ({ headings, className }: Props) => {
  const groupedHeadings = groupHeadings(headings)

  return (
    <div className={cn('font-secondary', className)}>
      <p className='font-display text-lg font-semibold text-zinc-200'>
        On this page
      </p>
      <ul
        className={cn(
          'mt-2 space-y-1.5 text-[0.9rem] text-zinc-600',
          'scrollbar-color max-h-[480px] overflow-y-scroll'
        )}
      >
        {groupedHeadings.map((heading) => {
          if (!Array.isArray(heading)) {
            return <Heading key={heading.slug} {...heading} />
          }

          return (
            <NestedHeading
              key={`${heading[0].slug}-${heading[0].depth}`}
              headings={heading}
            />
          )
        })}
      </ul>
    </div>
  )
}

export default TableOfContent

================
File: components/TopOverlay.astro
================
<div class='dotted-gradient fixed left-0 top-0 z-30 !m-0 h-16 w-full sm:h-28'>
</div>

<style>
  .dotted-gradient {
    --dotted-color: #0d0d12;

    background-color: transparent;
    background-image: radial-gradient(
      transparent 1px,
      var(--dotted-color, #ffffff) 1px
    );
    background-size: 2px 2px;

    backdrop-filter: blur(5px);
    mask: linear-gradient(rgb(0, 0, 0) 50%, rgba(0, 0, 0, 0) 100%);
    opacity: 1;

    pointer-events: none;
  }
</style>

================
File: components/TweetCard/index.ts
================
export { default } from './TweetCard.astro'

================
File: components/TweetCard/Tweet.astro
================
---
import { type EnrichedTweet } from 'react-tweet'

import TweetHeader from './TweetHeader.astro'
import TweetMedia from './TweetMedia.astro'
import TweetText from './TweetText'

interface Props {
  tweet: EnrichedTweet
}

const { tweet } = Astro.props
---

<div
  class:list={[
    'max-w-lg break-inside-avoid border border-zinc-700 bg-zinc-900',
    'rounded-xl bg-clip-padding p-4 pb-6 backdrop-blur-lg backdrop-filter'
  ]}
>
  {/* User info, verified badge, twitter logo, text, etc. */}
  <div>
    <TweetHeader tweet={tweet} />
    <TweetText tweet={tweet} />
  </div>
  {/* Images, Preview images, videos, polls, etc. */}
  <div class='-mb-2 mt-3'>
    {
      tweet.mediaDetails?.length ? (
        <div
          class={
            tweet.mediaDetails.length === 1
              ? ''
              : 'inline-grid grid-cols-2 gap-x-2 gap-y-2'
          }
        >
          {tweet.mediaDetails?.map((media) => (
            <a href={tweet.url} target='_blank'>
              <TweetMedia tweet={tweet} media={media} />
            </a>
          ))}
        </div>
      ) : null
    }
  </div>
</div>

================
File: components/TweetCard/TweetCard.astro
================
---
import client from '@/lib/client'

import Tweet from './Tweet.astro'

interface Props extends astroHTML.JSX.HTMLAttributes {
  tweetId: string
}

const { tweetId, class: className, ...restProps } = Astro.props

const response = await client.api['tweet-content'][':id'].$get({
  param: { id: tweetId }
})
const data = response.status === 200 ? (await response.json()).tweet : null

if (!data) return
---

<div class:list={['not-prose flex', className]} {...restProps}>
  <Tweet tweet={data} />
</div>

================
File: components/TweetCard/TweetHeader.astro
================
---
import { X as Twitter } from '@icons/X'
import { type EnrichedTweet } from 'react-tweet'

import Image from '@/components/Image'
import { truncate } from '@/lib/utils'

interface Props {
  tweet: EnrichedTweet
}

const { tweet } = Astro.props
---

<div class='flex items-center justify-between'>
  <div class='flex items-center space-x-2'>
    <a href={tweet.user.url} target='_blank' rel='noreferrer'>
      <Image
        alt={tweet.user.screen_name}
        height={48}
        width={48}
        src={tweet.user.profile_image_url_https}
        class='size-10'
        wrapperProps={{
          class:
            'overflow-hidden rounded-full border border-transparent transition-all ease-in-out hover:scale-105 hover:border-zinc-200 hover:shadow-md'
        }}
      />
    </a>
    <div class='space-y-0.5 leading-none'>
      <a
        href={tweet.user.url}
        target='_blank'
        rel='noreferrer'
        class='flex items-center font-medium text-zinc-200'
      >
        {truncate(tweet.user.name, 20)}
        {
          tweet.user.verified || tweet.user.is_blue_verified ? (
            <svg
              aria-hidden='true'
              aria-label='Verified Account'
              class='ml-1 inline h-4 w-4 text-sky-500'
              viewBox='0 0 24 24'
            >
              <g fill='currentColor'>
                <path d='M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z' />
              </g>
            </svg>
          ) : null
        }
      </a>
      <div class='flex items-center space-x-1'>
        <a
          href={tweet.user.url}
          target='_blank'
          rel='noreferrer'
          class='text-sm text-zinc-500 transition-all duration-75 hover:text-zinc-200'
        >
          @{truncate(tweet.user.screen_name, 16)}
        </a>
        <p>·</p>
        <a
          href={tweet.url}
          target='_blank'
          rel='noreferrer'
          class='text-sm text-zinc-500 transition-all duration-75 hover:text-zinc-200'
        >
          {
            new Date(tweet.created_at).toLocaleDateString('en-US', {
              month: 'short',
              day: 'numeric'
            })
          }
        </a>
      </div>
    </div>
  </div>
  <a href={tweet.url} target='_blank' rel='noreferrer'>
    <span class='sr-only'>Link to tweet</span>
    <Twitter
      className='size-6 text-zinc-200 transition-all ease-in-out hover:scale-110 max-xs:hidden'
    />
  </a>
</div>

================
File: components/TweetCard/TweetLink.tsx
================
import React from 'react'

interface Props {
  href: string
  children: React.ReactNode
}

const TweetLink = ({ children, href }: Props) => {
  return (
    <a
      className='font-normal text-[rgb(29,161,242)] no-underline'
      href={href}
      target='_blank'
      rel='noopener noreferrer'
    >
      {children}
    </a>
  )
}

export default TweetLink

================
File: components/TweetCard/TweetMedia.astro
================
---
import { type EnrichedTweet, getMediaUrl, getMp4Video } from 'react-tweet'
import type { MediaDetails } from 'react-tweet/api'

import Image from '@/components/Image'

import TweetVideo from './TweetVideo'

interface Props {
  tweet: EnrichedTweet
  media: MediaDetails
}

const { media, tweet } = Astro.props
---

{
  media.type === 'video' ? (
    <TweetVideo
      src={getMp4Video(media).url}
      poster={getMediaUrl(media, 'small')}
      client:only='react'
    />
  ) : media.type === 'animated_gif' ? (
    <Image
      alt={tweet.text}
      width={2048}
      height={media.original_info.height * (2048 / media.original_info.width)}
      src={getMp4Video(media).url}
      wrapperProps={{
        class: 'rounded-lg border border-zinc-700 drop-shadow-sm'
      }}
    />
  ) : (
    <Image
      alt={tweet.text}
      width={2048}
      height={media.original_info.height * (2048 / media.original_info.width)}
      src={getMediaUrl(media, 'small')}
      wrapperProps={{
        class: 'rounded-lg border border-zinc-700 drop-shadow-sm'
      }}
    />
  )
}

================
File: components/TweetCard/TweetText.tsx
================
import { type EnrichedTweet } from 'react-tweet'

import TweetLink from './TweetLink'

interface Props {
  tweet: EnrichedTweet
}

const TweetText = ({ tweet }: Props) => {
  return (
    <div className='mb-2 mt-4 truncate whitespace-pre-wrap text-[15px] text-zinc-200'>
      {tweet.entities.map((item, i) => {
        switch (item.type) {
          case 'hashtag':
          case 'mention':
          case 'url':
          case 'symbol':
            return (
              <TweetLink key={i} href={item.href}>
                {item.text}
              </TweetLink>
            )
          case 'media':
            return
          default:
            // We use `dangerouslySetInnerHTML` to preserve the text encoding.
            // https://github.com/vercel-labs/react-tweet/issues/29
            return (
              <span key={i} dangerouslySetInnerHTML={{ __html: item.text }} />
            )
        }
      })}
    </div>
  )
}

export default TweetText

================
File: components/TweetCard/TweetVideo.tsx
================
import React from 'react'

import { cn } from '@/lib/utils'

import { Play } from '../icons/Play'

interface Props {
  src: string
  poster?: string
}

const TweetVideo = ({ src, poster }: Props) => {
  const [playButton, setPlayButton] = React.useState(true)

  return (
    <div className='relative'>
      <video
        className='max-h-[640px] rounded-lg border border-zinc-700 drop-shadow-sm'
        height='640px'
        controls={!playButton}
        poster={poster}
        loop
        muted
        playsInline
      >
        <source src={src} type='video/mp4' />
        Your browser does not support the video tag.
      </video>
      {playButton && (
        <button
          type='button'
          aria-label='View video on X'
          className={cn(
            'absolute left-1/2 top-1/2 flex size-14 -translate-x-1/2 -translate-y-1/2',
            'items-center justify-center rounded-full bg-sky-500 p-2.5',
            'border-[2.5px] border-zinc-50'
          )}
          onClick={(e) => {
            const video = e.currentTarget.previousSibling as HTMLMediaElement

            e.preventDefault()
            setPlayButton(false)
            video.play()
            video.focus()
          }}
        >
          <Play className='size-full text-zinc-50' />
        </button>
      )}
    </div>
  )
}

export default TweetVideo

================
File: components/ui/button.tsx
================
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import * as React from 'react'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-slate-950 dark:focus-visible:ring-slate-300',
  {
    variants: {
      variant: {
        default:
          'bg-slate-900 text-slate-50 hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90',
        destructive:
          'bg-red-500 text-slate-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90',
        outline:
          'border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50',
        secondary:
          'bg-slate-100 text-slate-900 hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80',
        ghost:
          'hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50',
        link: 'text-slate-900 underline-offset-4 hover:underline dark:text-slate-50'
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

================
File: components/ui/dock.tsx
================
import { motion, useMotionValue, useSpring, useTransform } from 'framer-motion'
import React, { type PropsWithChildren, useRef } from 'react'

import { cn } from '@/lib/utils'

export interface DockProps {
  className?: string
  magnification?: number
  distance?: number
  direction?: 'top' | 'middle' | 'bottom'
  children: React.ReactNode
}

const DEFAULT_MAGNIFICATION = 60
const DEFAULT_DISTANCE = 140

const Dock = React.forwardRef<HTMLUListElement, DockProps>(
  (
    {
      className,
      children,
      magnification = DEFAULT_MAGNIFICATION,
      distance = DEFAULT_DISTANCE,
      direction = 'bottom',
      ...props
    },
    ref
  ) => {
    const mouseX = useMotionValue(Infinity)
    const mouseY = useRef(0)

    const renderChildren = () => {
      return React.Children.map(children, (child: any) => {
        return React.cloneElement(child, {
          mouseX: mouseX,
          magnification: magnification,
          distance: distance
        })
      })
    }

    return (
      <motion.ul
        ref={ref}
        onMouseMove={(e) => {
          mouseX.set(e.pageX)
          mouseY.current = e.pageY
        }}
        onMouseLeave={(e) => {
          if (mouseX.get() !== e.pageX || mouseY.current !== e.pageY)
            return mouseX.set(Infinity)

          const mouseEventHandler = (e: MouseEvent) => {
            // compare the current y value with the previous y value
            if (Math.abs(mouseY.current - e.pageY) > 20) {
              // if the difference is greater than 20 then set the mouseX value to infinity and remove the mousemove event listener
              mouseX.set(Infinity)
              document.removeEventListener('mousemove', mouseEventHandler)
            }
          }
          document.addEventListener('mousemove', mouseEventHandler)
        }}
        {...props}
        className={cn(
          'supports-backdrop-blur:bg-black/10 mx-auto flex h-[58px] w-max rounded-full border border-shark-950 bg-black/75 p-2 backdrop-blur-lg',
          {
            'items-start': direction === 'top',
            'items-center': direction === 'middle',
            'items-end': direction === 'bottom'
          },
          className
        )}
      >
        {renderChildren()}
      </motion.ul>
    )
  }
)

Dock.displayName = 'Dock'

export interface DockIconProps
  extends Pick<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'aria-label'> {
  size?: number
  magnification?: number
  distance?: number
  mouseX?: any
  className?: string
  children?: React.ReactNode
  props?: PropsWithChildren
  href?: string
  onClick?: () => void
}

const DockIcon = ({
  size,
  magnification = DEFAULT_MAGNIFICATION,
  distance = DEFAULT_DISTANCE,
  mouseX,
  className,
  children,
  ...props
}: DockIconProps) => {
  const ref = useRef<HTMLAnchorElement>(null)

  const distanceCalc = useTransform(mouseX, (val: number) => {
    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 }

    return val - bounds.x - bounds.width / 2
  })

  let widthSync = useTransform(
    distanceCalc,
    [-distance, 0, distance],
    [48, magnification, 48]
  )

  let width = useSpring(widthSync, {
    mass: 0.1,
    stiffness: 150,
    damping: 12
  })

  const getWidth = () => {
    const isMobile = /Mobi|Android|iPhone/i.test(navigator.userAgent)
    return { width: isMobile ? '48px' : width }
  }

  return (
    <li>
      <motion.a
        ref={ref}
        style={getWidth()}
        className={cn(
          'flex aspect-square cursor-pointer items-center justify-center rounded-full',
          className
        )}
        {...props}
      >
        {children}
      </motion.a>
    </li>
  )
}

DockIcon.displayName = 'DockIcon'

export { Dock, DockIcon }

================
File: components/ui/marquee.tsx
================
import { cn } from '@/lib/utils'

interface MarqueeProps {
  className?: string
  reverse?: boolean
  pauseOnHover?: boolean
  children?: React.ReactNode
  vertical?: boolean
  repeat?: number
  [key: string]: any
}

export default function Marquee({
  className,
  reverse,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: Readonly<MarqueeProps>) {
  return (
    <div
      {...props}
      className={cn(
        'group flex overflow-hidden p-2 [--duration:40s] [--gap:2rem] [gap:var(--gap)]',
        {
          'flex-row': !vertical,
          'flex-col': vertical
        },
        className
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn(
              'flex shrink-0 justify-around [gap:var(--gap)] motion-reduce:animate-none',
              {
                'animate-marquee flex-row': !vertical,
                'animate-marquee-vertical flex-col': vertical,
                'group-hover:[animation-play-state:paused]': pauseOnHover,
                '[animation-direction:reverse]': reverse
              }
            )}
          >
            {children}
          </div>
        ))}
    </div>
  )
}

================
File: components/ui/scroll-progress-bar.tsx
================
import { motion, useScroll, useSpring, useTransform } from 'framer-motion'
import React from 'react'

import { cn } from '@/lib/utils'

interface ScrollProgressBarType {
  strokeSize?: number
  targetId?: string
  className?: string
}

const getContainerElement = (id?: string) => {
  if (!id) return null

  return document.getElementById(id)
}

export default function ScrollProgressBar({
  strokeSize = 0,
  targetId,
  className
}: Readonly<ScrollProgressBarType>) {
  const targetRef = React.useRef<HTMLElement | null>(null)

  targetRef.current = getContainerElement(targetId)

  const { scrollYProgress } = useScroll({
    ...(targetRef.current && {
      target: targetRef,
      offset: ['start center', 'end end']
    })
  })

  const widthValue = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001
  })

  const width = useTransform(widthValue, [0, 1], ['0%', '100%'])

  return (
    <motion.span
      className={cn(
        'pointer-events-none fixed end-0 start-0 top-0 z-30',
        'w-0 overflow-clip rounded-full'
      )}
      style={{ height: `${strokeSize + 2}px`, width }}
    >
      <span
        className={cn(
          'absolute block h-full w-screen bg-emerald-400',
          className
        )}
      ></span>
    </motion.span>
  )
}

================
File: components/ui/separator.tsx
================
import * as SeparatorPrimitive from '@radix-ui/react-separator'
import * as React from 'react'

import { cn } from '@/lib/utils'

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-slate-800',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/tooltip/index.ts
================
export { Tooltip } from './tooltip'

================
File: components/ui/tooltip/tooltip-arrow-primitive.tsx
================
import { Arrow } from '@radix-ui/react-tooltip'
import React from 'react'

const TooltipArrowPrimitive = () => {
  const arrowRef = React.useRef<SVGSVGElement>(null)

  React.useEffect(() => {
    const spanArrow = arrowRef.current?.parentElement

    const observer = new MutationObserver(() => {
      if (!spanArrow) return

      const style = getComputedStyle(spanArrow)
      const tooltipArrow = document.getElementById('tooltip-arrow')

      tooltipArrow?.setAttribute('style', `left: ${style.left};`)
    })

    if (spanArrow) {
      observer.observe(spanArrow, {
        attributes: true, // Observe changes to attributes
        attributeFilter: ['style'] // Only look for changes to the style attribute
      })
    }

    return () => {
      observer.disconnect()
    }
  }, [])

  return <Arrow ref={arrowRef} id='primitive-arrow' className='opacity-0' />
}

export default TooltipArrowPrimitive

================
File: components/ui/tooltip/tooltip-arrow.tsx
================
import { type SVGProps } from 'react'

import { cn } from '@/lib/utils'

interface Props extends SVGProps<SVGSVGElement> {}

const TooltipArrow = ({ className, ...rest }: Props) => {
  return (
    <svg
      aria-hidden='true'
      id='tooltip-arrow'
      width='158'
      height='46'
      viewBox='0 0 158 46'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'
      className={cn('absolute h-[9px] w-8', className)}
      {...rest}
    >
      <g clipPath='url(#clip0_2299_746)'>
        <path
          d='M70.9517 36.8028L55.1103 20.9614C47.3837 13.2348 43.5204 9.37145 39.0119 6.60868C35.0148 4.15921 30.657 2.35415 26.0985 1.25976C20.957 0.0253906 15.4935 0.0253906 4.56641 0.0253906H153.132C142.205 0.0253906 136.742 0.0253906 131.6 1.25976C127.042 2.35415 122.684 4.15921 118.687 6.60868C114.178 9.37145 110.315 13.2348 102.588 20.9614L86.7466 36.8028C82.385 41.1645 75.3134 41.1645 70.9517 36.8028Z'
          fill='var(--tooltip-color)'
        />
        <path
          d='M153.132 5.60975C141.939 5.60975 137.253 5.64564 132.904 6.68983C128.915 7.64741 125.102 9.22684 121.605 11.3701C117.791 13.7072 114.452 16.9956 106.537 24.9101L90.6952 40.7516C84.1527 47.294 73.5452 47.294 67.0028 40.7515L51.1613 24.9101C43.2468 16.9956 39.9077 13.7072 36.0939 11.3701C32.5964 9.22684 28.7833 7.64741 24.7947 6.68983C20.4453 5.64564 15.7591 5.60975 4.56623 5.60975H0.667969V0.0253906H4.56623C15.4933 0.0253906 20.9568 0.0253906 26.0983 1.25976C30.6568 2.35415 35.0146 4.15921 39.0117 6.60868C43.5202 9.37145 47.3835 13.2348 55.1101 20.9614L70.9515 36.8028C75.3132 41.1645 82.3848 41.1645 86.7464 36.8028L102.588 20.9614C110.315 13.2348 114.178 9.37145 118.687 6.60868C122.684 4.15921 127.042 2.35415 131.6 1.25976C136.742 0.0253906 142.205 0.0253906 153.132 0.0253906H157.03V5.60975H153.132Z'
          fill='var(--tooltip-border-color)'
        />
      </g>
      <defs>
        <clipPath>
          <rect width='158' height='46' fill='white' />
        </clipPath>
      </defs>
    </svg>
  )
}

export default TooltipArrow

================
File: components/ui/tooltip/tooltip.tsx
================
// Tremor Tooltip [v0.0.2]

import * as TooltipPrimitives from '@radix-ui/react-tooltip'
import Markdown from 'markdown-to-jsx'
import React from 'react'

import { cn } from '@/lib/utils'

import TooltipArrow from './tooltip-arrow'
import TooltipArrowPrimitive from './tooltip-arrow-primitive'

interface TooltipProps
  extends Omit<TooltipPrimitives.TooltipContentProps, 'content' | 'onClick'>,
    Pick<
      TooltipPrimitives.TooltipProps,
      'open' | 'defaultOpen' | 'onOpenChange' | 'delayDuration'
    > {
  content: React.ReactNode
  onClick?: React.MouseEventHandler<HTMLButtonElement>
  side?: 'bottom' | 'left' | 'top' | 'right'
  showArrow?: boolean
  triggerAsChild?: boolean
  isMarkdownContent?: boolean
  withUnderline?: boolean
}

type TooltipContentProps = Omit<
  TooltipProps,
  | 'content'
  | 'delayDuration'
  | 'defaultOpen'
  | 'open'
  | 'onClick'
  | 'onOpenChange'
  | 'triggerAsChild'
>

type TooltipProviderProps = Pick<
  TooltipProps,
  'open' | 'defaultOpen' | 'onOpenChange' | 'delayDuration' | 'children'
>

const TooltipProvider = ({
  children,
  delayDuration = 150,
  ...restProps
}: TooltipProviderProps) => {
  return (
    <TooltipPrimitives.Provider delayDuration={delayDuration}>
      <TooltipPrimitives.Root
        tremor-id='tremor-raw'
        delayDuration={delayDuration}
        {...restProps}
      >
        {children}
      </TooltipPrimitives.Root>
    </TooltipPrimitives.Provider>
  )
}
const TooltipTrigger = TooltipPrimitives.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitives.Content>,
  TooltipContentProps
>((props, forwardedRef) => {
  const {
    children,
    showArrow = true,
    sideOffset = 12,
    className,
    ...restProps
  } = props

  return (
    <TooltipPrimitives.Portal>
      <TooltipPrimitives.Content
        ref={forwardedRef}
        align='center'
        className={cn(
          // base
          'max-w-96 select-none rounded-lg px-4 py-2 text-[0.9rem] leading-relaxed tracking-wide shadow-md',
          // text color
          'text-zinc-400',
          // background color
          'bg-[var(--tooltip-color)]',
          // transition
          'will-change-[transform,opacity]',
          'data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade data-[state=closed]:animate-hide',
          // other
          'z-50 border border-[var(--tooltip-border-color)]',
          'tooltip-content',
          className
        )}
        sideOffset={sideOffset}
        {...restProps}
      >
        {children}
        {showArrow && (
          <>
            <TooltipArrowPrimitive />
            <TooltipArrow aria-hidden='true' />
          </>
        )}
      </TooltipPrimitives.Content>
    </TooltipPrimitives.Portal>
  )
})

/**
 * simply use this component if the tooltip content is simple
 * and doesn't need any additional configuration
 */
const Tooltip = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitives.Content>,
  TooltipProps
>(
  (
    {
      children,
      content,
      delayDuration,
      defaultOpen,
      open,
      onClick,
      onOpenChange,
      triggerAsChild = false,
      isMarkdownContent = false,
      withUnderline,
      ...props
    }: TooltipProps,
    forwardedRef
  ) => {
    return (
      <TooltipProvider
        open={open}
        defaultOpen={defaultOpen}
        onOpenChange={onOpenChange}
        delayDuration={delayDuration}
      >
        <TooltipTrigger onClick={onClick} asChild={triggerAsChild}>
          {withUnderline ? (
            <span className='underline decoration-zinc-600 decoration-dashed underline-offset-2'>
              {children}
            </span>
          ) : (
            children
          )}
        </TooltipTrigger>
        <TooltipContent ref={forwardedRef} {...props}>
          {isMarkdownContent ? (
            <Markdown
              options={{
                overrides: {
                  a: {
                    props: {
                      className: 'text-emerald-400 hover:underline',
                      target: '_blank'
                    }
                  }
                }
              }}
            >
              {content as string}
            </Markdown>
          ) : (
            content
          )}
        </TooltipContent>
      </TooltipProvider>
    )
  }
)

Tooltip.displayName = 'Tooltip'

export {
  Tooltip,
  TooltipContent,
  type TooltipProps,
  TooltipProvider,
  TooltipTrigger
}

================
File: components/Video/index.ts
================
export { default } from './Video'

================
File: components/Video/Video.tsx
================
import React from 'react'

import { Play } from '../icons/Play'

interface Props extends React.VideoHTMLAttributes<HTMLVideoElement> {}

const Video = ({ src, ...props }: Props) => {
  const [playButton, setPlayButton] = React.useState(true)

  const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    const video = e.currentTarget.previousSibling as HTMLMediaElement

    e.preventDefault()
    setPlayButton(false)
    video.play()
    video.focus()
  }

  return (
    <div className='relative'>
      <video {...props} controls={!playButton}>
        <source src={src} type='video/mp4' />
        Your browser does not support the video tag.
      </video>
      {playButton && (
        <button
          type='button'
          aria-label='Play video'
          className='absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2'
          onClick={handleClick}
        >
          <Play className='size-16' />
        </button>
      )}
    </div>
  )
}

export default Video

================
File: content.config.ts
================
import { glob } from 'astro/loaders'
import { defineCollection, z } from 'astro:content'

import { iconSchema } from './content/_icons'

export const blog = defineCollection({
  loader: glob({ pattern: '**/[^_]*.mdx', base: './src/content/blog' }),
  schema: () =>
    z.object({
      title: z.string(),
      description: z.string(),
      heroImage: z.string(),
      tags: z.array(z.string()).optional().default([]),
      pubDate: z.coerce.date(),
      updatedDate: z.coerce.date().optional(),
      readingTime: z.number().optional(),
      wordsCount: z.number().optional(),
      latestCommitUrl: z.string().optional()
    })
})

export const projects = defineCollection({
  loader: glob({ pattern: '**/[^_]*.mdx', base: './src/content/projects' }),
  schema: ({ image }) =>
    z
      .object({
        year: z.number(),
        title: z.string(),
        htmlTitle: z.string().optional(),
        description: z.string(),
        heroImage: image(),
        heroImageAlign: z.enum(['top', 'center']).default('top'),
        links: z
          .array(
            z.object({
              icon: iconSchema,
              name: z.string(),
              url: z.string()
            })
          )
          .optional()
          .default([]),
        readingTime: z.number().optional(),
        wordsCount: z.number().optional(),
        updatedDate: z.coerce.date().optional(),
        latestCommitUrl: z.string().optional()
      })
      .transform((data) => ({
        ...data,
        htmlTitle: data.htmlTitle || data.title
      }))
})

export const collections = {
  blog,
  projects
}

================
File: content/_icons.ts
================
import { GithubOutline as Github } from '@icons/GithubOutline'
import { Globe as Web } from '@icons/Globe'
import { Telegram } from '@icons/Telegram'
import { z } from 'astro:content'

export const PROJECT_ICONS = { Github, Web, Telegram }

// this is workaround since we can't pass ICONS directly to z.enum
const keys = Object.keys(PROJECT_ICONS)
export const iconSchema = z.enum([keys[0], ...keys.slice(1)])

export type ProjectIcon = keyof typeof PROJECT_ICONS

================
File: content/blog/customize-shadcn-tooltip-arrows.mdx
================
---
title: Hacky Way to Customize Shadcn’s Tooltip Arrows
description: A workaround for displaying a custom SVG arrow in shadcn’s tooltip.
heroImage: https://images.unsplash.com/photo-1542587073-deebd77c2d73?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
pubDate: 2024-12-15
tags:
  - react
  - css
---

## Introduction

[Shadcn](https://ui.shadcn.com/) is a go-to library for copy-paste UI components in React projects. One commonly used component is the Tooltip, which is built on top of `@radix-ui/react-tooltip` .

The default tooltip looks like this:

![Shadcn's tooltip component](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183408/Tooltip_Arrows_Customization_Image_iedgjs.webp)

## Adding Tooltip Arrows

While the provided component works well out of the box, I found myself wanting to add more customization—like adding an arrow to the tooltip. For inspiration, I turned to the Tooltip component from [tremor.so](https://tremor.so/docs/ui/tooltip), which is also based on `@radix-ui/react-tooltip`.

![Tooltip component from tremor.so](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183406/Shadcn_Tooltip_Arrows_Image_o8gzwv.webp)

Fortunately, adding an arrow is straightforward since `@radix-ui/react-tooltip` includes an `Arrow` component. You simply need to include it inside the `Content` component.

```tsx
import * as TooltipPrimitives from '@radix-ui/react-tooltip'

export default () => (
  <TooltipPrimitives.Provider>
    <TooltipPrimitives.Root>
      <TooltipPrimitives.Trigger />
      <TooltipPrimitives.Portal>
        <TooltipPrimitives.Content>
          <TooltipPrimitives.Arrow /> // Add the Arrow component here
        </TooltipPrimitives.Content>
      </TooltipPrimitives.Portal>
    </TooltipPrimitives.Root>
  </TooltipPrimitives.Provider>
)
```

> _However, what if you want to add a border around the entire tooltip, including the arrow?_

## Adding a Tooltip Border

To achieve this, you’ll need to style the `Arrow` component. Let’s explore some approaches:

### Naive Approach

Adding a `border` directly to the `Arrow` using Tailwind classes seems like a good starting point:

```jsx
<TooltipPrimitives.Arrow
  className='border border-[var(--tooltip-border-color)] fill-[var(--tooltip-color)]'
  width={12}
  height={7}
  aria-hidden='true'
/>
```

However, this approach doesn’t work as expected. The `border` property applies to the rectangular boundary of the element, not the arrow shape itself.

![Tooltip arrow with square border](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183406/Tooltip_Arrows_Customization_Image_1_mikon1.webp)

### Using the `stroke` Property

Since the `Arrow` is an SVG element, you can use the `stroke` property to define a border:

```jsx
<TooltipPrimitives.Arrow
  className='border-none fill-[var(--tooltip-color)]'
  stroke='var(--tooltip-border-color)'
  stroke-width='2'
  width={12}
  height={7}
  aria-hidden='true'
/>
```

This works better, but the arrow’s top border is still visible. To fix this, let’s explore another method.

![Tooltip arrow with a proper border but visible top border](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183405/Tooltip_Arrows_Customization_u4t1ec.png)

### **Exploring the Drop Shadow Option**

Another method is using a `drop-shadow` to simulate the border:

```jsx
<TooltipPrimitives.Arrow
  className='-my-px border-none fill-[var(--tooltip-color)] drop-shadow-[0_1px_0_red]'
  width={12}
  height={7}
  aria-hidden='true'
/>
```

This creates a visually seamless tooltip with an arrow and border, but it might not always be the most precise solution depending on your use case.

![Tooltip arrow with proper border](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183404/Shadcn_Tooltip_Arrows_Image_1_eojqrs.webp)

It’s worth mentioning that this solution is inspired by the Tooltip component from [Origin UI](https://originui.com/), which provides various customizable tooltip variants that can save development time.

> _How about styling it even more, like using my own custom SVG?_

## Custom SVG Arrow

I often visit Vercel’s website, and their dropdown navigation bar caught my eye, particularly the _arrow_.

![Expanded dropdown navigation bar from Vercel](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183409/Tooltip_Arrows_Customization_Image_2_tu7wfm.webp)

Curious about how it was designed, I opened the dev tools, inspected the elements, and found the SVG arrow. I then copied it and pasted it into Figma for a closer look.

![SVG arrow from Vercel's dropdown navigation bar](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183407/Tooltip_Arrows_Customization_Image_3_mehrdd.webp)

I thought it could be an interesting design choice for a tooltip arrow.

### Positioning

![Tooltip's position](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183405/Shadcn_Tooltip_Arrows_Image_2_lwivup.webp)

Positioning the SVG arrow depends on the tooltip’s placement—**top**, **bottom**, **left**, or **right**. The `Content` component exposes a `data-side` attribute, which you can use to adjust positioning dynamically:

```css
[data-side='top'] svg {
  bottom: -9px;
  left: 50%;
  transform: translateX(-50%);
}

[data-side='bottom'] svg {
  top: -9px;
  left: 50%;
  transform: translateX(-50%) rotate(180deg);
}

[data-side='left'] svg {
  right: -20.25px;
  top: 50%;
  transform: translateY(-50%) rotate(-90deg);
}

[data-side='right'] svg {
  left: -20.25px;
  top: 50%;
  transform: translateY(-50%) rotate(90deg);
}
```

Next, we could replace the built-in tooltip `Arrow` component with our custom design. It should work perfectly, right?

![Tooltip with custom SVG arrow](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183408/Tooltip_Arrows_Customization_Image_4_j7v925.webp)

Well, not quite yet. Take a look at this: the arrow is stuck in the center of the tooltip instead of being positioned near the trigger.

![Custom SVG arrow centered on the tooltip](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734226077/Screen_Recording_Dec_14_2024_from_Shadcn_Tooltip_Arrows_y2aokg.gif)

This undesired behavior happens because we only defined a static position for each side. Instead, we need to use a dynamic position to solve this issue.

### Dynamic Position

Let’s start by using the built-in `Arrow` component again. If you inspect the `Arrow` component in the dev tools while simulating the tooltip position change, you’ll notice that the SVG element is wrapped in a `span` with a `left` CSS property.

![Dynamic left CSS value of the built-in tooltip arrow](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183404/Customize_Shadcn_Tooltip_Arrows_ywmi3y.webp)

This value dynamically changes based on the tooltip's position. We can capture this `left` CSS value and apply it to our custom arrow component.

To track this `left` value, we need to observe it using a [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver).

```tsx
// tooltip-arrow-primitive.tsx

import { Arrow } from '@radix-ui/react-tooltip'
import React from 'react'

const TooltipArrowPrimitive = () => {
  const arrowRef = React.useRef<SVGSVGElement>(null)

  React.useEffect(() => {
    const spanArrow = arrowRef.current?.parentElement

    const observer = new MutationObserver(() => {
      if (!spanArrow) return

      const style = window.getComputedStyle(spanArrow)

      // Get our custom tooltip component by its id
      const tooltipArrow = document.getElementById('tooltip-arrow')

      // Assign the left value as the style attribute
      tooltipArrow?.setAttribute('style', `left: ${style.left};`)
    })

    if (spanArrow) {
      observer.observe(spanArrow, {
        attributes: true, // Observe changes to attributes
        attributeFilter: ['style'] // Only look for changes to the style attribute
      })
    }

    return () => {
      observer.disconnect()
    }
  }, [])

  return <Arrow ref={arrowRef} id='primitive-arrow' className='opacity-0' />
}

export default TooltipArrowPrimitive
```

Then, we can call it inside the `Content` component.

```tsx
import CustomTooltipArrow from './tooltip-arrow'
import TooltipArrowPrimitive from './tooltip-arrow-primitive'

export default ({ children, showArrow }) => (
  // Adjust each component props as needed
  <TooltipPrimitives.Provider>
    <TooltipPrimitives.Root>
      <TooltipPrimitives.Trigger />
      <TooltipPrimitives.Portal>
        <TooltipPrimitives.Content>
          {children}
          {showArrow && (
            <>
              <TooltipArrowPrimitive />
              <CustomTooltipArrow />
            </>
          )}
        </TooltipPrimitives.Content>
      </TooltipPrimitives.Portal>
    </TooltipPrimitives.Root>
  </TooltipPrimitives.Provider>
)
```

### Final Result

It’s working as expected now 🥳🎉

![Final result](https://res.cloudinary.com/dj1jdtddj/image/upload/v1734183780/Screen_Recording_Dec_14_from_Shadcn_Tooltip_Arrows_quyz7y.gif)

P.S. You might want to adjust the top position if you prefer displaying the tooltip on the left or right side.

## Conclusion

While this approach works, I’m sure there are UI libraries that allow for easier and more flexible tooltip styling. However, it feels rewarding to have found a workaround for this. If you're interested in exploring other options, you might want to check out [this discussion](https://github.com/radix-ui/primitives/discussions/868).

================
File: content/blog/zod-computed-default-value.mdx
================
---
title: Setting Dynamic Default Values with Zod Schema
description: Leverage Zod's powerful features to set dynamic default values and enhance data validation with flexibility and ease.
heroImage: https://images.unsplash.com/photo-1499980762202-04245017d5bf?q=80&w=2520&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
pubDate: 2024-12-12
tags:
  - zod
  - typescript
---

## Introduction

Zod provides a powerful way to define schemas for validating and transforming data. You can easily define default values for properties.

> but what if you need a default value based on another property in the schema?

Let’s explore how to handle that using Zod.

## Simple Default Value

First, let’s see how we can define a simple default value for a property using Zod:

```js
const schema = z.object({
  name: z.string().default('John Doe')
})
```

In this example, the **name** property will have a default value of **'John Doe'** if not supplied during parsing.

## What If the Default Depends on Another Property?

Now, let’s consider a more complex case where the default value of one property depends on another. For instance, imagine we have a blog schema where the `displayedTitle` is the same as the title, but with a line break included for formatting purposes.

Here’s the basic schema:

```js
const blogSchema = z.object({
  title: z.string(),
  displayedTitle: z.string()
})
```

Next, let’s define a `blogData` object:

```js
const blogData = {
  title: 'Bookmarked: Your Go-To Tool for Curating Tweets in Notion',
  displayedTitle: 'Bookmarked: Your Go-To Tool for\nCurating Tweets in Notion'
}

blogSchema.parse(blogData) // parsed successfully and returns blogData
```

In the example above, both `title` and `displayedTitle` are provided. But what if we don’t want to define both `title` and `displayedTitle` manually, especially when they share the same value?

## Conditional Defaults with `transform`

We can make the `displayedTitle` optional and derive it from `title` when necessary. This way, you only need to provide one value, and the other one is computed automatically.

Here’s how to update the schema:

```js
const blogSchema = z
  .object({
    title: z.string(),
    displayedTitle: z.string().optional() // makes displayedTitle optional
  })
  .transform((data) => ({
    ...data,
    displayedTitle: data.displayedTitle || data.title // fallback to title if displayedTitle is undefined
  }))
```

Now, if `displayedTitle` is not provided, it will fall back to using the title property.

For example:

```js
const blogData = {
  title: 'This is the title without linebreak'
}

const parsedData = blogSchema.parse(blogData) // parsed successfully
console.log(parsedData)
// {
//   title: "This is the title without linebreak",
//   displayedTitle: "This is the title without linebreak"
// }
```

As you can see, displayedTitle is derived from title automatically when it's missing.

## Simplifying the Schema with Inferred Values

We can further simplify this by only defining the `displayedTitle`, and having title inferred automatically by transforming the value. For instance, you might want to replace line breaks (\n) in `displayedTitle` with spaces in title:

```js
const blogSchema = z
  .object({
    displayedTitle: z.string()
  })
  .transform((data) => ({
    ...data,
    title: data.displayedTitle.replace('\\n', ' ') // removes the linebreaks from title
  }))

const blogData = {
  displayedTitle: 'This is the title\nwith linebreak'
}

const parsedData = blogSchema.parse(blogData) // parsed successfully
console.log(parsedData)
// {
//   title: "This is the title with linebreak",
//   displayedTitle: "This is the title\nwith linebreak"
// }
```

Here, we’ve reduced the schema to only require displayedTitle, and the title is inferred automatically by removing the \n characters.

## Conclusion

Zod allows you to create flexible schemas that validate data and derive properties based on other values. Its transform method offers an elegant solution for handling default values and derived properties efficiently.

================
File: content/blog/zoom-to-mouse-functionality-in-obs.mdx
================
---
title: Level Up OBS Recordings with Zoom-to-Mouse
description: Enhance your recordings and presentations with dynamic zoom effects.
heroImage: https://images.unsplash.com/photo-1532518171289-5e46a269e127?q=80&w=2952&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D
pubDate: 2025-01-03
tags:
  - other
---

import Video from '@/components/Video'

## Introduction

Want to make your recordings more dynamic and engaging? Check out the video below to see the zoom-to-mouse effect in action

<Video
  src='https://res.cloudinary.com/dj1jdtddj/video/upload/v1735908341/Video_ekj6op.mp4'
  poster='https://res.cloudinary.com/dj1jdtddj/image/upload/v1735906741/4ea8c3d8-7cf9-4c03-9d9e-bb39627a94e3.png'
  client:only='react'
/>

While paid tools like [Screen Studio](https://screen.studio/) offer this capability, what if you could achieve the same effect for free? The good news is that you can, using OBS Studio!

In this guide, I'll walk you through the steps to set up zoom-to-mouse functionality. These instructions have been tested on Windows and Mac, and the process should be quite similar for Linux users.

## 1. Download the Magical Script

To get started, you’ll need to download the script that enables the zoom-to-mouse functionality in OBS Studio

- Open this [link](https://github.com/BlankSourceCode/obs-zoom-to-mouse/releases/tag/v1.0.1).
- In the _Assets_ section, click to download the `obs-zoom-to-mouse.lua` file.

![Download the zoom-to-mouse script from github](https://res.cloudinary.com/dj1jdtddj/image/upload/v1735877527/1_yqel5r.png)

## 2. Set Up Your OBS Screen

Now that you have the script, let’s set up your OBS scene:

- Launch OBS.
- Add a **New Scene** by clicking the **+** button under the _Scenes_ section.
- Next, add a **New Source**:
  - On **Mac**, select `macOS Screen Capture` as the source.
  - On **Windows**, choose `Display Capture` as the source.

Important: Not all sources work with this script, so ensure you pick the right one.

![OBS screen setup](https://res.cloudinary.com/dj1jdtddj/image/upload/v1735877526/2_dfh1kg.webp)

## 3. Setup the zoom to mouse script

Now let’s connect the script to your scene:

- Click **Tools** in the top menu bar.
- Select **Scripts** from the dropdown.
- In the _Scripts_ tab, click the plus icon (+) to add the `obs-zoom-to-mouse.lua` script.
- On the right side, you’ll see configuration options. Choose the **Zoom Source** you created earlier (if you can’t find it, click _Refresh zoom sources_).

You can adjust the configuration to your liking, but to match the result from my video, here’s the setup:

![Zoom to mouse script configuration](https://res.cloudinary.com/dj1jdtddj/image/upload/v1735877527/3_karcfa.webp)

**Tip for Mac Retina Displays**: If you're on a Mac with a retina display, you might experience some weird behavior with zoom-to-mouse. To fix this, check the option for **Set Manual Source Position** and refer to the [issue discussion](https://github.com/BlankSourceCode/obs-zoom-to-mouse/issues/24) for more details.

For a smoother experience on Retina displays, you can adjust the `Scale X` and `Scale Y` to `2`, and make sure to set the `Monitor Width` and `Monitor Height` based on your screen resolution. Here's my configuration for reference:

![Additional configuration for Mac Retina Dipslay](https://res.cloudinary.com/dj1jdtddj/image/upload/v1735877527/4_lpiocl.webp)

## 4. Setup OBS Hotkey

To control the zoom-to-mouse functionality, you’ll need to configure some hotkeys:

- Go to **Settings** in OBS.
- Navigate to the **Hotkeys** section in the left sidebar.
- Search for **Toggle zoom to mouse** and **Toggle follow mouse during zoom**.
- Assign your preferred hotkeys (I recommend `1` and `2` for easy access).

![Hotkey setup](https://res.cloudinary.com/dj1jdtddj/image/upload/v1735877527/5_vzyepk.png)

### Setup Global Hotkeys (Mac Only)

For now the hotkeys are only active when OBS is in focus. If you want to use the hotkeys while working in other applications, you need to set up global hotkeys:

- Enable Accessibility Permissions

  - Open **System Settings**.
  - Navigate to **Privacy & Security** in the sidebar.
  - Click on **Accessibility**.
  - Add OBS to the list of apps that can control your computer.
  - Toggle the switch to enable the app.

- Allow Input Monitoring

  - Back in the **Privacy & Security** tab, select **Input Monitoring**.
  - Add OBS to the list of apps that can monitor input.
  - Toggle the switch to enable the app.

**Please note**: There is a known issue where this configuration may only work for a few hours. If you encounter this, try restarting your computer to restore functionality. You can read more about this issue [here](https://github.com/obsproject/obs-studio/issues/4126#issuecomment-1960956749).

## And That’s It!

Now you're ready to use the zoom-to-mouse functionality in OBS Studio. Simply press '1' to zoom in and out, and '2' to toggle the zoom following your mouse. This feature can help make your tutorials, presentations, or streams more engaging.

================
File: content/projects/bookmarked-android.mdx
================
---
year: 2024
title: 'Bookmarked Android: A Simple Viewer for My Bookmarked Content'
description: 'Built with Jetpack Compose, it aims to offer an improved reading experience on my laggy phone.'
heroImage: '../../assets/project_bookmarked_android.png'
heroImageAlign: 'center'
---

import GithubCard from '@/components/GithubCard.astro'
import TweetCard from '@/components/TweetCard/TweetCard.astro'

## Overview

This project serves as a follow-up to my original Bookmarked project. While it stands independently, feel free to explore the [original project](/projects/bookmarked) for context.

Bookmarked Android is a native Android client designed to view my collection of bookmarked tweets. Built with Jetpack Compose, it focuses on delivering an improved reading experience, making it easier and more enjoyable to revisit saved tweets on my device.

## Goals and Motivation

I rely heavily on Notion for desktop use, but using it on my six-year-old Android phone has always been frustrating due to its sluggish performance—an understandable _limitation given my phone’s age._

Since I often revisit my bookmarked tweets, it felt much more practical to have an efficient way to access them directly on my phone.

I saw two potential solutions:

- Buy a new phone.
- Build my own bookmarked client for my current phone.

While the first option was tempting, my wallet had other plans. During my research, I discovered that Notion is built with React Native. Inspired by this, I decided to get hands-on experience building an app with Jetpack Compose while solving my personal pain point.

## Tech Stack Used

- **Jetpack Compose**: Used as the framework for building the app, providing a modern and declarative UI toolkit for Android.
- **Hono**: A lightweight and fast framework for fetching and parsing data from the Notion API.

## Features

_Nothing too fancy here_—just a simple read-only app with the following features:

- List View: Displays a collection of bookmarked tweets.
- Infinite Scrolling: Seamless loading of tweets as you scroll.
- Filtering: Options to filter by tweets, threads, or tags.
- Full-Text Search: Powered by the Notion API for efficient keyword searches.

## Challenges and How I Dealt with Them

> Parsing JSON data is unbelievably hard

Since this was my first time using Jetpack Compose and Kotlin, I initially struggled with parsing the complex response structure from the Notion API. The deeply nested JSON objects made it difficult to directly fetch and process the data on the client side.

When the frustration peaked, I decided to involve a tool I was more familiar with: JavaScript. I built a lightweight backend using Hono.js to fetch and preprocess data from the Notion API. This backend simplified the JSON structure into a more consumable format, allowing the Android client to handle it with ease.

## Demo

<TweetCard tweetId='1847967261589639599' />
<TweetCard tweetId='1847968430248316939' class='mt-8' />

## Repositories
{/* 
<div className='not-prose space-y-4'>
  <GithubCard owner='andrespaulino' repository='bookmarked-android' />
  <GithubCard owner='andrespaulino' repository='bookmarked-api-hono' />
</div> */}

## Outro

As a JavaScript developer, I still found Kotlin challenging to work with, despite its syntax being somewhat similar to Flutter, which I have experience with. Although the syntax felt familiar, Kotlin's unique concepts and features required a bit of adjustment.

And as expected, the app runs smoothly on my Android phone 🥳.

================
File: content/projects/bookmarked.mdx
================
---
year: 2024
title: 'DocuSign Manager: Enterprise Document Signing Automation'
htmlTitle: 'DocuSign Manager: Enterprise Document\nSigning Automation'
description: 'A full-stack application that streamlines document signing workflows by integrating DocuSign with enterprise systems.'
heroImage: '../../assets/project_bookmarked_1.png'
links:
  - name: 'GitHub'
    icon: 'Github' 
    url: 'https://github.com/andrespaulino/docusign-manager'
---

import { SiFlask, SiPython, SiSqlalchemy } from 'react-icons/si'
import { BsPencilSquare } from 'react-icons/bs'

import GithubCard from '@/components/GithubCard.astro'
import Image from '@/components/Image/Image.astro'
import LinkCard from '@/components/LinkCard.astro'
import { Tooltip } from '@/components/ui/tooltip'

## Overview

DocuSign Manager is an enterprise-grade document signing automation platform that streamlines the process of collecting signatures across complex organizational hierarchies. Built with Flask and the DocuSign eSignature API, it features intelligent signature routing, template management, and comprehensive status tracking. The application supports both web-based management and API integration, making it flexible enough to handle various document signing workflows.

## Goals and Motivation

Document signing in enterprise environments presents unique challenges. Organizations often need to:

- Route documents through specific approval chains
- Handle multiple signers with different roles
- Maintain templates for recurring documents
- Track document status across departments
- Ensure compliance with signing policies

While DocuSign provides powerful APIs, integrating them into enterprise workflows requires careful orchestration. Existing solutions often lack flexibility or require significant manual intervention. DocuSign Manager bridges this gap by providing an intuitive interface for managing complex signing workflows while maintaining security and compliance.

## Technology Stack

### <SiFlask />Flask & Python

Powers the core application with a clean, maintainable architecture:

- **Flask-OpenAPI3**: Provides automatic API documentation and validation
- **Flask-SQLAlchemy**: Handles database operations with proper transaction management
- **Flask-Migrate**: Manages database schema evolution

### <BsPencilSquare />DocuSign Integration

Leverages DocuSign's eSignature API for document processing:

- **JWT Authentication**: Secure authentication flow with consent management
- **Template-based Assembly**: Intelligent document packaging and routing
- **Webhook Processing**: Real-time status updates and document tracking

### <SiSqlalchemy />Database Design

Implements a robust SQL Server schema:

- **Document Templates**: Stores signature field coordinates and rules
- **Signer Management**: Handles complex routing hierarchies
- **Status Tracking**: Maintains comprehensive audit trails

## Key Features

### Template-Based Document Assembly

Save time by creating reusable templates with predefined signature fields. Each template stores precise coordinates for signature placements, making document preparation consistent and error-free.

### Intelligent Signer Routing

Automatically routes documents based on organizational roles and rules:

- Primary signers always sign first
- Joint signers can sign in parallel
- Conditional routing based on document type
- Power of Attorney handling
- Multiple signers per role support

### Real-Time Status Tracking

Monitor document status through multiple channels:

- Web interface for real-time updates
- Webhook integration for system notifications
- Comprehensive audit logging
- Status querying API

### Enterprise Integration

Seamlessly connects with existing systems:

- REST API for programmatic access
- Batch document processing
- Custom authentication support
- Detailed logging and monitoring

## Challenges and Solutions

### JWT Authentication Complexity

DocuSign's JWT authentication flow presented several challenges:

- Managing consent across multiple users
- Handling token refresh
- Securing private keys

We solved this by implementing:

- Automatic consent redirection
- Token caching with refresh
- Secure key storage with rotation

### Template Synchronization

Maintaining template consistency across multiple environments proved challenging:

- Different template IDs per environment
- Varying signature requirements
- Template version control

Our solution involved:

- Template version tracking
- Environment-specific mapping
- Automated template validation

### Signer Resolution

Complex signing hierarchies created interesting problems:

- Multiple signers sharing roles
- Conditional signing requirements
- Order dependencies

We addressed these by:

- Implementing role-based queuing
- Building a flexible rules engine
- Adding signature field distribution logic

## Future Enhancements

### Advanced Analytics

Planning to add comprehensive analytics:

- Signing time analytics
- Bottleneck identification
- Compliance reporting
- Usage patterns analysis

### Mobile Support

Expanding platform accessibility:

- Native mobile apps
- Responsive web interface
- Mobile signature optimization
- Offline capability

### AI Integration

Exploring AI-powered features:

- Automatic template suggestion
- Smart routing optimization
- Anomaly detection
- Process optimization

## Repositories

{/* <div className='not-prose space-y-4'>
  <GithubCard owner='andrespaulino' repository='docusign-manager' />
</div> */}

## Lessons Learned

This project taught valuable lessons about:

- Enterprise integration complexities
- API security best practices
- Scalable webhook processing
- State management in distributed systems

The biggest takeaway was the importance of robust error handling and comprehensive logging in production systems. Every edge case we encountered improved our understanding of enterprise requirements.

================
File: layouts/BaseLayout.astro
================
---
import Analytics from '@vercel/analytics/astro'

import BaseHead from '@/components/BaseHead.astro'
import BottomNavigationBar from '@/components/BottomNavigationBar'
import Footer from '@/components/Footer'
import SEO from '@/components/SEO.astro'

interface Props {
  class?: string
}

const { class: className } = Astro.props
---

<!doctype html>
<html lang='en' class='dark'>
  <head>
    <BaseHead />
    <slot name='head' />
    <slot name='seo'>
      {/* @ts-expect-error: this is expected since it's inside BaseLayout */}
      <SEO />
    </slot>
  </head>
  <body class='flex min-h-screen flex-col items-center bg-zinc-950 text-white'>
    <slot name='decorator' />
    <main
      class:list={[
        'w-full max-w-[1200px] px-12 pb-16 tracking-wide transition-all max-sm:px-4',
        className
      ]}
    >
      <slot />
    </main>
    <Footer />
    <BottomNavigationBar client:only='react' transition:persist='navbar' />
    <Analytics />
  </body>
</html>

<script>
  const scrollOptions: ScrollIntoViewOptions = {
    behavior: 'smooth',
    block: 'start'
  }

  document.addEventListener('astro:page-load', () => {
    // handle hash on initial load
    if (window.location.hash) {
      window.scrollTo({ top: 0, behavior: 'instant' })

      const targetId = window.location.hash.substring(1)
      const targetElement = document.getElementById(targetId)
      targetElement?.scrollIntoView(scrollOptions)
    }

    // handle in page navigation
    document.querySelectorAll('a[href^="#"]').forEach((link) => {
      link.addEventListener('click', (event) => {
        event.preventDefault()

        const currentTarget = event.currentTarget as HTMLAnchorElement
        const targetId = currentTarget.getAttribute('href')?.substring(1) // Get ID without '#'

        if (!targetId) return

        const targetElement = document.getElementById(targetId)
        const block = currentTarget.dataset['block'] as ScrollLogicalPosition
        targetElement?.scrollIntoView({ ...scrollOptions, block })

        // Manually update the URL hash without triggering the default jump
        history.pushState(null, '', `#${targetId}`)
      })
    })

    window.addEventListener('hashchange', () => {
      const targetId = window.location.hash.substring(1)
      const targetElement = document.getElementById(targetId)

      targetElement?.scrollIntoView(scrollOptions)
    })
  })
</script>

================
File: layouts/BlogLayout/BlogLayout.astro
================
---
import { ArrowRight } from '@icons/ArrowRight'
import type { MarkdownHeading } from 'astro'
import type { InferEntrySchema } from 'astro:content'

import BlogInfo from '@/components/BlogInfo.astro'
import { ArrowOutward } from '@/components/icons/ArrowOutward'
import Image from '@/components/Image'
import Link, { LinkArticle } from '@/components/Link'
import SEO from '@/components/SEO.astro'
import TableOfContent from '@/components/TableOfContent'
import ScrollProgressBar from '@/components/ui/scroll-progress-bar'
import { BASE_URL } from '@/lib/baseUrl'
import { formatDateByTimeZone } from '@/lib/utils'

import BaseLayout from '../BaseLayout.astro'

interface Props extends InferEntrySchema<'blog'> {
  headings: MarkdownHeading[]
  id: string
}

const {
  id,
  headings,
  title,
  description,
  heroImage,
  pubDate,
  updatedDate,
  latestCommitUrl,
  tags,
  readingTime
} = Astro.props
---

<BaseLayout class='!max-w-[1024px]'>
  <SEO
    title={title}
    description={description}
    imageUrl={`${BASE_URL}/api/og/${id}`}
    type='article'
    slot='seo'
  />
  <slot name='head' slot='head' />
  <!-- <TopOverlay /> -->
  <ScrollProgressBar
    className='bg-[var(--projectAccentColor)]'
    targetId='article'
    client:only='react'
  />

  <Image
    src={heroImage}
    alt={title}
    title={title}
    align='center'
    wrapperProps={{ class: 'max-w-[928px] lg:mt-12 lg:rounded-md' }}
    class='aspect-[2.5] w-full xs:aspect-[3.25]'
    inferSize
    ambientMode
    slot='decorator'
  />

  <section class='mt-8 sm:font-light'>
    <BlogInfo pubDate={pubDate} readingTime={readingTime} />
    <h1
      class='font-heading mt-4 text-[clamp(1.8rem,5vw,2rem)] font-semibold leading-[1.25] !-tracking-[0.01em] md:leading-[1.1]'
    >
      {title}
    </h1>
    <h3 class='mt-2 text-zinc-400 max-sm:text-sm'>
      {description}
    </h3>
    <ul class='mt-8 flex flex-wrap gap-2'>
      {
        tags.map((item) => (
          <li class='rounded bg-zinc-900 px-2 py-1 font-mono text-xs tracking-tight text-zinc-500'>
            {item}
          </li>
        ))
      }
    </ul>
  </section>

  <div
    class='mt-8 h-[1px] w-full bg-gradient-to-r from-zinc-900 via-zinc-800 to-zinc-900'
  >
  </div>

  <section class='mt-8 flex w-full gap-16'>
    <article
      id='article'
      class:list={[
        'prose prose-invert min-w-0 max-w-none max-sm:prose-sm',
        'prose-headings:font-display prose-headings:scroll-m-16 sm:prose-headings:scroll-m-24',
        'prose-a:article-link prose-a:text-[var(--projectAccentColor)]'
      ]}
    >
      <slot />
      {
        updatedDate && (
          <p class='!mt-8 text-zinc-500'>
            Last updated on {formatDateByTimeZone(updatedDate)} UTC+7.
            {latestCommitUrl && (
              <LinkArticle href={latestCommitUrl}>
                See Changelog{''}
                <ArrowOutward className='inline-block size-3 ml-1' />
              </LinkArticle>
            )}
          </p>
        )
      }
    </article>

    <aside class='w-60 shrink-0 space-y-8 max-lg:hidden'>
      <TableOfContent headings={headings} className='sticky top-32' />
    </aside>
  </section>

  <section class='mt-16'>
    <Link
      href='/blog'
      class='!text-zinc-200 !no-underline'
      styled
      hoverStyled
      hoverEffectOffsetStart='24px'
    >
      <ArrowRight className='mr-2 inline-block size-4 -scale-x-100' />Explore
      more articles</Link
    >
  </section>
</BaseLayout>

<style is:global define:vars={{ projectAccentColor: '#2dd4bf' }}>
  * {
    --projectAccentColor: theme(colors.zinc.200);
  }

  .article-heading > a {
    font-weight: 600;
    text-decoration: none;
    text-underline-offset: 0px;
    transition: all 150ms ease-in-out;
  }

  @media (max-width: 480px) {
    .article-heading > a {
      font-weight: 700;
    }
  }

  .article-heading > a:hover {
    text-decoration: underline !important;
    text-underline-offset: 2px !important;
  }

  .article-heading > a::after {
    content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 16 16'%3E%3Cpath fill='gray' fill-rule='evenodd' d='M7.238 2.634a.75.75 0 1 0-1.476-.268L5.283 5H3a.75.75 0 1 0 0 1.5h2.01l-.545 3H2A.75.75 0 1 0 2 11h2.192l-.43 2.366a.75.75 0 1 0 1.476.268L5.717 11h3.475l-.43 2.366a.75.75 0 1 0 1.476.268L10.717 11H13a.75.75 0 0 0 0-1.5h-2.01l.545-3H14A.75.75 0 0 0 14 5h-2.192l.43-2.366a.75.75 0 1 0-1.476-.268L10.283 5H6.808zM9.465 9.5l.545-3H6.535l-.545 3z' clip-rule='evenodd'/%3E%3C/svg%3E");
    display: inline-block;
    margin-left: 4px;
    height: 18px;
    vertical-align: text-top;

    transition: all 300ms ease-in-out;
    opacity: 0;
    margin-top: 6px;
  }

  .article-heading > a:hover::after {
    opacity: 1;
    margin-top: 2px;
  }

  .article-heading > a > svg {
    transition: all 200ms ease-in-out;
  }

  .article-heading > a:hover > svg {
    transform: scale(1.2);
  }

  h2 > a > svg,
  h3 > a > svg,
  h4 > a > svg {
    @apply mr-2.5 mt-[3px] inline-block size-[18px] align-text-top;
  }
</style>

<script>
  const handleHeadingIntersection = () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -85% 0px', // Adjust to make the top 20% of the viewport observe entries
      threshold: 0 // Trigger as soon as they enter the viewport
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return

        const id = entry.target.getAttribute('id')
        const link = document.querySelector(`li > a[href="#${id}"]`)
        const textStyle = 'text-zinc-300'

        document
          .querySelectorAll(`.${textStyle}`)
          .forEach((item) => item.classList.remove(textStyle))

        link?.classList.add(textStyle)
      })
    }, observerOptions)

    document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>

================
File: layouts/BlogLayout/index.ts
================
export { default } from './BlogLayout.astro'

================
File: layouts/components/Links.astro
================
---
import type { InferEntrySchema } from 'astro:content'

import Link from '@/components/Link'
import { PROJECT_ICONS, type ProjectIcon } from '@/content/_icons'

interface Props {
  links: InferEntrySchema<'projects'>['links']
}

const { links } = Astro.props
---

<ul class='flex flex-wrap gap-2 sm:gap-4'>
  {
    links.map(({ icon, url, name }) => {
      const Icon = PROJECT_ICONS[icon as ProjectIcon]
      return (
        <li>
          <Link
            href={url}
            target='_blank'
            class:list={[
              'flex items-center gap-2 rounded-lg text-sm text-zinc-300/85 max-sm:text-xs',
              'border border-zinc-800 px-3 py-1.5 transition-all duration-200',
              'bg-gradient-to-t from-zinc-800/50 to-zinc-800/0',
              'hover:border-zinc-700 hover:from-zinc-800 hover:text-zinc-300'
            ]}
          >
            <Icon className='size-3' /> {name}
          </Link>
        </li>
      )
    })
  }
</ul>

================
File: layouts/ProjectLayout/index.ts
================
export { default } from './ProjectLayout.astro'

================
File: layouts/ProjectLayout/ProjectLayout.astro
================
---
import { ArrowOutward } from '@icons/ArrowOutward'
import { ArrowRight } from '@icons/ArrowRight'
import type { MarkdownHeading } from 'astro'
import type { InferEntrySchema } from 'astro:content'

import Image from '@/components/Image'
import Link, { LinkArticle } from '@/components/Link'
import SEO from '@/components/SEO.astro'
import TableOfContent from '@/components/TableOfContent'
import TopOverlay from '@/components/TopOverlay.astro'
import ScrollProgressBar from '@/components/ui/scroll-progress-bar'
import { BASE_URL } from '@/lib/baseUrl'
import { formatDateByTimeZone } from '@/lib/utils'

import BaseLayout from '../BaseLayout.astro'
import Links from '../components/Links.astro'

interface Props extends InferEntrySchema<'projects'> {
  headings: MarkdownHeading[]
  slug: string
}

const {
  year,
  description,
  heroImage,
  heroImageAlign,
  title,
  htmlTitle: _htmlTitle,
  headings,
  slug,
  updatedDate,
  latestCommitUrl,
  links
} = Astro.props

const htmlTitle = _htmlTitle.replace(
  '\\n',
  "<br class='max-md:hidden' /><span class='md:hidden'>&nbsp;</span>"
)
---

<BaseLayout class='!max-w-[1024px]'>
  <SEO
    title={title}
    description={description}
    imageUrl={`${BASE_URL}/api/og/${slug}`}
    type='article'
    slot='seo'
  />
  <slot name='head' slot='head' />
  <TopOverlay />
  <ScrollProgressBar
    className='bg-[var(--projectAccentColor)]'
    targetId='article'
    client:only='react'
  />

  <section class='mt-16 sm:mt-24 sm:font-light lg:mt-32'>
    <h2 class='text-zinc-400 sm:text-lg'>
      {year}
    </h2>
    <h1
      class='font-heading mt-4 text-[clamp(1.8rem,5vw,2.5rem)] font-bold leading-[1.25] sm:mt-6 md:leading-[1.1]'
      set:html={htmlTitle}
    />
    <h3 class='mt-4 text-zinc-400 max-sm:text-sm'>
      {description}
    </h3>
    {
      links.length > 0 && (
        <div class='mt-4 flex gap-4 max-sm:flex-col-reverse sm:mt-6 sm:items-center sm:justify-between'>
          <Links links={links} />
        </div>
      )
    }
  </section>

  <Image
    src={heroImage}
    alt={title}
    title={title}
    align={heroImageAlign}
    wrapperProps={{ class: 'rounded-lg mt-8 sm:mt-12' }}
    class='aspect-[1.5] w-full xs:aspect-[2]'
    ambientMode
  />

  <section class='mt-8 flex w-full gap-16 sm:mt-16'>
    <article
      id='article'
      class:list={[
        'prose prose-invert max-w-none max-sm:prose-sm',
        'prose-headings:font-display prose-headings:scroll-m-16 sm:prose-headings:scroll-m-24',
        'prose-a:article-link prose-a:text-[var(--projectAccentColor)]'
      ]}
    >
      <slot />
      {
        updatedDate && (
          <p class='!mt-8 text-zinc-500'>
            Last updated on {formatDateByTimeZone(updatedDate)} UTC+7.
            {latestCommitUrl && (
              <LinkArticle href={latestCommitUrl}>
                See Changelog{''}
                <ArrowOutward className='inline-block size-3 ml-1' />
              </LinkArticle>
            )}
          </p>
        )
      }
    </article>

    <aside class='w-60 shrink-0 space-y-8 max-lg:hidden'>
      <TableOfContent headings={headings} className='sticky top-32' />
    </aside>
  </section>

  <section class='mt-16'>
    <!-- <div class='mb-12 grid gap-6 max-lg:mx-auto md:grid-cols-2'>
      <MoreProjectCard {...Astro.props} />
      <MoreProjectCard {...Astro.props} />
    </div> -->
    <Link
      href='/projects'
      class='!text-zinc-200 !no-underline'
      styled
      hoverStyled
      hoverEffectOffsetStart='24px'
    >
      <ArrowRight className='mr-2 inline-block size-4 -scale-x-100' />Explore
      more projects</Link
    >
  </section>
</BaseLayout>

<style is:global define:vars={{ projectAccentColor: '#2dd4bf' }}>
  * {
    --projectAccentColor: theme(colors.zinc.200);
  }

  .article-heading > a {
    font-weight: 600;
    text-decoration: none;
    text-underline-offset: 0px;
    transition: all 150ms ease-in-out;
  }

  @media (max-width: 480px) {
    .article-heading > a {
      font-weight: 700;
    }
  }

  .article-heading > a:hover {
    text-decoration: underline !important;
    text-underline-offset: 2px !important;
  }

  .article-heading > a::after {
    content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 16 16'%3E%3Cpath fill='gray' fill-rule='evenodd' d='M7.238 2.634a.75.75 0 1 0-1.476-.268L5.283 5H3a.75.75 0 1 0 0 1.5h2.01l-.545 3H2A.75.75 0 1 0 2 11h2.192l-.43 2.366a.75.75 0 1 0 1.476.268L5.717 11h3.475l-.43 2.366a.75.75 0 1 0 1.476.268L10.717 11H13a.75.75 0 0 0 0-1.5h-2.01l.545-3H14A.75.75 0 0 0 14 5h-2.192l.43-2.366a.75.75 0 1 0-1.476-.268L10.283 5H6.808zM9.465 9.5l.545-3H6.535l-.545 3z' clip-rule='evenodd'/%3E%3C/svg%3E");
    display: inline-block;
    margin-left: 4px;
    height: 18px;
    vertical-align: text-top;

    transition: all 300ms ease-in-out;
    opacity: 0;
    margin-top: 6px;
  }

  .article-heading > a:hover::after {
    opacity: 1;
    margin-top: 2px;
  }

  .article-heading > a > svg {
    transition: all 200ms ease-in-out;
  }

  .article-heading > a:hover > svg {
    transform: scale(1.2);
  }

  h2 > a > svg,
  h3 > a > svg,
  h4 > a > svg {
    @apply mr-2.5 mt-[3px] inline-block size-[18px] align-text-top;
  }
</style>

<script>
  const handleHeadingIntersection = () => {
    const observerOptions: IntersectionObserverInit = {
      root: null,
      rootMargin: '0px 0px -85% 0px', // Adjust to make the top 20% of the viewport observe entries
      threshold: 0 // Trigger as soon as they enter the viewport
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return

        const id = entry.target.getAttribute('id')
        const link = document.querySelector(`li > a[href="#${id}"]`)
        const textStyle = 'text-zinc-300'

        document
          .querySelectorAll(`.${textStyle}`)
          .forEach((item) => item.classList.remove(textStyle))

        link?.classList.add(textStyle)
      })
    }, observerOptions)

    document.querySelectorAll('h2[id], h3[id], h4[id]').forEach((heading) => {
      observer.observe(heading)
    })
  }

  document.addEventListener('astro:page-load', handleHeadingIntersection)
</script>

================
File: lib/baseUrl.ts
================
import {
  PUBLIC_VERCEL_ENV,
  PUBLIC_VERCEL_PROJECT_PRODUCTION_URL,
  PUBLIC_VERCEL_URL
} from 'astro:env/client'

const url =
  PUBLIC_VERCEL_ENV === 'production'
    ? PUBLIC_VERCEL_PROJECT_PRODUCTION_URL
    : PUBLIC_VERCEL_URL

export const BASE_URL = url ? `https://${url}` : 'http://localhost:4321'

================
File: lib/client.ts
================
import { hc } from 'hono/client'

import type { APIType } from '@/pages/api/[...path]'

import { BASE_URL } from './baseUrl'

const client = hc<APIType>(BASE_URL)

export default client

================
File: lib/customTransition.ts
================
import type {
  TransitionAnimation,
  TransitionAnimationPair,
  TransitionDirectionalAnimations
} from 'astro'

const duration = 0.45

const getDuration = (duration: number) => `${duration.toString()}s`

const enterAnimation: TransitionAnimation = {
  name: 'fade-in-bottom',
  easing: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',
  duration: getDuration(duration)
}

const exitAnimation: TransitionAnimation = {
  name: 'text-blur-out',
  easing: 'cubic-bezier(0.550, 0.085, 0.680, 0.530)',
  duration: getDuration(duration)
}

const getAnimationPair = (delay?: number): TransitionAnimationPair => {
  return {
    new: { ...enterAnimation, delay: getDuration(duration + (delay ?? 0)) },
    old: { ...exitAnimation, delay: getDuration(delay ?? 0) }
  }
}

export const getCustomTransition = (
  delay?: number
): TransitionDirectionalAnimations => {
  return {
    backwards: getAnimationPair(delay),
    forwards: getAnimationPair(delay)
  }
}

================
File: lib/graphql.ts
================
import { gql } from 'graphql-request'

export const GetGithubContributions = gql`
  query ($userName: String!) {
    user(login: $userName) {
      repositories(first: 1, orderBy: { direction: DESC, field: PUSHED_AT }) {
        nodes {
          name
          pushedAt
        }
      }
      contributionsCollection {
        contributionCalendar {
          totalContributions
          weeks {
            contributionDays {
              contributionCount
              date
            }
          }
        }
      }
    }
  }
`

export const GetRepoInfo = gql`
  query ($username: String!, $repositoryName: String!) {
    repository(name: $repositoryName, owner: $username) {
      id
      name
      nameWithOwner
      description
      forkCount
      stargazerCount
      openGraphImageUrl
      pushedAt
      updatedAt
      url
    }
  }
`

================
File: lib/metaData.ts
================
import { z } from 'astro/zod'

const LINE_BREAK = {
  '{n}': ' <br /> ',
  '{nSm}': " <br class='max-sm:hidden'/> ",
  '{nMd}': " <br class='max-md:hidden'/> ",
  '{nLg}': " <br class='max-lg:hidden'/> "
}

interface ParseTextOptions {
  isCleanText?: boolean
}

const parseText = (text: string, opts?: ParseTextOptions): string => {
  let newText = text
  Object.keys(LINE_BREAK).forEach((key) => {
    newText = newText.replace(
      new RegExp(key, 'g'),
      opts?.isCleanText ? ' ' : LINE_BREAK[key as keyof typeof LINE_BREAK]
    )
  })
  return newText
}

const metaDataSchema = z
  .object({ title: z.string(), description: z.string() })
  .transform((value) => ({
    title: parseText(value.title, { isCleanText: true }),
    htmlTitle: parseText(value.title),
    description: parseText(value.description, { isCleanText: true }),
    htmlDescription: parseText(value.description)
  }))

type MetaData = z.output<typeof metaDataSchema>
type MetaDataInput = z.input<typeof metaDataSchema>

const _mainMetaData: MetaDataInput = {
  title: 'Andres Paulino',
  description:
    'A dedicated team leader and problem-solver who thrives{n}on learning and building.'
}
export const mainMetaData = metaDataSchema.parse(_mainMetaData)

const _projectMetaData: MetaDataInput = {
  title: 'Milestones in the{n}learning journey',
  description:
    'Each project marks a step forward, showcasing my growth and journey as a developer.{nMd}Explore how I’ve tackled challenges and built solutions along the way.'
}
export const projectMetaData: MetaData = metaDataSchema.parse(_projectMetaData)

const _blogMetaData: MetaDataInput = {
  title: 'Learning, Building, and{nSm}Documenting',
  description:
    'Insights and experiences from my journey as a developer—exploring ideas,{nSm}overcoming challenges, and sharing lessons learned along the way.'
}
export const blogMetaData: MetaData = metaDataSchema.parse(_blogMetaData)

================
File: lib/structuredData.ts
================
import type { CollectionEntry } from 'astro:content'
import type { Article, Person, WebSite, WithContext } from 'schema-dts'

import { projectMetaData } from './metaData'

export const mainWebsite: WithContext<WebSite> = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  url: 'https://andrespaulino.dev',
  name: 'Andres Paulino - Personal Website',
  description:
    'From Figma to TypeScript, I craft seamless web and mobile experiences as a software engineer, based in Jakarta, Indonesia.',
  inLanguage: 'en_US'
}

export const projectWebsite: WithContext<WebSite> = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  url: 'https://andrespaulino.dev/projects/',
  name: 'Projects',
  description: projectMetaData.description,
  inLanguage: 'en_US'
}

export const personSchema: WithContext<Person> = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  name: 'Andres Paulino',
  url: 'https://andrespaulino.dev',
  // image: `${import.meta.env.SITE}${avatar.src}`,
  sameAs: [
    'https://www.twitter.com/iandrespaulino',
    'https://www.instagram.com/iandrespaulino/',
    'https://www.linkedin.com/in/andrespaulino/'
  ],
  jobTitle: 'Software engineer'
  // worksFor: {
  //   '@type': 'Organization',
  //   name: 'Grafana',
  //   url: 'https://grafana.com',
  // },
}

export function getProjectSchema(post: CollectionEntry<'projects'>) {
  const articleStructuredData: WithContext<Article> = {
    '@context': 'https://schema.org',
    '@type': 'Article',
    headline: post.data.title,
    url: `https://andrespaulino.dev/projects/${post.id}/`,
    image: {
      '@type': 'ImageObject',
      url: `https://andrespaulino.dev${post.data.heroImage.src}/`
    },
    description: post.data.description,
    // datePublished
    publisher: personSchema,
    author: personSchema
  }
  return articleStructuredData
}

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from 'clsx'
import type { ClientResponse } from 'hono/client'
import type { StatusCode } from 'hono/utils/http-status'
import { twMerge } from 'tailwind-merge'

export const cn = (...inputs: ClassValue[]) => {
  return twMerge(clsx(inputs))
}

export const getTransitionName = (name: string, key: string) => {
  return ` ${name.replace('\\n', ' ').replace(' ', '-')}-${key}`
}

export const truncate = (str: string | null, length: number) => {
  if (!str || str.length <= length) return str
  return `${str.slice(0, length - 3)}...`
}

// Append 'th', 'st', 'nd', or 'rd' for the day of the month
export const getDateSuffix = (day: number) => {
  if (day > 3 && day < 21) return 'th' // Special case for 11th-13th
  return ['th', 'st', 'nd', 'rd'][day % 10] || 'th'
}

export const formatDate = (date: Date) => {
  const options: Intl.DateTimeFormatOptions = {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }
  const formattedDate = date.toLocaleDateString('en-US', options)

  const day = date.getDate()

  return formattedDate.replace(/\d+,/, day + getDateSuffix(day))
}

export const formatDateByTimeZone = (date: Date) => {
  return date.toLocaleString('en-US', {
    month: 'long',
    day: 'numeric',
    year: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    hour12: true,
    timeZone: 'Asia/Bangkok'
  })
}

export const formatNumber = (value: number): string => {
  const formatter = new Intl.NumberFormat('en-US')
  return formatter.format(value)
}

export const fetcher =
  <T>(fn: () => Promise<ClientResponse<T, StatusCode, 'json'>>) =>
  () =>
    fn().then((res) => {
      if (res.status !== 200) {
        throw new Error('Failed to fetch data')
      }
      return res.json()
    })

export const catchError = async <T>(
  promise: Promise<T>
): Promise<[undefined, T] | [Error]> => {
  return promise
    .then((data) => [undefined, data] as [undefined, T])
    .catch((error) => [error])
}

================
File: pages/_components/bento/BentoBadge/BentoBadge.tsx
================
import { cva } from 'class-variance-authority'
import React from 'react'

import { cn } from '@/lib/utils'

interface CustomClass {
  component?: string
  icon?: string
}

interface Props {
  icon: React.FC<React.SVGProps<SVGSVGElement>>
  text?: string
  className?: CustomClass
}

const badgeVariants = cva(
  'z-10 flex items-center gap-2 rounded-full border border-slate-700 bg-slate-950 shrink-0',
  {
    variants: {
      variant: {
        default: 'py-2 pl-3 pr-4',
        iconOnly: 'p-2'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

const BentoBadge = ({ icon: Icon, text, className }: Props) => {
  const variant = text ? 'default' : 'iconOnly'

  return (
    <div
      className={cn(
        badgeVariants({ variant, className: className?.component })
      )}
    >
      <Icon className={cn('size-4', className?.icon)} />
      {!!text && <h3 className='text-sm text-zinc-200'>{text}</h3>}
    </div>
  )
}

export default BentoBadge

================
File: pages/_components/bento/BentoBadge/index.ts
================
export { default } from './BentoBadge'

================
File: pages/_components/bento/BentoCard/BentoCard.tsx
================
import React from 'react'

import { cn } from '@/lib/utils'

interface Props {
  children: React.ReactNode
  className?: string
}

const BentoCard = (props: Props) => {
  const { children, className, ...rest } = props

  return (
    <div className={cn('card group rounded-3xl', className)} {...rest}>
      <div
        className={cn(
          'card-content md:absolute',
          'border-[#1f2b3a] max-md:border'
        )}
      >
        {children}
      </div>
    </div>
  )
}

export default BentoCard

================
File: pages/_components/bento/BentoCard/index.ts
================
export { default } from './BentoCard'

================
File: pages/_components/bento/BentoItemCTA/BentoItemCTA.astro
================
---
import { ArrowRight } from '@icons/ArrowRight'

import Link from '@/components/Link'
---

<Link
  href='#projects'
  class:list={[
    'flex size-full items-center justify-between rounded-3xl px-6 py-6'
  ]}
>
  <p
    class:list={[
      'relative font-medium',
      "after:absolute after:left-0 after:top-1/2 after:w-0 after:content-['']",
      'after:bg-primary-gradient after:mt-3 after:h-0.5 after:transition-all after:duration-400',
      'group-hover:after:w-full'
    ]}
  >
    Discover more projects
  </p>
  <ArrowRight
    className='size-6 transition-all duration-300 group-hover:rotate-[90deg]'
  />
</Link>

================
File: pages/_components/bento/BentoItemCTA/index.ts
================
export { default } from './BentoItemCTA.astro'

================
File: pages/_components/bento/BentoItemFeaturedWork/BentoItemFeaturedWork.astro
================
---
import { Bookmarks } from '@icons/Bookmarks'
import { Suitcase } from '@icons/Suitcase'

import Link from '@/components/Link'
import NotificationCard from '@/components/NotificationCard'

import BentoBadge from '../BentoBadge'
---

<Link
  href='/projects/bookmarked'
  class:list={[
    'relative flex h-full flex-col gap-3 overflow-hidden rounded-[inherit] px-5 pb-8 pt-4',
    'max-xs:pb-36 md:max-lg:gap-4'
  ]}
>
  <div class='space-y-5 max-md:z-40'>
    <BentoBadge
      icon={Suitcase}
      text='Featured work'
      className={{ component: 'w-fit' }}
    />
    <div class='space-y-3 xs:max-md:w-1/2'>
      <p class='text-xl leading-none'>Bookmarked</p>
      <p class='text-sm leading-relaxed text-slate-400'>
        Effortlessly save and organize your favorite tweets in Notion using a
        Telegram bot.
      </p>
    </div>
  </div>
  <div
    class:list={[
      'absolute top-[164px] self-center',
      'max-xs:mt-4 max-[360px]:top-[172px]',
      'xs:max-md:left-[calc(50%+16px)] xs:max-md:top-14 xs:max-md:scale-110'
    ]}
  >
    <div
      class:list={[
        'relative flex flex-col items-center',
        'bookmarked-notification-card'
      ]}
    >
      <div
        class:list={[
          'pointer-events-none absolute z-30 h-[125%] w-[125%]',
          'bg-gradient-to-t from-[var(--card-background)] to-transparent'
        ]}
      >
      </div>
      <NotificationCard
        sender='Bookmarked'
        time='Just now'
        message='Your bookmark has been saved'
        class:list={[
          'z-20 text-slate-700 max-xs:w-[300px]',
          'transition-all duration-300',
          'group-hover:-mt-2 group-hover:scale-105',
          'hidden-notification-card'
        ]}
        ><Bookmarks className='size-6' />
      </NotificationCard>

      <NotificationCard
        sender='Bookmarked'
        time='1m ago'
        message='Bookmarking this thread'
        class:list={[
          'z-10 -mt-8 w-[88%] bg-slate-400 text-slate-800',
          'transition-all duration-500',
          'group-hover:-mt-2 group-hover:scale-105',
          'hidden-notification-card'
        ]}
        ><Bookmarks className='size-6' />
      </NotificationCard>
    </div>
  </div>
</Link>

<script>
  document.addEventListener('astro:page-load', () => {
    if (!document.getElementById('bento')) return

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const hiddenNotificationCards = entry.target.querySelectorAll(
          '.hidden-notification-card'
        )
        if (entry.isIntersecting) {
          hiddenNotificationCards.forEach((notificationCard) => {
            notificationCard.classList.add('show-notification-card')
          })
        }
      })
    })

    const featuredWorkCard = document.querySelector(
      '.bookmarked-notification-card'
    )

    observer.observe(featuredWorkCard!)
  })
</script>

<style>
  .hidden-notification-card {
    scale: 0;
    filter: blur(32px);
    transition-all: all 0.3s;
  }

  .show-notification-card {
    scale: 1 !important;
    filter: blur(0);
  }
</style>

================
File: pages/_components/bento/BentoItemFeaturedWork/index.ts
================
export { default } from './BentoItemFeaturedWork.astro'

================
File: pages/_components/bento/BentoItemGithubActivity/BentoItemGithubActivity.astro
================
---
import client from '@/lib/client'

import BentoGithubActivityChart from './BentoItemGithubActivityChart'

const response = await client.api.github.contributions.$get()
const data = response.status === 200 ? await response.json() : null

Astro.response.headers.set('Cache-Control', 'public, max-age=86400')
---

{
  data ? (
    <BentoGithubActivityChart {...data} client:only='react' />
  ) : (
    // TODO: handle error
    <p>Something went wrong 😔</p>
  )
}

================
File: pages/_components/bento/BentoItemGithubActivity/BentoItemGithubActivityChart.tsx
================
import { Github } from '@icons/Github'
import HeatMap, { type SVGProps } from '@uiw/react-heat-map'
import React from 'react'

import { formatDate, formatNumber, getDateSuffix } from '@/lib/utils'
import type { GithubContributionData } from '@/types'

import BentoBadge from '../BentoBadge'

const getDateProps = () => {
  const today = new Date()
  const sixMonthsAgo = new Date()
  sixMonthsAgo.setMonth(today.getMonth() - 6)

  return { startDate: sixMonthsAgo, endDate: today }
}

const renderRect =
  (handleMouseEnter: (date: string) => void): SVGProps['rectRender'] =>
  (props, data) => {
    const date = new Date(data.date)
    const formattedDate =
      date.toLocaleDateString('en-US', { day: 'numeric', month: 'long' }) +
      getDateSuffix(date.getDate())
    const tileInfo = `${data.count ? formatNumber(data.count) : 'No'} contributions on ${formattedDate}`

    return (
      <rect
        className='transition-all hover:brightness-125'
        onMouseEnter={() => handleMouseEnter(tileInfo)}
        {...props}
      />
    )
  }

interface Props extends GithubContributionData {}

const BentoGithubActivity = (props: Props) => {
  const defaultValue = `${formatNumber(props.totalContributions)} contributions in the last year`
  const [hoveredTile, setHoveredTile] = React.useState<string | null>(
    defaultValue
  )

  return (
    <div className='relative flex h-full flex-col justify-between px-4 pb-5 pt-4 max-md:gap-4'>
      <div className='flex items-baseline justify-between gap-4 max-xs:flex-col'>
        <BentoBadge icon={Github} text='Github activity' />
        <p className='line-clamp-1 text-sm'>{hoveredTile}</p>
      </div>
      <div className='w-full overflow-x-scroll'>
        <HeatMap
          {...getDateProps()}
          onMouseLeave={() => setHoveredTile(defaultValue)}
          className='w-[550px]'
          value={props.contributions ?? []}
          weekLabels={false}
          monthLabels={false}
          legendCellSize={0}
          space={4}
          style={{ color: '#fff' }}
          rectProps={{ rx: 4 }}
          rectSize={16}
          rectRender={renderRect((date) => setHoveredTile(date))}
          panelColors={{
            1: '#19222F',
            4: '#0F4E43',
            8: '#1F977B',
            12: '#1EF4AE'
          }}
        />
      </div>
      {
        <p className='text-sm text-slate-200 max-sm:text-xs sm:max-lg:mt-4'>
          Last pushed on {formatDate(new Date(props.lastPushedAt))}
        </p>
      }
    </div>
  )
}

export default BentoGithubActivity

================
File: pages/_components/bento/BentoItemGithubActivity/index.ts
================
export { default } from './BentoItemGithubActivity.astro'

================
File: pages/_components/bento/BentoItemMapLocation/BentoItemMapLocation.tsx
================
import 'leaflet/dist/leaflet.css'

import { Map as MapLeaflet, type ZoomPanOptions } from 'leaflet'
import { useRef, useState } from 'react'
import { MapContainer, TileLayer } from 'react-leaflet'

import { Minus } from '@/components/icons/Minus'
import { Plus } from '@/components/icons/Plus'
import { cn } from '@/lib/utils'

const LATITUDE = 25.7070
const LONGITUDE = -80.4070

const ZOOM_STEP = 1
const zoomOptions: ZoomPanOptions = {
  animate: true,
  duration: 0.5,
  easeLinearity: 0.25
}

const MAX_ZOOM = 10
const MIN_ZOOM = 8

const MAP_URL = '/api/map/{z}/{x}/{y}.png'

interface ZoomButtonProps
  extends Pick<
    React.HTMLProps<HTMLButtonElement>,
    'onClick' | 'children' | 'className'
  > {
  hide?: boolean
}

const ZoomButton = (props: ZoomButtonProps) => {
  const { onClick, children, className, hide } = props
  return (
    <button
      onClick={onClick}
      className={cn(
        'absolute size-10 rounded-full bg-zinc-950 text-3xl leading-none outline outline-2 outline-slate-700',
        'scale-100 transition-all duration-300 hover:outline-4',
        'flex items-center justify-center',
        hide && 'scale-0',
        className
      )}
      aria-hidden={hide}
      tabIndex={hide ? -1 : 0}
    >
      {children}
    </button>
  )
}

interface Props {
  className?: string
}

const BentoItemMapLocation = ({ className }: Props) => {
  const mapRef = useRef<MapLeaflet>(null)
  const [currentZoom, setCurrentZoom] = useState(
    mapRef.current?.getZoom() ?? MAX_ZOOM
  )

  const zoomIn = () => {
    setCurrentZoom((prev) => {
      const newZoom = prev + ZOOM_STEP
      mapRef.current?.setZoom(newZoom, zoomOptions)
      return newZoom
    })
  }

  const zoomOut = () => {
    setCurrentZoom((prev) => {
      const newZoom = prev - ZOOM_STEP
      mapRef.current?.setZoom(newZoom, zoomOptions)
      return newZoom
    })
  }

  return (
    // Make sure you set the height and width of the map container otherwise the map won't show
    <div className='group h-full'>
      <MapContainer
        ref={mapRef}
        zoom={MAX_ZOOM}
        center={[LATITUDE, LONGITUDE]}
        dragging={true}
        touchZoom={true} // Disables pinch-to-zoom on touch devices
        scrollWheelZoom={true} // Disables zooming with the mouse wheel
        doubleClickZoom={false} // Disables zooming on double-click
        zoomControl={false} // Hides the zoom control
        attributionControl={false} // Hides the attribution control
        className={cn(
          'brightness-[0.64] -hue-rotate-[24deg] saturate-[0.86]',
          'h-full min-h-full w-full',
          className
        )}
        trackResize
      >
        <TileLayer
          url={MAP_URL}
          zoomOffset={-1}
          minZoom={1}
          tileSize={512}
          eventHandlers={{
            tileloadstart: (event) => {
              event.tile.setAttribute('loading', 'lazy')
            }
          }}
        />
      </MapContainer>
      <div className='absolute inset-0 flex items-center justify-center'>
        <div className='relative size-16'>
          <div className='absolute size-full animate-ping rounded-full bg-emerald-300/20 opacity-65 blur-sm'></div>
          <div className='drop-shadow-green size-full rounded-full bg-emerald-400/30'></div>
        </div>
      </div>

      <ZoomButton
        onClick={zoomOut}
        className='bottom-4 left-4'
        hide={currentZoom <= MIN_ZOOM}
      >
        <Minus className='size-4' />
      </ZoomButton>

      <ZoomButton
        onClick={zoomIn}
        className='bottom-4 right-4'
        hide={currentZoom >= MAX_ZOOM}
      >
        <Plus className='size-4' />
      </ZoomButton>
    </div>
  )
}

export default BentoItemMapLocation

================
File: pages/_components/bento/BentoItemMapLocation/index.ts
================
export { default } from './BentoItemMapLocation'

================
File: pages/_components/bento/BentoItemNowPlaying/BentoItemNowPlaying.astro
================
---
import client from '@/lib/client'

import BentoItemNowPlayingReact from './BentoItemNowPlaying'

const initialData = await client.api.spotify.$get().then((res) => res.json())
---

<BentoItemNowPlayingReact initialData={initialData} client:only='react' />

================
File: pages/_components/bento/BentoItemNowPlaying/BentoItemNowPlaying.tsx
================
import { Spotify } from '@icons/Spotify'
import useSWR from 'swr'

import client from '@/lib/client'
import { cn, fetcher } from '@/lib/utils'
import type { SpotifyData } from '@/pages/api/_services/spotify'

import BentoBadge from '../BentoBadge'

interface Props {
  initialData?: SpotifyData
}

const BentoItemNowPlaying = ({ initialData }: Props) => {
  const { data, error } = useSWR(
    'spotify',
    fetcher(() => client.api.spotify.$get()),
    {
      refreshInterval: 10000,
      fallbackData: initialData
    }
  )

  // TODO: handle initial error
  if (error && !data) return <p>masok error {JSON.stringify(data, null, 2)}</p>

  return (
    <a
      href={data?.songUrl}
      target='_blank'
      className={cn(
        'group relative flex h-full items-center gap-x-6 rounded-3xl p-5',
        'max-lg:p-6 md:max-lg:flex-col md:max-lg:items-start md:max-lg:justify-between'
      )}
    >
      <BentoBadge
        icon={Spotify}
        className={{
          component: 'absolute right-3 top-3',
          icon: 'transition-all duration-300 group-hover:text-green-400'
        }}
      />
      <div className='aspect-square h-full rounded-xl bg-black p-3 max-lg:h-3/5 max-md:min-w-24'>
        <div className='relative'>
          <img
            src={data?.albumImageUrl}
            alt='Last Played Song'
            className={cn('absolute aspect-square rounded-full', {
              'animate-[spin_5s_linear_infinite]': data?.isPlaying
            })}
          />
        </div>
      </div>
      <div className='w-full space-y-1 overflow-hidden tracking-wide'>
        <p className='text-sm text-slate-400'>
          {data?.isPlaying ? 'Now playing' : 'Last played'}
        </p>
        <div className='items-center gap-x-4 space-y-1 md:max-lg:flex'>
          <p className='max-w-full flex-shrink-0 overflow-hidden text-ellipsis whitespace-nowrap font-medium'>
            {data?.title}
          </p>
          <p className='overflow-hidden text-ellipsis whitespace-nowrap text-sm uppercase text-slate-400'>
            {data?.artist}
          </p>
        </div>
      </div>
    </a>
  )
}

export default BentoItemNowPlaying

================
File: pages/_components/bento/BentoItemNowPlaying/index.ts
================
export { default } from './BentoItemNowPlaying.astro'

================
File: pages/_components/bento/BentoItemTechStack/BentoItemTechStack.tsx
================
import { Stack } from '@icons/Stack'

import BentoBadge from '../BentoBadge'
import TechStacks from './TechStacks'

const BentoItemTechStack = () => {
  return (
    <div className='flex h-full flex-col gap-5 px-5 pb-6 pt-4 max-md:gap-8'>
      <BentoBadge
        icon={Stack}
        text='Tech stack'
        className={{ component: 'w-fit' }}
      />
      <div className='flex-grow place-content-center'>
        <TechStacks />
      </div>
      <div className='space-y-2'>
        <p className='text-lg'>Tech stacks I'm familiar with</p>
        <p className='text-sm text-slate-400'>
          A full-stack developer with a focus on dynamic and scalable web
          applications as well as robust backend systems in Node.js and Python.
        </p>
      </div>
    </div>
  )
}

export default BentoItemTechStack

================
File: pages/_components/bento/BentoItemTechStack/index.ts
================
export { default } from './BentoItemTechStack'

================
File: pages/_components/bento/BentoItemTechStack/TechStacks.tsx
================
import Marquee from '@/components/ui/marquee'

import techStacks from './techStacksData'

const TechStacks = () => {
  return (
    <div className='relative flex w-full flex-col items-center justify-center overflow-hidden md:shadow-xl'>
      <Marquee className='[--duration:20s]'>
        {techStacks.map(({ icon: Icon, name }) => (
          <Icon className='size-12 md:max-lg:size-8' key={name} />
        ))}
      </Marquee>
      <div className='pointer-events-none absolute inset-y-0 left-0 w-1/3 bg-gradient-to-r from-[var(--card-background)]'></div>
      <div className='pointer-events-none absolute inset-y-0 right-0 w-1/3 bg-gradient-to-l from-[var(--card-background)]'></div>
    </div>
  )
}

export default TechStacks

================
File: pages/_components/bento/BentoItemTechStack/techStacksData.ts
================
import { Astro } from '@icons/Astro'
import { Docker } from '@icons/Docker'
import { Drizzle } from '@icons/Drizzle'
import { Hono } from '@icons/Hono'
import { Jest } from '@icons/Jest'
import { Nestjs } from '@icons/NestJs'
import { NextJs } from '@icons/NextJs'
import { Nuxtjs } from '@icons/NuxtJs'
import { Prisma } from '@icons/Prisma'
import { Puppeteer } from '@icons/Puppeteer'
import { ReactJs } from '@icons/ReactJs'
import { Reactquery } from '@icons/ReactQuery'
import { Swr } from '@icons/Swr'
import { Tailwindcss } from '@icons/Tailwind'
import { TypeScript } from '@icons/TypeScript'
import { Vuejs } from '@icons/VueJs'
import type { JSX, SVGProps } from 'react'

type TechStack = {
  name: string
  icon: (props: SVGProps<SVGSVGElement>) => JSX.Element
  description: string
}

const techStacks: TechStack[] = [
  {
    name: 'TypeScript',
    icon: TypeScript,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Next',
    icon: NextJs,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'React Native',
    icon: ReactJs,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'React Query',
    icon: Reactquery,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Tailwind',
    icon: Tailwindcss,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'SWR',
    icon: Swr,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Puppeteer',
    icon: Puppeteer,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Jest',
    icon: Jest,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Prisma',
    icon: Prisma,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Drizzle',
    icon: Drizzle,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Nest',
    icon: Nestjs,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Hono',
    icon: Hono,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Astro',
    icon: Astro,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Vue',
    icon: Vuejs,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Nuxt',
    icon: Nuxtjs,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  },
  {
    name: 'Docker',
    icon: Docker,
    description:
      'TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  }
]

export default techStacks

================
File: pages/_components/bento/BentoItemTypingSpeed/BentoItemTypingSpeed.astro
================
---
import client from '@/lib/client'

import BentoItemTypingSpeedContent from './BentoItemTypingSpeedContent'

const data = await client.api.monkeytype.$get().then((res) => res.json())

Astro.response.headers.set('Cache-Control', 'public, max-age=86400')
---

<BentoItemTypingSpeedContent {...data} client:only='react' />

================
File: pages/_components/bento/BentoItemTypingSpeed/BentoItemTypingSpeedContent.tsx
================
import { Monkeytype } from '@icons/Monkeytype'
import { Target } from '@icons/Target'
import { Timer } from '@icons/Timer'
import { Translate } from '@icons/Translate'

import { Tooltip } from '@/components/ui/tooltip'
import { cn } from '@/lib/utils'
import type { MonkeyTypeData, MonkeyTypeLanguage } from '@/types'

import BentoBadge from '../BentoBadge'

const mapTypingDetailData = (data: MonkeyTypeData) => {
  const LANGUAGE: Record<MonkeyTypeLanguage, string> = {
    english: 'EN',
    indonesian: 'ID'
  }
  return [
    { icon: Timer, category: 'time', value: `${data.time}s` },
    { icon: Target, category: 'accuracy', value: `${data.acc}%` },
    { icon: Translate, category: 'language', value: LANGUAGE[data.language] }
  ]
}

interface TypingDetailProps {
  category: string
  value: string
  icon: React.FC<React.SVGProps<SVGSVGElement>>
}

export const TypingDetail = ({
  category,
  icon: Icon,
  value
}: TypingDetailProps) => {
  return (
    <Tooltip className='capitalize' content={category} side='bottom'>
      <div className='flex items-center gap-1 tracking-wider text-slate-200'>
        <Icon className='size-4 text-slate-500 group-hover:text-slate-300' />
        <p>{value}</p>
      </div>
    </Tooltip>
  )
}

interface Props extends MonkeyTypeData {}

const TypingSpeed = (props: Props) => {
  return (
    <a
      href='https://monkeytype.com/profile/andrespaulino'
      target='_blank'
      className='relative flex h-full flex-col justify-between overflow-hidden rounded-3xl px-5 pb-6 pt-4 max-md:gap-12'
    >
      <p
        className={cn(
          'font-display absolute text-[196px] font-extrabold text-transparent',
          'left-1/2 top-8 -z-10 -translate-x-1/2 leading-none opacity-70',
          'bg-gradient-to-b from-[#1E293B] to-[var(--card-background)] bg-clip-text'
        )}
      >
        {props.wpm}
      </p>
      <BentoBadge
        icon={Monkeytype}
        text='Typing speed'
        className={{ component: 'w-fit' }}
      />
      <div>
        <div className='flex items-baseline'>
          <p className='font-display text-[84px] font-medium leading-tight tracking-normal'>
            {props.wpm}
          </p>
          <p className='ml-2 text-2xl leading-none'>wpm</p>
        </div>
        <div className='flex gap-4'>
          {mapTypingDetailData(props).map((item) => (
            <TypingDetail key={item.category} {...item} />
          ))}
        </div>
      </div>
    </a>
  )
}

export default TypingSpeed

================
File: pages/_components/bento/BentoItemTypingSpeed/index.ts
================
export { default } from './BentoItemTypingSpeed.astro'

================
File: pages/_components/BentoSection.astro
================
---
import { Codepen } from '@icons/Codepen'
import { Figma } from '@icons/Figma'
import { Location } from '@icons/Location'
import { X } from '@icons/X'

import { cn } from '@/lib/utils'

import BentoBadge from './bento/BentoBadge'
import BentoCard from './bento/BentoCard'
import BentoItemCTA from './bento/BentoItemCTA'
import BentoItemFeaturedWork from './bento/BentoItemFeaturedWork'
import BentoItemGithubActivity from './bento/BentoItemGithubActivity'
import BentoItemMapLocation from './bento/BentoItemMapLocation'
import BentoItemNowPlaying from './bento/BentoItemNowPlaying'
import BentoItemTechStack from './bento/BentoItemTechStack'
import BentoItemTypingSpeed from './bento/BentoItemTypingSpeed'

const socialMedias = [
  { icon: X, href: 'https://twitter.com/iandresmiguel' },
]
---

<script>
  document.addEventListener('astro:page-load', () => {
    const bento = document.getElementById('bento')

    if (!bento) return

    bento.onmousemove = (e) => {
      for (const card of document.getElementsByClassName('card')) {
        const rect = card.getBoundingClientRect()
        const x = e.clientX - rect.left
        const y = e.clientY - rect.top

        ;(card as HTMLDivElement).style.setProperty('--mouse-x', `${x}px`)
        ;(card as HTMLDivElement).style.setProperty('--mouse-y', `${y}px`)
      }
    }
  })
</script>

<section
  id='bento'
  class:list={[
    'auto-rows-[minmax(0,1fr)] grid-cols-[repeat(36,_minmax(0,_1fr))] gap-4',
    'flex-col max-lg:grid-cols-6 max-md:flex max-md:gap-4 md:grid'
  ]}
>
  <!-- Location & social medias -->
  <div
    class:list={[
      'relative col-start-1 col-end-11 row-start-1 row-end-[8] aspect-square',
      'max-lg:col-end-3 max-lg:row-end-3'
    ]}
  >
    <BentoBadge
      className={{ component: 'absolute left-4 top-4' }}
      text='Location'
      icon={Location}
    />
    <BentoItemMapLocation className='rounded-3xl' client:only='react' />
  </div>

  <div
    class:list={[
      'grid grid-cols-3 gap-4',
      'col-start-1 col-end-11 row-start-[7] row-end-[9]',
      'max-lg:col-end-4 max-lg:row-start-3 max-lg:row-end-4'
    ]}
  >
    {
      socialMedias.map(({ icon: Icon, href }) => (
        <BentoCard className='aspect-square'>
          <a
            href={href}
            aria-label='Social media'
            target='_blank'
            class='flex size-full items-center justify-center rounded-3xl group-hover:text-emerald-400'
          >
            <Icon className='size-10' />
          </a>
        </BentoCard>
      ))
    }
  </div>

  <!-- Works -->
  <BentoCard
    className={cn(
      'col-start-11 col-end-[24] row-start-1 row-end-[7]',
      'max-lg:col-start-3 max-lg:col-end-7 max-lg:row-end-3'
    )}
  >
    <BentoItemFeaturedWork />
  </BentoCard>

  <BentoCard
    className={cn(
      'col-start-11 col-end-[24] row-start-[7] row-end-[9]',
      'max-lg:col-start-4 max-lg:col-end-7 max-lg:row-start-3 max-lg:row-end-4'
    )}
  >
    <BentoItemCTA />
  </BentoCard>

  <!-- Spotify & Monkeytype -->
  <BentoCard
    className={cn(
      'col-start-[24] col-end-[37] row-start-1 row-end-4',
      'max-lg:col-start-1 max-lg:col-end-4 max-lg:row-start-4 max-lg:row-end-6'
    )}
  >
    <BentoItemNowPlaying server:defer>
      <p class='p-4' slot='fallback'>Loading data...</p>
    </BentoItemNowPlaying>
  </BentoCard>

  <BentoCard
    className={cn(
      'col-start-[24] col-end-[37] row-start-4 row-end-[9]',
      'max-lg:col-start-4 max-lg:col-end-7 max-lg:row-start-4 max-lg:row-end-6'
    )}
  >
    <!-- TODO -->
    <BentoItemTypingSpeed server:defer>
      <p class='p-4' slot='fallback'>Loading data...</p>
    </BentoItemTypingSpeed>
  </BentoCard>

  <!-- Github activity & tech stack -->
  <BentoCard
    className={cn(
      'col-start-1 col-end-[19] row-start-9 row-end-[15]',
      'max-lg:col-start-1 max-lg:col-end-4 max-lg:row-start-6 max-lg:row-end-9'
    )}
  >
    <!-- TODO -->
    <BentoItemGithubActivity server:defer>
      <p class='p-4' slot='fallback'>Loading data...</p>
    </BentoItemGithubActivity>

    <!-- <BentoItemGithubActivity client:only='react' /> -->
  </BentoCard>

  <BentoCard
    className={cn(
      'col-start-[19] col-end-[37] row-start-9 row-end-[15]',
      'max-lg:col-start-4 max-lg:col-end-7 max-lg:row-start-6 max-lg:row-end-9'
    )}
  >
    <BentoItemTechStack />
  </BentoCard>
</section>

<style is:global>
  #bento {
    --card-border: theme(colors.slate.600);
    --card-background: hsl(215, 26%, 7.5%);

    scroll-margin: 3rem;
  }

  /* source: https://codepen.io/Hyperplexed/pen/MWQeYLW */
  #bento:hover .card::after {
    opacity: 1;
  }

  .card {
    /* border */
    background-color: theme(colors.slate.800);
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .card:hover::before {
    opacity: 1;
  }

  .card::before,
  .card::after {
    border-radius: inherit;
    content: '';
    height: 100%;
    left: 0px;
    opacity: 0;
    position: absolute;
    top: 0px;
    transition: opacity 500ms;
    width: 100%;
    pointer-events: none;
  }

  .card::before {
    background: radial-gradient(
      800px circle at var(--mouse-x) var(--mouse-y),
      rgba(255, 255, 255, 0.06),
      transparent 40%
    );
    z-index: 3;
  }

  .card::after {
    /* border hover */
    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      var(--card-border),
      transparent 50%
    );
    z-index: 1;
  }

  .card > .card-content {
    /* card background */
    background-color: var(--card-background);
    border-radius: inherit;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    inset: 1px;
    z-index: 2;
  }
</style>

================
File: pages/_components/BlogSection.astro
================
---
import { getCollection } from 'astro:content'

import BlogCard from '@/components/BlogCard.astro'
import BlogHeader from '@/components/BlogHeader.astro'
import FancyLink from '@/components/FancyLink.astro'
import { getCustomTransition } from '@/lib/customTransition'

const blog = await getCollection('blog')
---

<section id='blog' class='mt-40 scroll-mt-16'>
  <div class='items-center justify-between gap-4 lg:flex'>
    <BlogHeader forHomePage />
    <FancyLink class='max-lg:hidden' href='/blog'>View all articles</FancyLink>
  </div>
  <div class='mt-12' transition:animate={getCustomTransition(0.2)}>
    {blog.map((item) => <BlogCard {...item} />)}
  </div>
</section>

================
File: pages/_components/Decorator.astro
================
---
import RayLight from '@/components/Raylight'
import { cn } from '@/lib/utils'
---

<RayLight.Container>
  <RayLight.Component
    className={cn(
      'h-[267px] w-[1192px] rotate-[-20deg] opacity-100 md:opacity-40',
      '-top-[252px] left-[100px]'
    )}
  />
  <RayLight.Component
    className={cn(
      'h-[276px] w-[1192px] rotate-[-32deg] opacity-25',
      '-top-[200px] left-[240px]'
    )}
  />
  <RayLight.Component
    className={cn(
      'h-[388px] w-[1758px] rotate-[40deg] opacity-80',
      '-left-[200px] -top-[440px]'
    )}
  />
  <RayLight.Component
    className={cn(
      'h-[492px] w-[1192px] rotate-[-32deg] opacity-75',
      '-top-[280px] left-[960px]'
    )}
  />
</RayLight.Container>

================
File: pages/_components/HeroSection.astro
================
---
import Keyboard from '../_components/Keyboard.astro'
---

<section class='flex h-screen flex-col gap-8 pb-32 pt-24 sm:justify-center'>
  <div
    class:list={[
      'flex w-fit items-center rounded-full',
      'gap-3 py-1.5 pl-3 pr-4',
      'border border-zinc-600/75',
      'bg-slate-950/25',
      'enter-animation'
    ]}
  >
    <div class='relative size-3'>
      <div
        class='absolute size-full animate-ping rounded-full bg-green-300 opacity-65'
      >
      </div>
      <div class='drop-shadow-green size-full rounded-full bg-green-400'></div>
    </div>
    <h3 class='text-sm text-slate-200 max-xs:text-xs'>
      Available for projects
    </h3>
  </div>
  <h1
    class='enter-animation text-[clamp(2rem,7vw,3rem)] font-medium leading-[1.05] tracking-tight'
  >
    Hi, I’m Andres. <br /> A lead fullstack software engineer.
  </h1>
  <h2
    class='enter-animation mb-8 max-w-xl leading-relaxed text-slate-400 max-sm:text-sm'
  >
    Mainly working in the JavaScript ecosystem, I’m a dedicated problem-solver
    who thrives on learning and building.
  </h2>
  <Keyboard class='enter-animation' />
</section>

<style is:global>
  .drop-shadow-green {
    filter: drop-shadow(0px 0px 8px #59ff7e);
  }

  .enter-animation {
    opacity: 0.025;
    animation: fade-in-bottom 0.45s cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
  }

  .enter-animation:nth-child(2) {
    animation-delay: 0.2s;
  }

  .enter-animation:nth-child(3) {
    animation-delay: 0.4s;
  }

  .enter-animation:nth-child(4) {
    animation-delay: 0.6s;
  }
</style>

================
File: pages/_components/Keyboard.astro
================
---
import { SOCIAL_MEDIA_DATA } from '@/components/socialMediaData'

interface Props {
  class?: string
}

const { class: className } = Astro.props
---

<!-- keyboard source: https://codepen.io/HaydnComley/pen/yLdpLbJ -->
<div class:list={['flex items-start text-center max-xs:flex-col', className]}>
  <div class='board'>
    {
      SOCIAL_MEDIA_DATA.map(({ name, href, icon: Icon }) => (
        <div class='key-position'>
          <a
            aria-label={name}
            class='key'
            data-key={name}
            target='_blank'
            {...{ href }}
          >
            <Icon />
          </a>
        </div>
      ))
    }
  </div>
  <div class='key-position flex items-center justify-center'>
    <a
      id='cta-hero-btn'
      href='#bento'
      data-block='center'
      class='key call-to-action peer'
    >
      <p class='call-to-action-content text-white'>Explore more</p>
    </a>
  </div>
</div>

<style>
  :root {
    --background-2: theme(colors.zinc.950);
    --background-3: theme(colors.shark.950);
    --contrast: #fff;
    --size: 5rem; /* keycap size */
  }

  svg {
    width: 2.25rem;
    height: 2.25rem;
  }

  @media (max-width: 640px) {
    :root {
      --size: 3rem;
    }

    svg {
      width: 1.5rem;
      height: 1.5rem;
    }
  }

  /* adjust value inside rotateY to adjust the direction of each keycap */
  .board {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--size) * 0.02);
  }

  .key.call-to-action {
    width: 160px;
    font-size: 14px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      'Liberation Mono', 'Courier New', monospace;
  }

  .call-to-action-content::after {
    position: absolute;
    content: '';
    width: 0;
    left: 0;
    top: 50%;
    margin: 10px 15%;
    background: #fff;
    height: 1.5px;
    transition: 0.3s ease-out;
  }

  .key.call-to-action:hover .call-to-action-content::after {
    width: 70%;
  }

  .key-position {
    transform: rotateZ(0turn) rotateY(0.05turn) rotateX(-0.1turn);
  }

  .key {
    position: relative;
    width: var(--size);
    height: var(--size);
    font-size: calc(var(--size) / 2);
    border: 0.1rem solid var(--background-3);
    border-radius: calc(var(--size) * 0.2);
    background: var(--background-2);
    color: var;
    box-shadow:
      0.15rem 0.15rem 0 0 var(--background-3),
      0.3rem 0.3rem 0 0 var(--background-3),
      0.45rem 0.45rem 0 0 var(--background-3),
      0.6rem 0.6rem 0 0 var(--background-3);
    transition: 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .key:hover {
    cursor: pointer;
    transform: translateX(0.3rem) translateY(0.3rem);
    box-shadow:
      0.15rem 0.15rem 0 0 var(--background-3),
      0.3rem 0.3rem 0 0 var(--background-3),
      0.45rem 0.45rem 0 0 var(--background-3),
      0.5rem 0.5rem 0 0 var(--background-3);
  }

  .key:active,
  .key.isDown {
    cursor: grabbing;
    transform: translateX(0.8rem) translateY(0.8rem);
    box-shadow:
      0.1rem 0.1rem 0 0 var(--background-3),
      0.1rem 0.1rem 0 0 var(--background-3),
      0.2rem 0.2rem 0 0 var(--background-3),
      0.2rem 0.2rem 0 0 var(--background-3);
    filter: blur(0.02rem);
  }

  /* tooltip source: https://codepen.io/cbracco/pen/nXEQLw */
  /* Add this attribute to the element that needs a tooltip */
  [data-tooltip] {
    position: relative;
    z-index: 2;
    cursor: pointer;
  }

  /* Hide the tooltip content by default */
  [data-tooltip]:before,
  [data-tooltip]:after {
    visibility: hidden;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=0)';
    filter: progid: DXImageTransform.Microsoft.Alpha(Opacity=0);
    opacity: 0;
    pointer-events: none;
  }

  /* Position tooltip above the element */
  [data-tooltip]:before {
    position: absolute;
    bottom: 100%;
    transform: translateX(-50%);
    margin-bottom: 5px;
    padding: 6px 12px;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    background-color: #000;
    background-color: hsl(0, 0%, 20%);
    color: #fff;
    content: attr(data-tooltip);
    text-align: center;
    font-size: 14px;
    line-height: 1.2;
    white-space: nowrap;
    z-index: 2;
  }

  /* Triangle hack to make tooltip look like a speech bubble */
  [data-tooltip]:after {
    position: absolute;
    bottom: 100%;
    left: 50%;
    margin-left: -5px;
    width: 0;
    border-top: 5px solid #000;
    border-top: 5px solid hsl(0, 0%, 20%);
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    content: ' ';
    font-size: 0;
    line-height: 0;
  }

  /* Show tooltip content on hover */
  [data-tooltip]:hover:before,
  [data-tooltip]:hover:after {
    visibility: visible;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';
    filter: progid: DXImageTransform.Microsoft.Alpha(Opacity=100);
    opacity: 1;
  }
</style>

================
File: pages/_components/ProjectSection.astro
================
---
import { getCollection } from 'astro:content'

import FancyLink from '@/components/FancyLink.astro'
import ProjectCard from '@/components/ProjectCard'
import ProjectHeader from '@/components/ProjectHeader.astro'
import { getCustomTransition } from '@/lib/customTransition'

const projects = await getCollection('projects')
---

<section id='projects' class='mt-40 scroll-mt-16'>
  <div class='items-center justify-between gap-4 lg:flex'>
    <ProjectHeader forHomePage />
    <FancyLink class='max-lg:hidden' href='/projects'
      >View all projects</FancyLink
    >
  </div>
  <div
    class='mt-12 grid gap-12 sm:grid-cols-2 lg:grid-cols-3'
    transition:animate={getCustomTransition(0.2)}
  >
    {projects.map(({ id, data }) => <ProjectCard slug={id} {...data} />)}
  </div>
</section>

================
File: pages/_components/UnderConstruction.astro
================
---
import { Construction } from '@icons/Construction'

import SEO from '@/components/SEO.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getCustomTransition } from '@/lib/customTransition'

import Decorator from './Decorator.astro'
---

<BaseLayout class='text-center'>
  <SEO
    title='Under construction'
    description='This page is under construction'
    slot='seo'
  />
  <Decorator slot='decorator' />
  <section
    class='mt-16 flex min-h-[480px] flex-col items-center justify-center'
  >
    <div
      class='w-fit rounded-2xl border-2 border-slate-800 bg-gradient-to-b from-slate-700 to-slate-900 p-3'
      transition:animate={getCustomTransition()}
    >
      <Construction className='size-16' />
    </div>
    <h1
      class='mt-8 text-[clamp(2rem,5vw,4rem)] font-semibold leading-none tracking-tight'
      transition:animate={getCustomTransition(0.05)}
    >
      Under Construction
    </h1>
    <p
      class='mt-4 leading-relaxed text-zinc-400 max-sm:text-sm'
      transition:animate={getCustomTransition(0.1)}
    >
      This page is currently under construction. I'm working hard
      <br class='max-sm:hidden' />
      to bring something exciting here soon. Stay tuned!
    </p>
  </section>
</BaseLayout>

================
File: pages/about.astro
================
---
import UnderConstruction from './_components/UnderConstruction.astro'
---

<UnderConstruction />

================
File: pages/api/_services/github/contributions.ts
================
import { GITHUB_ACCESS_TOKEN } from 'astro:env/server'
import request from 'graphql-request'

import { GetGithubContributions } from '@/lib/graphql'
import type { GithubContributionData } from '@/types'

const getGithubContributions = async (): Promise<GithubContributionData> => {
  const response = await request({
    url: 'https://api.github.com/graphql',
    document: GetGithubContributions,
    variables: { userName: 'andrespaulino' },
    requestHeaders: {
      Authorization: `Bearer ${GITHUB_ACCESS_TOKEN}`
    }
  })

  const parsedResponse = (response as any).user.contributionsCollection
    .contributionCalendar

  return {
    lastPushedAt: (response as any).user.repositories.nodes[0].pushedAt,
    totalContributions: parsedResponse.totalContributions,
    contributions: parsedResponse.weeks.flatMap((week: any) => {
      return week.contributionDays.map((day: any) => {
        return {
          count: day.contributionCount,
          date: day.date.replace(/-/g, '/')
        }
      })
    })
  }
}

export default getGithubContributions

================
File: pages/api/_services/github/index.ts
================
import { zValidator } from '@hono/zod-validator'
import { z } from 'astro:schema'
import { Hono } from 'hono'

import getGithubContributions from './contributions'
import getLastUpdatedTimeByFile from './lastUpdatedFile'
import getLastUpdatedTime from './repoInfo'

const github = new Hono()
  .get('/contributions', async (c) =>
    c.json(await getGithubContributions(), 200, {
      'Cache-Control': 's-maxage=3600, stale-while-revalidate=600'
    })
  )
  .get(
    '/last-updated-file',
    zValidator('query', z.object({ path: z.string() })),
    async (c) => {
      const { path } = c.req.valid('query')

      return c.json(await getLastUpdatedTimeByFile(path))
    }
  )
  .get(
    '/repo-info/:owner/:repository',
    zValidator(
      'param',
      z.object({
        owner: z.string(),
        repository: z.string()
      })
    ),
    async (c) => {
      const { owner, repository } = c.req.valid('param')

      return c.json(await getLastUpdatedTime(owner, repository), 200, {
        'Cache-Control': 's-maxage=3600, stale-while-revalidate=600'
      })
    }
  )

export default github

================
File: pages/api/_services/github/lastUpdatedFile.ts
================
import { GITHUB_ACCESS_TOKEN } from 'astro:env/server'

interface LastUpdatedTimeData {
  lastUpdatedTime: string
  latestCommitUrl: string
}

const getLastUpdatedTimeByFile = async (
  filePath: string
): Promise<LastUpdatedTimeData> => {
  const API_URL = `https://api.github.com/repos/andrespaulino/andrespaulino.dev/commits?`

  const params = new URLSearchParams({
    path: `src/content/${filePath}`,
    per_page: '1'
  }).toString()

  const response = await fetch(API_URL + params, {
    headers: { Authorization: `Bearer ${GITHUB_ACCESS_TOKEN}` }
  })

  const [data] = await response.json()

  return {
    lastUpdatedTime: data.commit.committer.date,
    latestCommitUrl: data.html_url
  }
}

export default getLastUpdatedTimeByFile

================
File: pages/api/_services/github/repoInfo.ts
================
import { GITHUB_ACCESS_TOKEN } from 'astro:env/server'
import request from 'graphql-request'

import { GetRepoInfo } from '@/lib/graphql'
import type { GithubRepositoryLastUpdated } from '@/types'

const getLastUpdatedTime = async (
  owner: string,
  repository: string
): Promise<GithubRepositoryLastUpdated> => {
  const response = await request({
    url: 'https://api.github.com/graphql',
    document: GetRepoInfo,
    variables: { username: owner, repositoryName: repository },
    requestHeaders: {
      Authorization: `Bearer ${GITHUB_ACCESS_TOKEN}`
    }
  })

  return (response as any).repository
}

export default getLastUpdatedTime

================
File: pages/api/_services/linkMetadata.ts
================
import ogs from 'open-graph-scraper'
import type { SuccessResult } from 'open-graph-scraper/types'

type LinkMetadataResponse =
  | {
      success: true
      title?: string
      description: string
      faviconUrl?: string
      requestUrl?: string
      image?: {
        url: string
        alt?: string
        width?: number
        height?: number
      }
    }
  | { success: false }

const getOgImageData = (data: SuccessResult['result']) => {
  const { twitterImage, ogImage } = data

  if (!ogImage && !twitterImage) return
  if (ogImage?.length === 0 && twitterImage?.length === 0) return

  const _twitterImage = (twitterImage ?? [])[0]
  const _ogImage = (ogImage ?? [])[0]

  return {
    url: _twitterImage?.url ?? _ogImage?.url,
    alt: _twitterImage?.alt ?? data.ogTitle,
    width: _twitterImage?.width ?? _ogImage?.width,
    height: _twitterImage?.height ?? _ogImage?.height
  }
}

const getLinkMetadata = async (url: string): Promise<LinkMetadataResponse> => {
  const data = await ogs({ url })

  if (data.error || !data.result) return { success: false }

  return {
    success: !!data.result.success,
    title: data.result.twitterTitle ?? data.result.ogTitle,
    description:
      data.result.twitterDescription ?? data.result.ogDescription ?? '',
    faviconUrl: data.result.favicon?.startsWith('/')
      ? data.result.ogUrl + data.result.favicon
      : data.result.favicon,
    requestUrl: data.result.requestUrl,
    image: getOgImageData(data.result)
  }
}

export default getLinkMetadata

================
File: pages/api/_services/monkeytype.ts
================
import { MONKEYTYPE_API_KEY } from 'astro:env/server'

import type { MonkeyTypeData } from '@/types'

const mapResponse = (response: any) => {
  return Object.entries(response.data).flatMap(([time, records]) => {
    return (records as any[]).map((record: any) => ({
      ...record,
      time: Number(time)
    }))
  })
}

const getMonkeytypeData = async (): Promise<MonkeyTypeData> => {
  const API_KEY = MONKEYTYPE_API_KEY
  const response = await fetch(
    'https://api.monkeytype.com/users/personalBests?mode=time',
    { headers: { Authorization: `ApeKey ${API_KEY}` } }
  )

  const responseJSON = await response.json()
  const data = mapResponse(responseJSON)

  const bestScore = data.reduce((max, item) => {
    return item.wpm > max.wpm ? item : max
  }, data[0])

  return {
    acc: Math.round(bestScore.acc),
    consistency: Math.round(bestScore.consistency),
    language: bestScore.language,
    time: bestScore.time,
    wpm: Math.round(bestScore.wpm)
  }
}

export default getMonkeytypeData

================
File: pages/api/_services/spotify.ts
================
import {
  SPOTIFY_CLIENT_ID,
  SPOTIFY_CLIENT_SECRET,
  SPOTIFY_REFRESH_TOKEN
} from 'astro:env/server'
import queryString from 'query-string'

const BASE_URL = 'https://api.spotify.com/v1/me/player'

type AccessToken = { access_token: string }
const getAccessToken = async (): Promise<AccessToken> => {
  const clientId = SPOTIFY_CLIENT_ID
  const clientSecret = SPOTIFY_CLIENT_SECRET
  const refreshToken = SPOTIFY_REFRESH_TOKEN

  const basic = Buffer.from(`${clientId}:${clientSecret}`).toString('base64')

  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      Authorization: `Basic ${basic}`,
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: queryString.stringify({
      grant_type: 'refresh_token',
      refresh_token: refreshToken
    })
  })

  return response.json()
}

const getAccessTokenHeader = (accessToken: string) => {
  return { headers: { Authorization: `Bearer ${accessToken}` } }
}

const getNowPlayingResponse = async (accessToken: string) => {
  return fetch(
    `${BASE_URL}/currently-playing`,
    getAccessTokenHeader(accessToken)
  )
}

const mapSpotifyData = (track: any) => {
  return {
    songUrl: track.external_urls.spotify as string,
    title: track.name as string,
    albumImageUrl: track.album.images[0].url as string,
    artist: track.artists
      .map((artist: { name: any }) => artist.name)
      .join(', ') as string
  }
}

const getRecentlyPlayed = async (accessToken: string) => {
  const response = await fetch(
    `${BASE_URL}/recently-played?limit=1`,
    getAccessTokenHeader(accessToken)
  )

  const {
    items: [{ track }]
  } = await response.json()

  return { isPlaying: false, ...mapSpotifyData(track) }
}

const getSpotifyData = async () => {
  const tokenData = await getAccessToken()

  const { access_token } = tokenData

  const nowPlayingResponse = await getNowPlayingResponse(access_token)

  if (nowPlayingResponse.status === 204) {
    return getRecentlyPlayed(access_token)
  }

  const { item: track } = await nowPlayingResponse.json()

  return { isPlaying: true, ...mapSpotifyData(track) }
}

export type SpotifyData = ReturnType<typeof mapSpotifyData> & {
  isPlaying: boolean
}

export default getSpotifyData

================
File: pages/api/_services/tweetContent.ts
================
import { enrichTweet } from 'react-tweet'
import type { Tweet } from 'react-tweet/api'

// ref: https://github.com/vercel/react-tweet/blob/3367f07a2177462af1d05d62b1785bb9aa4ab787/packages/react-tweet/src/api/fetch-tweet.ts#L36
const getToken = (id: string) => {
  return ((Number(id) / 1e15) * Math.PI)
    .toString(6 ** 2)
    .replace(/(0+|\.)/g, '')
}

const getTweetContent = async (id: string) => {
  const URL = 'https://cdn.syndication.twimg.com/tweet-result?'
  const params = new URLSearchParams({
    id,
    lang: 'en',
    token: getToken(id)
  }).toString()

  const response = await fetch(URL + params)

  const data = (await response.json()) as Tweet

  return { tweet: enrichTweet(data) }
}

export default getTweetContent

================
File: pages/api/[...path].ts
================
import { zValidator } from '@hono/zod-validator'
import type { APIRoute } from 'astro'
import { z } from 'astro:schema'
import { Hono } from 'hono'

import github from './_services/github'
import getLinkMetadata from './_services/linkMetadata'
import getMonkeytypeData from './_services/monkeytype'
import getSpotifyData from './_services/spotify'
import getTweetContent from './_services/tweetContent'

const app = new Hono()
  .basePath('/api')
  .onError((error, c) => {
    console.error('error occured >>', error)
    return c.json({ error: 'Something went wrong' }, 500)
  })
  .route('/github', github)
  .get(
    '/link-metadata',
    zValidator('query', z.object({ url: z.string() })),
    async (c) => {
      const { url } = c.req.valid('query')

      return c.json(await getLinkMetadata(url))
    }
  )
  .get('/monkeytype', async (c) =>
    c.json(await getMonkeytypeData(), 200, {
      'Cache-Control': 's-maxage=43200, stale-while-revalidate=600'
    })
  )
  .get('/spotify', async (c) =>
    c.json(await getSpotifyData(), 200, {
      'Cache-Control': 's-maxage=8, stale-while-revalidate=2'
    })
  )
  .get(
    '/tweet-content/:id',
    zValidator('param', z.object({ id: z.string() })),
    async (c) => {
      const { id } = c.req.valid('param')
      return c.json(await getTweetContent(id), 200, {
        'Cache-Control':
          'max-age=86400, s-maxage=86400, stale-while-revalidate=600'
      })
    }
  )

export const ALL: APIRoute = (context) => app.fetch(context.request)

export const prerender = false

export type APIType = typeof app

================
File: pages/api/map/[z]/[x]/[y].png.ts
================
import type { APIRoute } from 'astro'
import { MAPTILER_API_KEY } from 'astro:env/server'

interface MapCoordinate {
  z: string
  x: string
  y: string
}

const generateMapUrl = ({ z, x, y }: MapCoordinate): string => {
  return `https://api.maptiler.com/maps/streets-v2-dark/${z}/${x}/${y}.png?key=${MAPTILER_API_KEY}`
}

export const GET: APIRoute = async ({ params }) => {
  const { z, x, y } = params

  if (!z || !x || !y)
    return new Response(null, {
      status: 400,
      statusText: 'Bad request'
    })

  const response = await fetch(generateMapUrl({ z, x, y }))
  if (!response.ok) {
    return new Response('Error fetching tile', { status: response.status })
  }

  const headers = new Headers(response.headers)
  headers.set('Cache-Control', 'max-age=86400')

  return new Response(response.body, {
    status: response.status,
    headers
  })
}

export const prerender = false

================
File: pages/api/og/[slug].ts
================
import { ImageResponse } from '@vercel/og'
import type {
  APIRoute,
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType
} from 'astro'
import { type CollectionEntry, getCollection } from 'astro:content'
import fs from 'fs'
import path from 'path'
import type { ReactElement } from 'react'

type AllCollectionEntry = CollectionEntry<'projects' | 'blog'>

type OGAPIRoute = APIRoute<
  InferGetStaticPropsType<typeof getStaticPaths>,
  InferGetStaticParamsType<typeof getStaticPaths>
>

const generateHtml = (data: AllCollectionEntry['data']): ReactElement => {
  const image = fs.readFileSync(
    path.resolve(process.cwd(), 'public/images/og_background.png')
  )

  return {
    key: 'html',
    type: 'div',
    props: {
      tw: 'h-full w-full p-32 pt-28 flex flex-col relative',
      style: {
        fontFamily: 'Switzer Medium'
      },
      children: [
        {
          type: 'img',
          props: {
            tw: 'absolute left-0 top-0',
            src: image.buffer,
            width: 1200,
            height: 630
          }
        },
        {
          type: 'div',
          props: {
            tw: 'flex self-start items-center rounded-full gap-4 py-3 pl-3 pr-4 border border-slate-600 text-white',
            children: [
              {
                type: 'div',
                props: {
                  tw: 'w-8 h-8 mr-4 bg-green-300 text-green-300 rounded-full'
                }
              },
              {
                type: 'div',
                props: {
                  tw: 'text-3xl flex',
                  children: [
                    {
                      type: 'div',
                      props: {
                        tw: 'mr-5',
                        children: 'Andres'
                      }
                    },
                    {
                      type: 'div',
                      props: {
                        tw: 'mr-5',
                        children: '|'
                      }
                    },
                    {
                      type: 'div',
                      props: {
                        tw: 'mr-5',
                        children: 'andrespaulino.dev'
                      }
                    }
                  ]
                }
              }
            ],
            style: {
              fontFamily: 'Switzer Medium'
            }
          }
        },
        {
          type: 'div',
          props: {
            tw: 'text-6xl font-bold text-white mt-12 tracking-tight',
            children: data.title,
            style: {
              fontFamily: 'Switzer Semi Bold'
            }
          }
        },
        {
          type: 'div',
          props: {
            tw: 'mt-8 text-3xl font-medium text-slate-300',
            children: data.description
          }
        }
      ]
    }
  }
}

export const GET: OGAPIRoute = async ({ props }) => {
  const {
    posts: { data }
  } = props
  const html = generateHtml(data)

  const SwitzerMedium = fs.readFileSync(
    path.resolve(process.cwd(), 'public/fonts/Switzer-Medium.otf')
  )

  const SwitzerSemiBold = fs.readFileSync(
    path.resolve(process.cwd(), 'public/fonts/Switzer-Semibold.otf')
  )

  return new ImageResponse(html, {
    width: 1200,
    height: 630,
    fonts: [
      {
        name: 'Switzer Semi Bold',
        data: SwitzerSemiBold.buffer as ArrayBuffer,
        style: 'normal'
      },
      {
        name: 'Switzer Medium',
        data: SwitzerMedium.buffer as ArrayBuffer,
        style: 'normal'
      }
    ]
  })
}

// getStaticPaths is used to limit the OG images generated.
// This prevents dynamic generation of OG images, which could be abused.
// Instead, OG images are generated only for existing articles during build time.
export const getStaticPaths = (async () => {
  const projects = await getCollection('projects')
  const blog = await getCollection('blog')

  return [...projects, ...blog].map((posts) => ({
    params: {
      slug: posts.id // used as the key to map the og photo to the posts
    },
    props: { posts }
  }))
}) satisfies GetStaticPaths

================
File: pages/blog/[id].astro
================
---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import ContentWrapper from '@/components/ContentWrapper.astro'
import BlogLayout from '@/layouts/BlogLayout'
import client from '@/lib/client'

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')

  return blogEntries.map((entry) => {
    return {
      params: { id: entry.id },
      props: { entry }
    }
  })
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

const getLastUpdatedTime = client.api.github['last-updated-file']
const { latestCommitUrl, lastUpdatedTime } = await getLastUpdatedTime
  .$get({ query: { path: `blog/${entry.id}.mdx` } })
  .then((res) => res.json())

const { minutes } = readingTime(entry.body!)
---

<BlogLayout
  headings={headings}
  id={entry.id}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(minutes)}
  {...entry.data}
>
  <ContentWrapper content={Content} />
</BlogLayout>

================
File: pages/blog/index.astro
================
---
import { getCollection } from 'astro:content'

import BlogCard from '@/components/BlogCard.astro'
import BlogHeader from '@/components/BlogHeader.astro'
import SEO from '@/components/SEO.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getCustomTransition } from '@/lib/customTransition'
import { blogMetaData } from '@/lib/metaData'

import Decorator from '../projects/_components/Decorator.astro'

const blogEntries = await getCollection('blog')
---

<!-- <UnderConstruction /> -->
<BaseLayout>
  <SEO
    title={`Blog | ${blogMetaData.title}`}
    description={blogMetaData.description}
    slot='seo'
  />
  <Decorator slot='decorator' />
  <BlogHeader class='mt-16 sm:mt-40' />
  <section class='mt-12 sm:mt-16' transition:animate={getCustomTransition(0.2)}>
    {blogEntries.map((item) => <BlogCard {...item} />)}
  </section>
</BaseLayout>

================
File: pages/bookmarks.astro
================
---
import UnderConstruction from './_components/UnderConstruction.astro'
---

<UnderConstruction />

================
File: pages/index.astro
================
---
import BaseLayout from '@/layouts/BaseLayout.astro'
import { mainWebsite } from '@/lib/structuredData'

import BentoSection from './_components/BentoSection.astro'
import BlogSection from './_components/BlogSection.astro'
import Decorator from './_components/Decorator.astro'
import HeroSection from './_components/HeroSection.astro'
import ProjectSection from './_components/ProjectSection.astro'
---

<BaseLayout>
  <Decorator slot='decorator' />
  <script
    is:inline
    type='application/ld+json'
    set:html={JSON.stringify(mainWebsite)}
    slot='head'
  />
  <HeroSection />
  <BentoSection />
  <ProjectSection />
  <BlogSection />
</BaseLayout>

<style>
  .leaflet-container {
    width: 100%;
    height: 100vh;
  }
</style>

================
File: pages/projects/_components/Decorator.astro
================
---
import RayLight from '@/components/Raylight'
import { cn } from '@/lib/utils'
---

<RayLight.Container>
  <RayLight.Component
    type='secondary'
    className={cn(
      'h-[117px] w-[585px] -rotate-[37deg] opacity-20',
      '-top-[40px] left-[560px]'
    )}
  />
  <RayLight.Component
    type='secondary'
    className={cn(
      'h-[267px] w-[1192px] -rotate-[37deg] opacity-45',
      '-top-[60px] left-[680px]'
    )}
  />
</RayLight.Container>

================
File: pages/projects/[id].astro
================
---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'
import type { BreadcrumbList, WithContext } from 'schema-dts'

import ContentWrapper from '@/components/ContentWrapper.astro'
import ProjectLayout from '@/layouts/ProjectLayout'
import client from '@/lib/client'
import { getProjectSchema, projectWebsite } from '@/lib/structuredData'

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}

export const getStaticPaths = (async () => {
  const projectEntries = await getCollection('projects')

  return projectEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry }
  }))
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

const getLastUpdatedTime = client.api.github['last-updated-file']
const { latestCommitUrl, lastUpdatedTime } = await getLastUpdatedTime
  .$get({ query: { path: `projects/${entry.id}.mdx` } })
  .then((res) => res.json())

const { minutes, words } = readingTime(entry.body!)

const projectStructuredData = getProjectSchema(entry)

const breadcrumbsStructuredData: WithContext<BreadcrumbList> = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: 'Projects',
      item: `${import.meta.env.SITE}/projects/`
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: entry.data.title,
      item: `${import.meta.env.SITE}/projects/${entry.id}/`
    }
  ]
}

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': [projectStructuredData, breadcrumbsStructuredData, projectWebsite]
}
---

<ProjectLayout
  headings={headings}
  slug={entry.id}
  readingTime={Math.ceil(minutes)}
  wordsCount={words}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  {...entry.data}
>
  <script
    is:inline
    type='application/ld+json'
    set:html={JSON.stringify(jsonLd)}
    slot='head'
  />
  <ContentWrapper content={Content} />
</ProjectLayout>

================
File: pages/projects/index.astro
================
---
import { getCollection } from 'astro:content'

import ProjectCard from '@/components/ProjectCard'
import ProjectHeader from '@/components/ProjectHeader.astro'
import SEO from '@/components/SEO.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getCustomTransition } from '@/lib/customTransition'
import { projectMetaData } from '@/lib/metaData'

import Decorator from './_components/Decorator.astro'

const projects = await getCollection('projects')
---

<BaseLayout>
  <SEO
    title={`Projects | ${projectMetaData.title}`}
    description={projectMetaData.description}
    slot='seo'
  />
  <Decorator slot='decorator' />
  <ProjectHeader class='mt-16 sm:mt-40' />
  <section
    class='mt-12 grid gap-12 sm:mt-16 sm:grid-cols-2 lg:grid-cols-3'
    transition:animate={getCustomTransition(0.2)}
  >
    {projects.map(({ id, data }) => <ProjectCard slug={id} {...data} />)}
  </section>
</BaseLayout>

================
File: pages/robots.txt.ts
================
import type { APIRoute } from 'astro'

const getRobotsTxt = (sitemapURL: URL) => `
User-agent: *
Allow: /

Sitemap: ${sitemapURL.href}
`

export const GET: APIRoute = ({ site }) => {
  const sitemapURL = new URL('sitemap-index.xml', site)
  return new Response(getRobotsTxt(sitemapURL))
}

================
File: pages/rss.xml.js
================
import rss from '@astrojs/rss'
import { getCollection } from 'astro:content'
import MarkdownIt from 'markdown-it'
import sanitizeHtml from 'sanitize-html'

import { mainMetaData } from '@/lib/metaData'

const parser = new MarkdownIt()

export async function GET(context) {
  const posts = await getCollection('blog')

  return rss({
    title: mainMetaData.title,
    description: mainMetaData.description,
    site: context.site,
    items: posts.map((post) => ({
      ...post.data,
      link: `/blog/${post.id}/`,
      content: sanitizeHtml(parser.render(post.body), {
        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img'])
      })
    }))
  })
}

================
File: styles/global.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .article-link {
    text-decoration: underline;
    text-underline-offset: 1.5px;
    text-decoration-color: theme(colors.zinc.600) !important;
    text-decoration-thickness: 2px !important;
    transition: text-underline-offset 0.15s ease-out;
  }

  .article-link:hover {
    text-underline-offset: 2px !important;
    text-decoration-color: theme(colors.zinc.400) !important;
  }

  .bg-primary-gradient {
    background-image: linear-gradient(
      to right,
      var(--accent-color-1),
      var(--accent-color-2)
    );
  }

  .font-display {
    @apply font-secondary tracking-normal;
  }

  .font-heading {
    @apply font-secondary tracking-tight;
  }

  .link-hover-animation {
    position: relative;

    &::before {
      position: absolute;
      content: '';
      left: var(--offsetStart, 0px);
      bottom: -5px;
      height: 1.25px;
      width: 0;
      background-image: repeating-linear-gradient(
        to right,
        var(--dot-color, rgba(255, 255, 255, 0.75)),
        var(--dot-color, rgba(255, 255, 255, 0.75)) 2px,
        transparent 2px,
        transparent 3px
      );
      transition: all 0.3s ease-in-out;
    }
  }

  .link-hovered-animation::before {
    width: calc(100% - var(--offsetEnd, var(--offsetStart, 0px)));
  }

  .scrollbar-color {
    scrollbar-width: thin;
    scrollbar-color: theme(colors.zinc.400) theme(colors.zinc.900);
  }

  .text-primary-gradient {
    @apply bg-primary-gradient;
    background-clip: text;
    color: transparent;
  }
}

:root {
  --accent-color-1: #00df73;
  --accent-color-2: #01fedc;
  --accent-gradient-color: linear-gradient(
    90deg,
    var(--accent-color-1),
    var(--accent-color-2)
  );
}

:focus-visible {
  @apply outline outline-2 outline-offset-2 outline-emerald-300;
}

@keyframes fade-in-bottom {
  0% {
    transform: translateY(50px);
    opacity: 0;
    filter: blur(16px);
  }
  100% {
    transform: translateY(0);
    opacity: 1;
    filter: blur(0);
  }
}

@keyframes text-blur-out {
  0% {
    filter: blur(0.01);
  }
  100% {
    filter: blur(12px) opacity(0%);
  }
}

.tooltip-content {
  --tooltip-color: theme('colors.zinc.900');
  --tooltip-border-color: theme('colors.zinc.700');
}

[data-side='top'] svg {
  bottom: -9px;
  left: 50%;
  transform: translateX(-50%);
}

[data-side='bottom'] svg {
  top: -9px;
  left: 50%;
  transform: translateX(-50%) rotate(180deg);
}

[data-side='left'] svg {
  right: -20.25px;
  top: 50%;
  transform: translateY(-50%) rotate(-90deg);
}

[data-side='right'] svg {
  left: -20.25px;
  top: 50%;
  transform: translateY(-50%) rotate(90deg);
}

================
File: types/index.ts
================
export interface GithubContributionDay {
  count: number
  date: string
}

export interface GithubContributionData {
  lastPushedAt: number
  totalContributions: number
  contributions: GithubContributionDay[]
}

export interface GithubRepositoryLastUpdated {
  name: string
  description: string
  forkCount: number
  stargazerCount: number
  url: string
  pushedAt: string
  updatedAt: string
}

export type MonkeyTypeLanguage = 'indonesian' | 'english'

export interface MonkeyTypeData {
  acc: number
  consistency: number
  language: MonkeyTypeLanguage
  wpm: number
  time: number
}
