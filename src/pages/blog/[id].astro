---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import ContentWrapper from '@/components/ContentWrapper.astro'
import BlogLayout from '@/layouts/BlogLayout'
import client from '@/lib/client'

// Tell Astro to prerender this page
export const prerender = true;

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')

  return blogEntries.map((entry) => {
    // Extract just the filename without extension
    const slug = entry.id.split('/').pop()?.replace(/\.mdx$/, '') || entry.id
    
    return {
      params: { id: slug },
      props: { entry }
    }
  })
}) satisfies GetStaticPaths

const { entry } = Astro.props
if (!entry) {
  return new Response('Blog post not found', { status: 404 });
}
const { Content, headings } = await render(entry)

const getLastUpdatedTime = client.api.github['last-updated-file']
let lastUpdatedTime = new Date().toISOString()
let latestCommitUrl = ''

try {
  const response = await getLastUpdatedTime.$get({ query: { path: `blog/${entry.id}.mdx` } })
  if (response.status === 200) {
    const data = await response.json()
    lastUpdatedTime = data.lastUpdatedTime || lastUpdatedTime
    latestCommitUrl = data.latestCommitUrl || ''
  }
} catch (error) {
  console.error(`Error fetching last updated time for blog/${entry.id}.mdx:`, error)
  // Continue with default values
}

const { minutes } = readingTime(entry.body!)

// Extract slug from entry.id for consistent URLs
const slug = entry.id.split('/').pop()?.replace(/\.mdx$/, '') || entry.id
---

<BlogLayout
  headings={headings}
  id={slug}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(minutes)}
  {...entry.data}
>
  <ContentWrapper content={Content} />
</BlogLayout>
